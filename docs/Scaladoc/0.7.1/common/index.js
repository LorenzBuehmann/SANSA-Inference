Index.PACKAGES = {"scalax" : [], "scalax.collection.connectivity" : [{"name" : "scalax.collection.connectivity.GraphComponents", "shortDescription" : "Provides algorithms for finding graph components.", "object" : "scalax\/collection\/connectivity\/GraphComponents$.html", "members_class" : [{"label" : "stronglyConnectedComponentsDag2", "tail" : "(): Graph[Graph[N, LDiEdge], DiEdge]", "member" : "scalax.collection.connectivity.GraphComponents.stronglyConnectedComponentsDag2", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#stronglyConnectedComponentsDag2:scalax.collection.Graph[scalax.collection.Graph[N,scalax.collection.edge.LDiEdge],scalax.collection.GraphEdge.DiEdge]", "kind" : "def"}, {"label" : "stronglyConnectedComponentsDag", "tail" : "(): Graph[Graph[N, DiEdge], DiEdge]", "member" : "scalax.collection.connectivity.GraphComponents.stronglyConnectedComponentsDag", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#stronglyConnectedComponentsDag:scalax.collection.Graph[scalax.collection.Graph[N,scalax.collection.GraphEdge.DiEdge],scalax.collection.GraphEdge.DiEdge]", "kind" : "def"}, {"label" : "stronglyConnectedNodeSets", "tail" : "(): Set[Set[Graph.NodeT]]", "member" : "scalax.collection.connectivity.GraphComponents.stronglyConnectedNodeSets", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#stronglyConnectedNodeSets:scala.collection.Set[scala.collection.Set[GraphComponents.this.g.NodeT]]", "kind" : "def"}, {"label" : "stronglyConnectedSets", "tail" : "(): Set[Set[N]]", "member" : "scalax.collection.connectivity.GraphComponents.stronglyConnectedSets", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#stronglyConnectedSets:scala.collection.Set[scala.collection.Set[N]]", "kind" : "def"}, {"label" : "DeepSearchStackAggregator", "tail" : "", "member" : "scalax.collection.connectivity.GraphComponents.DeepSearchStackAggregator", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#DeepSearchStackAggregator=Seq[GraphComponents.this.g.NodeT]=>Unit", "kind" : "type"}, {"member" : "scalax.collection.connectivity.GraphComponents#<init>", "error" : "unsupported entity"}, {"label" : "g", "tail" : ": Graph[N, E]", "member" : "scalax.collection.connectivity.GraphComponents.g", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#g:scalax.collection.Graph[N,E]", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scalax\/collection\/connectivity\/GraphComponents.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scalax\/collection\/connectivity\/GraphComponents.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "graphToComponents", "tail" : "(g: Graph[N, E])(arg0: ClassTag[N]): GraphComponents[N, E]", "member" : "scalax.collection.connectivity.GraphComponents.graphToComponents", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#graphToComponents[N,E[X]<:scalax.collection.GraphPredef.EdgeLikeIn[X]](g:scalax.collection.Graph[N,E])(implicitevidence$1:scala.reflect.ClassTag[N]):scalax.collection.connectivity.GraphComponents[N,E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scalax\/collection\/connectivity\/GraphComponents$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scalax\/collection\/connectivity\/GraphComponents.html", "kind" : "class"}], "net.sansa_stack.inference" : [], "net.sansa_stack.inference.utils" : [{"name" : "net.sansa_stack.inference.utils.CollectionUtils", "shortDescription" : "Some utility methods for Scala collections.", "object" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html", "members_object" : [{"label" : "toMultiMap", "tail" : "(tuples: Iterable[(A, B)]): Map[A, Set[B]]", "member" : "net.sansa_stack.inference.utils.CollectionUtils.toMultiMap", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#toMultiMap[A,B](tuples:Iterable[(A,B)]):Map[A,Set[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/CollectionUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.EntailmentRegimes", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html", "members_object" : [{"label" : "OWL", "tail" : "", "member" : "net.sansa_stack.inference.utils.EntailmentRegimes.OWL", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#OWL", "kind" : "object"}, {"label" : "RDFS", "tail" : "", "member" : "net.sansa_stack.inference.utils.EntailmentRegimes.RDFS", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#RDFS", "kind" : "object"}, {"label" : "EntailmentRegime", "tail" : "", "member" : "net.sansa_stack.inference.utils.EntailmentRegimes.EntailmentRegime", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#EntailmentRegimeextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/EntailmentRegimes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.GraphUtils", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html", "members_object" : [{"label" : "ClassRuleTriplePatternGraphExporter", "tail" : "", "member" : "net.sansa_stack.inference.utils.GraphUtils.ClassRuleTriplePatternGraphExporter", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#ClassRuleTriplePatternGraphExporterextendsAnyRef", "kind" : "implicit class"}, {"label" : "ClassRuleDependencyGraphExporter", "tail" : "", "member" : "net.sansa_stack.inference.utils.GraphUtils.ClassRuleDependencyGraphExporter", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#ClassRuleDependencyGraphExporterextendsAnyRef", "kind" : "implicit class"}, {"label" : "asJGraphtRuleSetGraph", "tail" : "(graph: Graph[Rule, LDiEdge], showInFlowDirection: Boolean): Graph[Rule, LabeledEdge[Rule, TriplePattern]]", "member" : "net.sansa_stack.inference.utils.GraphUtils.asJGraphtRuleSetGraph", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#asJGraphtRuleSetGraph(graph:scalax.collection.mutable.Graph[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.edge.LDiEdge],showInFlowDirection:Boolean):org.jgrapht.Graph[org.apache.jena.reasoner.rulesys.Rule,net.sansa_stack.inference.utils.graph.LabeledEdge[org.apache.jena.reasoner.rulesys.Rule,org.apache.jena.reasoner.TriplePattern]]", "kind" : "def"}, {"label" : "asJGraphtRuleGraph", "tail" : "(graph: Graph[Node, LDiEdge]): Graph[Node, LabeledEdge[Node, String]]", "member" : "net.sansa_stack.inference.utils.GraphUtils.asJGraphtRuleGraph", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#asJGraphtRuleGraph(graph:scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge]):org.jgrapht.Graph[org.apache.jena.graph.Node,net.sansa_stack.inference.utils.graph.LabeledEdge[org.apache.jena.graph.Node,String]]", "kind" : "def"}, {"label" : "areIsomorphic", "tail" : "(graph1: Graph[Node, LDiEdge], graph2: Graph[Node, LDiEdge]): Boolean", "member" : "net.sansa_stack.inference.utils.GraphUtils.areIsomorphic", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#areIsomorphic(graph1:scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge],graph2:scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/GraphUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.JenaTripleToNTripleString", "shortDescription" : "Convert a Jena Triple to an N-Triples string.", "members_class" : [{"label" : "apply", "tail" : "(t: Triple): String", "member" : "net.sansa_stack.inference.utils.JenaTripleToNTripleString.apply", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#apply(t:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.utils.JenaTripleToNTripleString#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (String) ⇒ A): (Triple) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Triple): (A) ⇒ String", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/JenaTripleToNTripleString.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.Logging", "members_trait" : [{"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Logging.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Utility trait for classes that want to log data.", "trait" : "net\/sansa_stack\/inference\/utils\/Logging.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.utils.NodeTableBuilder", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.utils.NodeTableBuilder.main", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NodeTableBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.NTriplesStringToJenaTriple", "shortDescription" : "Convert an N-Triples line to an RDFTriple object.", "members_class" : [{"label" : "apply", "tail" : "(s: String): Triple", "member" : "net.sansa_stack.inference.utils.NTriplesStringToJenaTriple.apply", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#apply(s:String):org.apache.jena.graph.Triple", "kind" : "def"}, {"member" : "net.sansa_stack.inference.utils.NTriplesStringToJenaTriple#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Triple) ⇒ A): (String) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ String): (A) ⇒ Triple", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToJenaTriple.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.NTriplesStringToRDFTriple", "shortDescription" : "Convert an N-Triples line to an RDFTriple object.", "members_class" : [{"label" : "apply", "tail" : "(s: String): Option[RDFTriple]", "member" : "net.sansa_stack.inference.utils.NTriplesStringToRDFTriple.apply", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#apply(s:String):Option[net.sansa_stack.inference.data.RDFTriple]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.utils.NTriplesStringToRDFTriple#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[RDFTriple]) ⇒ A): (String) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ String): (A) ⇒ Option[RDFTriple]", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/NTriplesStringToRDFTriple.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.PredicateUtils", "shortDescription" : "Some utils for logical combinations of boolean functions.", "object" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html", "members_object" : [{"label" : "RichPredicate", "tail" : "", "member" : "net.sansa_stack.inference.utils.PredicateUtils.RichPredicate", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#RichPredicate[A]extendsA=>Boolean", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/PredicateUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.Profiler", "members_trait" : [{"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Profiler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/utils\/Profiler.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.utils.RDFTripleOrdering", "shortDescription" : "Comparator for RDF triples.", "object" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html", "members_object" : [{"label" : "Ops", "tail" : "", "member" : "scala.math.Ordering.Ops", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#OpsextendsAnyRef", "kind" : "class"}, {"label" : "compare", "tail" : "(t1: RDFTriple, t2: RDFTriple): Int", "member" : "net.sansa_stack.inference.utils.RDFTripleOrdering.compare", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#compare(t1:net.sansa_stack.inference.data.RDFTriple,t2:net.sansa_stack.inference.data.RDFTriple):Int", "kind" : "def"}, {"label" : "mkOrderingOps", "tail" : "(lhs: RDFTriple): Ops", "member" : "scala.math.Ordering.mkOrderingOps", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#mkOrderingOps(lhs:T):Ordering.this.Ops", "kind" : "implicit def"}, {"label" : "on", "tail" : "(f: (U) ⇒ RDFTriple): Ordering[U]", "member" : "scala.math.Ordering.on", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#on[U](f:U=>T):scala.math.Ordering[U]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Ordering[RDFTriple]", "member" : "scala.math.Ordering.reverse", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#reverse:scala.math.Ordering[T]", "kind" : "def"}, {"label" : "min", "tail" : "(x: RDFTriple, y: RDFTriple): RDFTriple", "member" : "scala.math.Ordering.min", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#min(x:T,y:T):T", "kind" : "def"}, {"label" : "max", "tail" : "(x: RDFTriple, y: RDFTriple): RDFTriple", "member" : "scala.math.Ordering.max", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#max(x:T,y:T):T", "kind" : "def"}, {"label" : "equiv", "tail" : "(x: RDFTriple, y: RDFTriple): Boolean", "member" : "scala.math.Ordering.equiv", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#equiv(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: RDFTriple, y: RDFTriple): Boolean", "member" : "scala.math.Ordering.gt", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#gt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: RDFTriple, y: RDFTriple): Boolean", "member" : "scala.math.Ordering.lt", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#lt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gteq", "tail" : "(x: RDFTriple, y: RDFTriple): Boolean", "member" : "scala.math.Ordering.gteq", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#gteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lteq", "tail" : "(x: RDFTriple, y: RDFTriple): Boolean", "member" : "scala.math.Ordering.lteq", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#lteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: RDFTriple, y: RDFTriple): Some[Int]", "member" : "scala.math.Ordering.tryCompare", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#tryCompare(x:T,y:T):Some[Int]", "kind" : "def"}, {"label" : "thenComparingDouble", "tail" : "(arg0: ToDoubleFunction[_ >: RDFTriple]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparingDouble", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparingDouble(x$1:java.util.function.ToDoubleFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingLong", "tail" : "(arg0: ToLongFunction[_ >: RDFTriple]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparingLong", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparingLong(x$1:java.util.function.ToLongFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingInt", "tail" : "(arg0: ToIntFunction[_ >: RDFTriple]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparingInt", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparingInt(x$1:java.util.function.ToIntFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: RDFTriple, _ <: U]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparing[U<:Comparable[_>:U]](x$1:java.util.function.Function[_>:T,_<:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: RDFTriple, _ <: U], arg1: Comparator[_ >: U]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparing[U](x$1:java.util.function.Function[_>:T,_<:U],x$2:java.util.Comparator[_>:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Comparator[_ >: RDFTriple]): Comparator[RDFTriple]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#thenComparing(x$1:java.util.Comparator[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Comparator[RDFTriple]", "member" : "java.util.Comparator.reversed", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#reversed():java.util.Comparator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleOrdering$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.RDFTripleToNTripleString", "shortDescription" : "Convert an RDFTriple object to an N-Triple string.", "members_class" : [{"label" : "apply", "tail" : "(t: RDFTriple): String", "member" : "net.sansa_stack.inference.utils.RDFTripleToNTripleString.apply", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#apply(t:net.sansa_stack.inference.data.RDFTriple):String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.utils.RDFTripleToNTripleString#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (String) ⇒ A): (RDFTriple) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ RDFTriple): (A) ⇒ String", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/RDFTripleToNTripleString.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.RuleUtils", "shortDescription" : "Utility class for rules.", "object" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html", "members_object" : [{"label" : "TriplePatternEqualiltyExtension", "tail" : "", "member" : "net.sansa_stack.inference.utils.RuleUtils.TriplePatternEqualiltyExtension", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#TriplePatternEqualiltyExtensionextendsAnyRef", "kind" : "implicit class"}, {"label" : "RuleExtension", "tail" : "", "member" : "net.sansa_stack.inference.utils.RuleUtils.RuleExtension", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#RuleExtensionextendsAnyRef", "kind" : "implicit class"}, {"label" : "canMerge", "tail" : "(rule1: Rule, rule2: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.canMerge", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#canMerge(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "sameHead", "tail" : "(rule1: Rule, rule2: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.sameHead", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#sameHead(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "sameBody", "tail" : "(rule1: Rule, rule2: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.sameBody", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#sameBody(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "varsOf", "tail" : "(tp: Triple): List[Node]", "member" : "net.sansa_stack.inference.utils.RuleUtils.varsOf", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#varsOf(tp:org.apache.jena.graph.Triple):List[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "varsOf", "tail" : "(tp: TriplePattern): List[Node]", "member" : "net.sansa_stack.inference.utils.RuleUtils.varsOf", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#varsOf(tp:org.apache.jena.reasoner.TriplePattern):List[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "varsOfHead", "tail" : "(rule: Rule): Set[Node]", "member" : "net.sansa_stack.inference.utils.RuleUtils.varsOfHead", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#varsOfHead(rule:org.apache.jena.reasoner.rulesys.Rule):Set[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "varsOfBody", "tail" : "(rule: Rule): Set[Node]", "member" : "net.sansa_stack.inference.utils.RuleUtils.varsOfBody", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#varsOfBody(rule:org.apache.jena.reasoner.rulesys.Rule):Set[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "byName", "tail" : "(rules: Seq[Rule], name: String): Option[Rule]", "member" : "net.sansa_stack.inference.utils.RuleUtils.byName", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#byName(rules:Seq[org.apache.jena.reasoner.rulesys.Rule],name:String):Option[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "def"}, {"label" : "load", "tail" : "(filename: String): Seq[Rule]", "member" : "net.sansa_stack.inference.utils.RuleUtils.load", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#load(filename:String):Seq[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "def"}, {"label" : "isCyclic", "tail" : "(rule: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isCyclic", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isCyclic(rule:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "isInverseOf", "tail" : "(rule1: Rule, rule2: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isInverseOf", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isInverseOf(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "isTransitiveClosure", "tail" : "(rule: Rule, property: Node): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isTransitiveClosure", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isTransitiveClosure(rule:org.apache.jena.reasoner.rulesys.Rule,property:org.apache.jena.graph.Node):Boolean", "kind" : "def"}, {"label" : "asGraph", "tail" : "(rule: Rule): Graph[Node, LDiEdge]", "member" : "net.sansa_stack.inference.utils.RuleUtils.asGraph", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#asGraph(rule:org.apache.jena.reasoner.rulesys.Rule):scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge]", "kind" : "def"}, {"label" : "graphOfHead", "tail" : "(rule: Rule): Graph[Node, LDiEdge]", "member" : "net.sansa_stack.inference.utils.RuleUtils.graphOfHead", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#graphOfHead(rule:org.apache.jena.reasoner.rulesys.Rule):scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge]", "kind" : "def"}, {"label" : "graphOfBody", "tail" : "(rule: Rule): Graph[Node, LDiEdge]", "member" : "net.sansa_stack.inference.utils.RuleUtils.graphOfBody", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#graphOfBody(rule:org.apache.jena.reasoner.rulesys.Rule):scalax.collection.mutable.Graph[org.apache.jena.graph.Node,scalax.collection.edge.LDiEdge]", "kind" : "def"}, {"label" : "entailmentType", "tail" : "(rule: Rule): RuleEntailmentType", "member" : "net.sansa_stack.inference.utils.RuleUtils.entailmentType", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#entailmentType(rule:org.apache.jena.reasoner.rulesys.Rule):net.sansa_stack.inference.rules.RuleEntailmentType.RuleEntailmentType", "kind" : "def"}, {"label" : "isHybrid", "tail" : "(rule: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isHybrid", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isHybrid(rule:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "isAssertional", "tail" : "(rule: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isAssertional", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isAssertional(rule:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "isTerminological", "tail" : "(rule: Rule): Boolean", "member" : "net.sansa_stack.inference.utils.RuleUtils.isTerminological", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isTerminological(rule:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/RuleUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.Tabulator", "shortDescription" : "Utility to print table to console(taken from http:\/\/stackoverflow.com\/questions\/7539831\/scala-draw-table-to-console)", "object" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html", "members_object" : [{"label" : "rowSeparator", "tail" : "(colSizes: Seq[Int]): String", "member" : "net.sansa_stack.inference.utils.Tabulator.rowSeparator", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#rowSeparator(colSizes:Seq[Int]):String", "kind" : "def"}, {"label" : "formatRow", "tail" : "(row: Seq[Any], colSizes: Seq[Int]): String", "member" : "net.sansa_stack.inference.utils.Tabulator.formatRow", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#formatRow(row:Seq[Any],colSizes:Seq[Int]):String", "kind" : "def"}, {"label" : "formatRows", "tail" : "(rowSeparator: String, rows: Seq[String]): String", "member" : "net.sansa_stack.inference.utils.Tabulator.formatRows", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#formatRows(rowSeparator:String,rows:Seq[String]):String", "kind" : "def"}, {"label" : "format", "tail" : "(table: Seq[Seq[Any]]): String", "member" : "net.sansa_stack.inference.utils.Tabulator.format", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#format(table:Seq[Seq[Any]]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Tabulator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.TriplePatternOrdering", "shortDescription" : "Ordering for triple patterns.", "members_class" : [{"label" : "Ops", "tail" : "", "member" : "scala.math.Ordering.Ops", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#OpsextendsAnyRef", "kind" : "class"}, {"label" : "compare", "tail" : "(x: TriplePattern, y: TriplePattern): Int", "member" : "net.sansa_stack.inference.utils.TriplePatternOrdering.compare", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#compare(x:org.apache.jena.reasoner.TriplePattern,y:org.apache.jena.reasoner.TriplePattern):Int", "kind" : "def"}, {"label" : "comp", "tail" : ": NodeComparator", "member" : "net.sansa_stack.inference.utils.TriplePatternOrdering.comp", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#comp:org.apache.jena.sparql.util.NodeComparator", "kind" : "implicit val"}, {"member" : "net.sansa_stack.inference.utils.TriplePatternOrdering#<init>", "error" : "unsupported entity"}, {"label" : "mkOrderingOps", "tail" : "(lhs: TriplePattern): Ops", "member" : "scala.math.Ordering.mkOrderingOps", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#mkOrderingOps(lhs:T):Ordering.this.Ops", "kind" : "implicit def"}, {"label" : "on", "tail" : "(f: (U) ⇒ TriplePattern): Ordering[U]", "member" : "scala.math.Ordering.on", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#on[U](f:U=>T):scala.math.Ordering[U]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Ordering[TriplePattern]", "member" : "scala.math.Ordering.reverse", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#reverse:scala.math.Ordering[T]", "kind" : "def"}, {"label" : "min", "tail" : "(x: TriplePattern, y: TriplePattern): TriplePattern", "member" : "scala.math.Ordering.min", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#min(x:T,y:T):T", "kind" : "def"}, {"label" : "max", "tail" : "(x: TriplePattern, y: TriplePattern): TriplePattern", "member" : "scala.math.Ordering.max", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#max(x:T,y:T):T", "kind" : "def"}, {"label" : "equiv", "tail" : "(x: TriplePattern, y: TriplePattern): Boolean", "member" : "scala.math.Ordering.equiv", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#equiv(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: TriplePattern, y: TriplePattern): Boolean", "member" : "scala.math.Ordering.gt", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#gt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: TriplePattern, y: TriplePattern): Boolean", "member" : "scala.math.Ordering.lt", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#lt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gteq", "tail" : "(x: TriplePattern, y: TriplePattern): Boolean", "member" : "scala.math.Ordering.gteq", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#gteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lteq", "tail" : "(x: TriplePattern, y: TriplePattern): Boolean", "member" : "scala.math.Ordering.lteq", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#lteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: TriplePattern, y: TriplePattern): Some[Int]", "member" : "scala.math.Ordering.tryCompare", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#tryCompare(x:T,y:T):Some[Int]", "kind" : "def"}, {"label" : "thenComparingDouble", "tail" : "(arg0: ToDoubleFunction[_ >: TriplePattern]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparingDouble", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparingDouble(x$1:java.util.function.ToDoubleFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingLong", "tail" : "(arg0: ToLongFunction[_ >: TriplePattern]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparingLong", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparingLong(x$1:java.util.function.ToLongFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingInt", "tail" : "(arg0: ToIntFunction[_ >: TriplePattern]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparingInt", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparingInt(x$1:java.util.function.ToIntFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: TriplePattern, _ <: U]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparing[U<:Comparable[_>:U]](x$1:java.util.function.Function[_>:T,_<:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: TriplePattern, _ <: U], arg1: Comparator[_ >: U]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparing[U](x$1:java.util.function.Function[_>:T,_<:U],x$2:java.util.Comparator[_>:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Comparator[_ >: TriplePattern]): Comparator[TriplePattern]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#thenComparing(x$1:java.util.Comparator[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Comparator[TriplePattern]", "member" : "java.util.Comparator.reversed", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#reversed():java.util.Comparator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/TriplePatternOrdering.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.TripleUtils", "shortDescription" : "Utility class for triples.", "object" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html", "members_object" : [{"label" : "TriplePatternExtension", "tail" : "", "member" : "net.sansa_stack.inference.utils.TripleUtils.TriplePatternExtension", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#TriplePatternExtensionextendsAnyRef", "kind" : "implicit class"}, {"label" : "nodes", "tail" : "(tp: Triple): List[Node]", "member" : "net.sansa_stack.inference.utils.TripleUtils.nodes", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#nodes(tp:org.apache.jena.graph.Triple):List[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "position", "tail" : "(node: Node, triple: Triple): Int", "member" : "net.sansa_stack.inference.utils.TripleUtils.position", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#position(node:org.apache.jena.graph.Node,triple:org.apache.jena.graph.Triple):Int", "kind" : "def"}, {"label" : "isAssertional", "tail" : "(triple: Triple): Boolean", "member" : "net.sansa_stack.inference.utils.TripleUtils.isAssertional", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#isAssertional(triple:org.apache.jena.graph.Triple):Boolean", "kind" : "def"}, {"label" : "isTerminological", "tail" : "(triple: Triple): Boolean", "member" : "net.sansa_stack.inference.utils.TripleUtils.isTerminological", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#isTerminological(triple:org.apache.jena.graph.Triple):Boolean", "kind" : "def"}, {"label" : "types", "tail" : ": Set[Node]", "member" : "net.sansa_stack.inference.utils.TripleUtils.types", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#types:Set[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "properties", "tail" : ": List[Node]", "member" : "net.sansa_stack.inference.utils.TripleUtils.properties", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#properties:List[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/TripleUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.utils.Tuple0", "shortDescription" : "A 0-tuple.", "object" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Tuple0.toString", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#toString():String", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "net.sansa_stack.inference.utils.Tuple0.canEqual", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "net.sansa_stack.inference.utils.Tuple0.productElement", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#productElement(n:Int):Any", "kind" : "def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "net.sansa_stack.inference.utils.Tuple0.productArity", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#productArity:Int", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/Tuple0$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net" : [], "net.sansa_stack.inference.data" : [{"name" : "net.sansa_stack.inference.data.AbstractRDFGraph", "shortDescription" : "A data structure that comprises a collection of triples.", "members_class" : [{"member" : "net.sansa_stack.inference.data.AbstractRDFGraph#<init>", "error" : "unsupported entity"}, {"label" : "triples", "tail" : ": D", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.triples", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#triples:D", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.size", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#size():Long", "kind" : "abstract def"}, {"label" : "distinct", "tail" : "(): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.distinct", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#distinct():G", "kind" : "abstract def"}, {"label" : "difference", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.difference", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#difference(graph:G):G", "kind" : "abstract def"}, {"label" : "intersection", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.intersection", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#intersection(graph:G):G", "kind" : "abstract def"}, {"label" : "unionAll", "tail" : "(graphs: Seq[G]): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.unionAll", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#unionAll(graphs:Seq[G]):G", "kind" : "abstract def"}, {"label" : "union", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.union", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#union(graph:G):G", "kind" : "abstract def"}, {"label" : "find", "tail" : "(triple: Rdf.Triple): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.find", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#find(triple:Rdf#Triple):G", "kind" : "abstract def"}, {"label" : "find", "tail" : "(s: Option[Rdf.Node], p: Option[Rdf.Node], o: Option[Rdf.Node]): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.find", "link" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html#find(s:Option[Rdf#Node],p:Option[Rdf#Node],o:Option[Rdf#Node]):G", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/data\/AbstractRDFGraph.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.Jena", "members_trait" : [{"label" : "Lang", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.Lang", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#Lang=String", "kind" : "type"}, {"label" : "Literal", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.Literal", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#Literal=org.apache.jena.graph.Node_Literal", "kind" : "type"}, {"label" : "BNode", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.BNode", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#BNode=org.apache.jena.graph.Node_Blank", "kind" : "type"}, {"label" : "URI", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.URI", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#URI=org.apache.jena.graph.Node_URI", "kind" : "type"}, {"label" : "Node", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.Node", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#Node=org.apache.jena.graph.Node", "kind" : "type"}, {"label" : "Triple", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.Triple", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#Triple=org.apache.jena.graph.Triple", "kind" : "type"}, {"label" : "Graph", "tail" : "", "member" : "net.sansa_stack.inference.data.Jena.Graph", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#Graph=org.apache.jena.graph.Graph", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/Jena.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/Jena.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeAny", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeMatch", "error" : "unsupported entity"}], "shortDescription" : "Defines the types related to the RDF datamodel in the Apache Jena framework.", "trait" : "net\/sansa_stack\/inference\/data\/Jena.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.data.JenaOps", "shortDescription" : "", "members_class" : [{"label" : "fromLang", "tail" : "(lang: String): String", "member" : "net.sansa_stack.inference.data.JenaOps.fromLang", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#fromLang(lang:String):String", "kind" : "def"}, {"label" : "makeLang", "tail" : "(langString: String): String", "member" : "net.sansa_stack.inference.data.JenaOps.makeLang", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeLang(langString:String):String", "kind" : "def"}, {"label" : "makeLangTaggedLiteral", "tail" : "(lexicalForm: String, lang: String): Node_Literal", "member" : "net.sansa_stack.inference.data.JenaOps.makeLangTaggedLiteral", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeLangTaggedLiteral(lexicalForm:String,lang:String):org.apache.jena.graph.Node_Literal", "kind" : "def"}, {"label" : "makeLiteral", "tail" : "(lexicalForm: String, datatype: Node_URI): Node_Literal", "member" : "net.sansa_stack.inference.data.JenaOps.makeLiteral", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeLiteral(lexicalForm:String,datatype:org.apache.jena.graph.Node_URI):org.apache.jena.graph.Node_Literal", "kind" : "def"}, {"label" : "__rdfLangStringURI", "tail" : ": Node_URI", "member" : "net.sansa_stack.inference.data.JenaOps.__rdfLangStringURI", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#__rdfLangStringURI:org.apache.jena.graph.Node_URI", "kind" : "val"}, {"label" : "__xsdStringURI", "tail" : ": Node_URI", "member" : "net.sansa_stack.inference.data.JenaOps.__xsdStringURI", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#__xsdStringURI:org.apache.jena.graph.Node_URI", "kind" : "val"}, {"label" : "__xsdString", "tail" : ": RDFDatatype", "member" : "net.sansa_stack.inference.data.JenaOps.__xsdString", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#__xsdString:org.apache.jena.datatypes.RDFDatatype", "kind" : "val"}, {"label" : "mapper", "tail" : ": TypeMapper", "member" : "net.sansa_stack.inference.data.JenaOps.mapper", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#mapper:org.apache.jena.datatypes.TypeMapper", "kind" : "lazy val"}, {"label" : "fromBNode", "tail" : "(bn: Node_Blank): String", "member" : "net.sansa_stack.inference.data.JenaOps.fromBNode", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#fromBNode(bn:org.apache.jena.graph.Node_Blank):String", "kind" : "def"}, {"label" : "makeBNodeLabel", "tail" : "(label: String): Node_Blank", "member" : "net.sansa_stack.inference.data.JenaOps.makeBNodeLabel", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeBNodeLabel(label:String):org.apache.jena.graph.Node_Blank", "kind" : "def"}, {"label" : "makeBNode", "tail" : "(): Node_Blank", "member" : "net.sansa_stack.inference.data.JenaOps.makeBNode", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeBNode():org.apache.jena.graph.Node_Blank", "kind" : "def"}, {"label" : "fromUri", "tail" : "(node: Node_URI): String", "member" : "net.sansa_stack.inference.data.JenaOps.fromUri", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#fromUri(node:org.apache.jena.graph.Node_URI):String", "kind" : "def"}, {"label" : "makeUri", "tail" : "(iriStr: String): Node_URI", "member" : "net.sansa_stack.inference.data.JenaOps.makeUri", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeUri(iriStr:String):org.apache.jena.graph.Node_URI", "kind" : "def"}, {"label" : "foldNode", "tail" : "(node: Node)(funURI: (Node_URI) ⇒ T, funBNode: (Node_Blank) ⇒ T, funLiteral: (Node_Literal) ⇒ T): T", "member" : "net.sansa_stack.inference.data.JenaOps.foldNode", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#foldNode[T](node:org.apache.jena.graph.Node)(funURI:org.apache.jena.graph.Node_URI=>T,funBNode:org.apache.jena.graph.Node_Blank=>T,funLiteral:org.apache.jena.graph.Node_Literal=>T):T", "kind" : "def"}, {"label" : "fromTriple", "tail" : "(t: Triple): (Node, Node_URI, Node)", "member" : "net.sansa_stack.inference.data.JenaOps.fromTriple", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#fromTriple(t:org.apache.jena.graph.Triple):(org.apache.jena.graph.Node,org.apache.jena.graph.Node_URI,org.apache.jena.graph.Node)", "kind" : "def"}, {"label" : "makeTriple", "tail" : "(s: Node, p: Node_URI, o: Node): Triple", "member" : "net.sansa_stack.inference.data.JenaOps.makeTriple", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeTriple(s:org.apache.jena.graph.Node,p:org.apache.jena.graph.Node_URI,o:org.apache.jena.graph.Node):org.apache.jena.graph.Triple", "kind" : "def"}, {"label" : "getTriples", "tail" : "(graph: Graph): Iterable[Triple]", "member" : "net.sansa_stack.inference.data.JenaOps.getTriples", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#getTriples(graph:org.apache.jena.graph.Graph):Iterable[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "makeGraph", "tail" : "(triples: Iterable[Triple]): Graph", "member" : "net.sansa_stack.inference.data.JenaOps.makeGraph", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#makeGraph(triples:Iterable[org.apache.jena.graph.Triple]):org.apache.jena.graph.Graph", "kind" : "def"}, {"label" : "emptyGraph", "tail" : ": Graph", "member" : "net.sansa_stack.inference.data.JenaOps.emptyGraph", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#emptyGraph:org.apache.jena.graph.Graph", "kind" : "val"}, {"member" : "net.sansa_stack.inference.data.JenaOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/JenaOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/data\/JenaOps.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.JenaRDFTripleLike", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "o", "tail" : "(): Node", "member" : "net.sansa_stack.inference.data.TripleOps.o", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#o:Rdf#Node", "kind" : "abstract def"}, {"label" : "p", "tail" : "(): URI", "member" : "net.sansa_stack.inference.data.TripleOps.p", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#p:Rdf#URI", "kind" : "abstract def"}, {"label" : "s", "tail" : "(): Node", "member" : "net.sansa_stack.inference.data.TripleOps.s", "link" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html#s:Rdf#Node", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/data\/JenaRDFTripleLike.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.data.RDF", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDF.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeAny", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeMatch", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Lang", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Literal", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.BNode", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.URI", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Node", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Triple", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Graph", "error" : "unsupported entity"}], "shortDescription" : "Defines the types related to the RDF datamodel.", "trait" : "net\/sansa_stack\/inference\/data\/RDF.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.data.RDFOps", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fromLang", "tail" : "(l: Rdf.Lang): String", "member" : "net.sansa_stack.inference.data.RDFOps.fromLang", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#fromLang(l:Rdf#Lang):String", "kind" : "abstract def"}, {"label" : "makeLang", "tail" : "(s: String): Rdf.Lang", "member" : "net.sansa_stack.inference.data.RDFOps.makeLang", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeLang(s:String):Rdf#Lang", "kind" : "abstract def"}, {"label" : "makeLangTaggedLiteral", "tail" : "(lexicalForm: String, lang: Rdf.Lang): Rdf.Literal", "member" : "net.sansa_stack.inference.data.RDFOps.makeLangTaggedLiteral", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeLangTaggedLiteral(lexicalForm:String,lang:Rdf#Lang):Rdf#Literal", "kind" : "abstract def"}, {"label" : "makeLiteral", "tail" : "(lexicalForm: String, datatype: Rdf.URI): Rdf.Literal", "member" : "net.sansa_stack.inference.data.RDFOps.makeLiteral", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeLiteral(lexicalForm:String,datatype:Rdf#URI):Rdf#Literal", "kind" : "abstract def"}, {"label" : "fromBNode", "tail" : "(bn: Rdf.BNode): String", "member" : "net.sansa_stack.inference.data.RDFOps.fromBNode", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#fromBNode(bn:Rdf#BNode):String", "kind" : "abstract def"}, {"label" : "makeBNodeLabel", "tail" : "(s: String): Rdf.BNode", "member" : "net.sansa_stack.inference.data.RDFOps.makeBNodeLabel", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeBNodeLabel(s:String):Rdf#BNode", "kind" : "abstract def"}, {"label" : "makeBNode", "tail" : "(): Rdf.BNode", "member" : "net.sansa_stack.inference.data.RDFOps.makeBNode", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeBNode():Rdf#BNode", "kind" : "abstract def"}, {"label" : "fromUri", "tail" : "(uri: Rdf.URI): String", "member" : "net.sansa_stack.inference.data.RDFOps.fromUri", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#fromUri(uri:Rdf#URI):String", "kind" : "abstract def"}, {"label" : "makeUri", "tail" : "(s: String): Rdf.URI", "member" : "net.sansa_stack.inference.data.RDFOps.makeUri", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeUri(s:String):Rdf#URI", "kind" : "abstract def"}, {"label" : "fromTriple", "tail" : "(triple: Rdf.Triple): (Rdf.Node, Rdf.URI, Rdf.Node)", "member" : "net.sansa_stack.inference.data.RDFOps.fromTriple", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#fromTriple(triple:Rdf#Triple):(Rdf#Node,Rdf#URI,Rdf#Node)", "kind" : "abstract def"}, {"label" : "makeTriple", "tail" : "(s: Rdf.Node, p: Rdf.URI, o: Rdf.Node): Rdf.Triple", "member" : "net.sansa_stack.inference.data.RDFOps.makeTriple", "link" : "net\/sansa_stack\/inference\/data\/RDFOps.html#makeTriple(s:Rdf#Node,p:Rdf#URI,o:Rdf#Node):Rdf#Triple", "kind" : "abstract def"}], "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/data\/RDFOps$.html", "members_object" : [{"label" : "apply", "tail" : "(ops: RDFOps[Rdf]): RDFOps[Rdf]", "member" : "net.sansa_stack.inference.data.RDFOps.apply", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#apply[Rdf<:net.sansa_stack.inference.data.RDF](implicitops:net.sansa_stack.inference.data.RDFOps[Rdf]):net.sansa_stack.inference.data.RDFOps[Rdf]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/sansa_stack\/inference\/data\/RDFOps.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.data.RDFTriple", "shortDescription" : "An RDF triple (s p o) .", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple.toString", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#toString():String", "kind" : "def"}, {"label" : "object", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple.object", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#object:String", "kind" : "def"}, {"label" : "predicate", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple.predicate", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#predicate:String", "kind" : "def"}, {"label" : "subject", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple.subject", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#subject:String", "kind" : "def"}, {"label" : "_3", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple._3", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#_3:String", "kind" : "def"}, {"label" : "_2", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple._2", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#_2:String", "kind" : "def"}, {"label" : "_1", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTriple._1", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#_1:String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.data.RDFTriple#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": String", "member" : "net.sansa_stack.inference.data.RDFTriple.o", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#o:String", "kind" : "val"}, {"label" : "p", "tail" : ": String", "member" : "net.sansa_stack.inference.data.RDFTriple.p", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#p:String", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "net.sansa_stack.inference.data.RDFTriple.s", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#s:String", "kind" : "val"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product3.productElement", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#productElement(n:Int):Any", "kind" : "def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product3.productArity", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#productArity:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFTriple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/data\/RDFTriple.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.data.RDFTuple", "shortDescription" : "An RDF tuple (s o), i.e.", "members_case class" : [{"label" : "_2", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTuple._2", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#_2:String", "kind" : "def"}, {"label" : "_1", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.RDFTuple._1", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#_1:String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.data.RDFTuple#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": String", "member" : "net.sansa_stack.inference.data.RDFTuple.o", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#o:String", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "net.sansa_stack.inference.data.RDFTuple.s", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#s:String", "kind" : "val"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product2.productElement", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#productElement(n:Int):Any", "kind" : "def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product2.productArity", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#productArity:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFTuple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/data\/RDFTuple.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.data.RDFVocab", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html", "members_class" : [{"label" : "type", "tail" : ": Rdf.URI", "member" : "net.sansa_stack.inference.data.RDFVocab.type", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#type:Rdf#URI", "kind" : "val"}, {"member" : "net.sansa_stack.inference.data.RDFVocab#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(ops: RDFOps[Rdf]): RDFVocab[Rdf]", "member" : "net.sansa_stack.inference.data.RDFVocab.apply", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#apply[Rdf<:net.sansa_stack.inference.data.RDF](implicitops:net.sansa_stack.inference.data.RDFOps[Rdf]):net.sansa_stack.inference.data.RDFVocab[Rdf]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/RDFVocab$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/data\/RDFVocab.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.SimpleRDF", "shortDescription" : "", "members_class" : [{"label" : "Lang", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.Lang", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#Lang=String", "kind" : "type"}, {"label" : "Literal", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.Literal", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#Literal=String", "kind" : "type"}, {"label" : "BNode", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.BNode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#BNode=String", "kind" : "type"}, {"label" : "URI", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.URI", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#URI=String", "kind" : "type"}, {"label" : "Node", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.Node", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#Node=String", "kind" : "type"}, {"label" : "Triple", "tail" : "", "member" : "net.sansa_stack.inference.data.SimpleRDF.Triple", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#Triple=net.sansa_stack.inference.data.RDFTriple", "kind" : "type"}, {"member" : "net.sansa_stack.inference.data.SimpleRDF#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeAny", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.NodeMatch", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.data.RDF.Graph", "error" : "unsupported entity"}], "class" : "net\/sansa_stack\/inference\/data\/SimpleRDF.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.SimpleRDFOps", "shortDescription" : "", "members_class" : [{"label" : "fromBNode", "tail" : "(bn: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.fromBNode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#fromBNode(bn:String):String", "kind" : "def"}, {"label" : "makeBNodeLabel", "tail" : "(s: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeBNodeLabel", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeBNodeLabel(s:String):String", "kind" : "def"}, {"label" : "makeBNode", "tail" : "(): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeBNode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeBNode():String", "kind" : "def"}, {"label" : "fromLang", "tail" : "(lang: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.fromLang", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#fromLang(lang:String):String", "kind" : "def"}, {"label" : "makeLang", "tail" : "(langString: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeLang", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeLang(langString:String):String", "kind" : "def"}, {"label" : "makeLangTaggedLiteral", "tail" : "(lexicalForm: String, lang: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeLangTaggedLiteral", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeLangTaggedLiteral(lexicalForm:String,lang:String):String", "kind" : "def"}, {"label" : "makeLiteral", "tail" : "(lexicalForm: String, datatype: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeLiteral", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeLiteral(lexicalForm:String,datatype:String):String", "kind" : "def"}, {"label" : "fromUri", "tail" : "(node: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.fromUri", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#fromUri(node:String):String", "kind" : "def"}, {"label" : "makeUri", "tail" : "(iriStr: String): String", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeUri", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeUri(iriStr:String):String", "kind" : "def"}, {"label" : "foldNode", "tail" : "(node: String)(funURI: (String) ⇒ T, funBNode: (String) ⇒ T, funLiteral: (String) ⇒ T): T", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.foldNode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#foldNode[T](node:String)(funURI:String=>T,funBNode:String=>T,funLiteral:String=>T):T", "kind" : "def"}, {"label" : "fromTriple", "tail" : "(t: RDFTriple): (String, String, String)", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.fromTriple", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#fromTriple(t:net.sansa_stack.inference.data.RDFTriple):(String,String,String)", "kind" : "def"}, {"label" : "makeTriple", "tail" : "(s: String, p: String, o: String): RDFTriple", "member" : "net.sansa_stack.inference.data.SimpleRDFOps.makeTriple", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#makeTriple(s:String,p:String,o:String):net.sansa_stack.inference.data.RDFTriple", "kind" : "def"}, {"member" : "net.sansa_stack.inference.data.SimpleRDFOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/data\/SimpleRDFOps.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.SQLSchema", "shortDescription" : "The SQL schema used for an RDF graph.", "members_class" : [{"member" : "net.sansa_stack.inference.data.SQLSchema#<init>", "error" : "unsupported entity"}, {"label" : "objectCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.objectCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#objectCol:String", "kind" : "val"}, {"label" : "predicateCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.predicateCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#predicateCol:String", "kind" : "val"}, {"label" : "subjectCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.subjectCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#subjectCol:String", "kind" : "val"}, {"label" : "triplesTable", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.triplesTable", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#triplesTable:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SQLSchema.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/data\/SQLSchema.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.data.SQLSchemaDefault", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html", "members_object" : [{"label" : "objectCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.objectCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#objectCol:String", "kind" : "val"}, {"label" : "predicateCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.predicateCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#predicateCol:String", "kind" : "val"}, {"label" : "subjectCol", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.subjectCol", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#subjectCol:String", "kind" : "val"}, {"label" : "triplesTable", "tail" : ": String", "member" : "net.sansa_stack.inference.data.SQLSchema.triplesTable", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#triplesTable:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/SQLSchemaDefault$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.data.TripleOps", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "o", "tail" : "(): Rdf.Node", "member" : "net.sansa_stack.inference.data.TripleOps.o", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#o:Rdf#Node", "kind" : "abstract def"}, {"label" : "p", "tail" : "(): Rdf.URI", "member" : "net.sansa_stack.inference.data.TripleOps.p", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#p:Rdf#URI", "kind" : "abstract def"}, {"label" : "s", "tail" : "(): Rdf.Node", "member" : "net.sansa_stack.inference.data.TripleOps.s", "link" : "net\/sansa_stack\/inference\/data\/TripleOps.html#s:Rdf#Node", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/data\/TripleOps.html", "kind" : "trait"}], "net.sansa_stack.inference.rules.plan" : [{"name" : "net.sansa_stack.inference.rules.plan.Join", "shortDescription" : "A join between two triple patterns.", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Join.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#toString():String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.plan.Join#<init>", "error" : "unsupported entity"}, {"label" : "joinVar", "tail" : ": Node", "member" : "net.sansa_stack.inference.rules.plan.Join.joinVar", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#joinVar:org.apache.jena.graph.Node", "kind" : "val"}, {"label" : "tp2", "tail" : ": Triple", "member" : "net.sansa_stack.inference.rules.plan.Join.tp2", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#tp2:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "tp1", "tail" : ": Triple", "member" : "net.sansa_stack.inference.rules.plan.Join.tp1", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#tp1:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/rules\/plan\/Join.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.rules.plan.Plan", "shortDescription" : "An execution plan to process a single rule.", "members_case class" : [{"label" : "objectColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.objectColumn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#objectColumn():String", "kind" : "def"}, {"label" : "predicateColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.predicateColumn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#predicateColumn():String", "kind" : "def"}, {"label" : "subjectColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.subjectColumn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#subjectColumn():String", "kind" : "def"}, {"label" : "table", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.table", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#table():String", "kind" : "def"}, {"label" : "tableName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.tableName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#tableName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "objectColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.objectColumnName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#objectColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "predicateColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.predicateColumnName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#predicateColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "subjectColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.subjectColumnName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#subjectColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "whereParts", "tail" : "(tp: Triple): Set[String]", "member" : "net.sansa_stack.inference.rules.plan.Plan.whereParts", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#whereParts(tp:org.apache.jena.graph.Triple):scala.collection.mutable.Set[String]", "kind" : "def"}, {"label" : "isVarWithName", "tail" : "(node: Node): Boolean", "member" : "net.sansa_stack.inference.rules.plan.Plan.isVarWithName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#isVarWithName(node:org.apache.jena.graph.Node):Boolean", "kind" : "def"}, {"label" : "expressionFor", "tail" : "(variable: Node, tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.expressionFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#expressionFor(variable:org.apache.jena.graph.Node,tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "fromPart", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.fromPart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#fromPart(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "joinExpressionFor", "tail" : "(join: Join): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.joinExpressionFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#joinExpressionFor(join:net.sansa_stack.inference.rules.plan.Join):String", "kind" : "def"}, {"label" : "joinExpressionFor", "tail" : "(tp1: Triple, tp2: Triple, joinVar: Node): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.joinExpressionFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#joinExpressionFor(tp1:org.apache.jena.graph.Triple,tp2:org.apache.jena.graph.Triple,joinVar:org.apache.jena.graph.Node):String", "kind" : "def"}, {"label" : "uniqueAliasFor", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.uniqueAliasFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#uniqueAliasFor(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(tp: Triple, selectedVars: List[Node]): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#projectionPart(tp:org.apache.jena.graph.Triple,selectedVars:List[org.apache.jena.graph.Node]):String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#projectionPart(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "toSQL", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.toSQL", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#toSQL(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "wherePart", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.wherePart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#wherePart():String", "kind" : "def"}, {"label" : "joinsFor", "tail" : "(tp1: Triple, tp2: Triple): Join", "member" : "net.sansa_stack.inference.rules.plan.Plan.joinsFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#joinsFor(tp1:org.apache.jena.graph.Triple,tp2:org.apache.jena.graph.Triple):net.sansa_stack.inference.rules.plan.Join", "kind" : "def"}, {"label" : "fromPart", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.fromPart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#fromPart():String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#projectionPart():String", "kind" : "def"}, {"label" : "toSQL", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.Plan.toSQL", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#toSQL:String", "kind" : "def"}, {"label" : "idx", "tail" : ": Int", "member" : "net.sansa_stack.inference.rules.plan.Plan.idx", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#idx:Int", "kind" : "var"}, {"label" : "aliases", "tail" : ": HashMap[Triple, String]", "member" : "net.sansa_stack.inference.rules.plan.Plan.aliases", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#aliases:scala.collection.mutable.HashMap[org.apache.jena.graph.Triple,String]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.Plan#<init>", "error" : "unsupported entity"}, {"label" : "joins", "tail" : ": Set[Join]", "member" : "net.sansa_stack.inference.rules.plan.Plan.joins", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#joins:scala.collection.mutable.Set[net.sansa_stack.inference.rules.plan.Join]", "kind" : "val"}, {"label" : "target", "tail" : ": Triple", "member" : "net.sansa_stack.inference.rules.plan.Plan.target", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#target:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "triplePatterns", "tail" : ": Set[Triple]", "member" : "net.sansa_stack.inference.rules.plan.Plan.triplePatterns", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#triplePatterns:Set[org.apache.jena.graph.Triple]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/rules\/plan\/Plan.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.rules.plan.PlanGenerator", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html", "members_class" : [{"label" : "generate", "tail" : "(rule: Rule): RelNode", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.generate", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#generate(rule:org.apache.jena.reasoner.rulesys.Rule):org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "planner", "tail" : ": Planner", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.planner", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#planner:org.apache.calcite.tools.Planner", "kind" : "val"}, {"label" : "planner2", "tail" : ": RelOptPlanner", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.planner2", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#planner2:org.apache.calcite.plan.RelOptPlanner", "kind" : "val"}, {"label" : "relBuilder", "tail" : ": RelBuilder", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.relBuilder", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#relBuilder:org.apache.calcite.tools.RelBuilder", "kind" : "val"}, {"label" : "rootSchemas", "tail" : ": Array[SchemaPlus]", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.rootSchemas", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#rootSchemas:Array[org.apache.calcite.schema.SchemaPlus]", "kind" : "val"}, {"label" : "relOptSchemas", "tail" : ": Array[RelOptSchema]", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.relOptSchemas", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#relOptSchemas:Array[org.apache.calcite.plan.RelOptSchema]", "kind" : "val"}, {"label" : "clusters", "tail" : ": Array[RelOptCluster]", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.clusters", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#clusters:Array[org.apache.calcite.plan.RelOptCluster]", "kind" : "val"}, {"label" : "calciteFrameworkConfig", "tail" : ": FrameworkConfig", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.calciteFrameworkConfig", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#calciteFrameworkConfig:org.apache.calcite.tools.FrameworkConfig", "kind" : "val"}, {"label" : "optRuleSet", "tail" : ": RuleSet", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.optRuleSet", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#optRuleSet:org.apache.calcite.tools.RuleSet", "kind" : "val"}, {"label" : "traitDefs", "tail" : ": ImmutableList[RelTraitDef[_ <: RelTrait]]", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.traitDefs", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#traitDefs:com.google.common.collect.ImmutableList[org.apache.calcite.plan.RelTraitDef[_<:org.apache.calcite.plan.RelTrait]]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.PlanGenerator#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.rules.plan.PlanGenerator.main", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/PlanGenerator.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection", "shortDescription" : "", "members_class" : [{"label" : "createPrepareContext", "tail" : "(): Context", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createPrepareContext", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createPrepareContext():org.apache.calcite.jdbc.CalcitePrepare.Context", "kind" : "def"}, {"label" : "executeQuery", "tail" : "(queryable: Queryable[T]): Enumerator[T]", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.executeQuery", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#executeQuery[T](queryable:org.apache.calcite.linq4j.Queryable[T]):org.apache.calcite.linq4j.Enumerator[T]", "kind" : "def"}, {"label" : "execute", "tail" : "(expression: Expression, type: Type): T", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.execute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#execute[T](expression:org.apache.calcite.linq4j.tree.Expression,type:java.lang.reflect.Type):T", "kind" : "def"}, {"label" : "execute", "tail" : "(expression: Expression, aClass: Class[T]): T", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.execute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#execute[T](expression:org.apache.calcite.linq4j.tree.Expression,aClass:Class[T]):T", "kind" : "def"}, {"label" : "createQuery", "tail" : "(expression: Expression, type: Type): Queryable[T]", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createQuery", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createQuery[T](expression:org.apache.calcite.linq4j.tree.Expression,type:java.lang.reflect.Type):org.apache.calcite.linq4j.Queryable[T]", "kind" : "def"}, {"label" : "createQuery", "tail" : "(expression: Expression, aClass: Class[T]): Queryable[T]", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createQuery", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createQuery[T](expression:org.apache.calcite.linq4j.tree.Expression,aClass:Class[T]):org.apache.calcite.linq4j.Queryable[T]", "kind" : "def"}, {"label" : "isWrapperFor", "tail" : "(iface: Class[_]): Boolean", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.isWrapperFor", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#isWrapperFor(iface:Class[_]):Boolean", "kind" : "def"}, {"label" : "unwrap", "tail" : "(iface: Class[T]): T", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.unwrap", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#unwrap[T](iface:Class[T]):T", "kind" : "def"}, {"label" : "commit", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.commit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#commit():Unit", "kind" : "def"}, {"label" : "getWarnings", "tail" : "(): SQLWarning", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getWarnings", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getWarnings():java.sql.SQLWarning", "kind" : "def"}, {"label" : "createStruct", "tail" : "(typeName: String, attributes: Array[AnyRef]): Struct", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createStruct", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createStruct(typeName:String,attributes:Array[AnyRef]):java.sql.Struct", "kind" : "def"}, {"label" : "isClosed", "tail" : "(): Boolean", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.isClosed", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#isClosed():Boolean", "kind" : "def"}, {"label" : "releaseSavepoint", "tail" : "(savepoint: Savepoint): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.releaseSavepoint", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#releaseSavepoint(savepoint:java.sql.Savepoint):Unit", "kind" : "def"}, {"label" : "isValid", "tail" : "(timeout: Int): Boolean", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.isValid", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#isValid(timeout:Int):Boolean", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String, columnNames: Array[String]): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String,columnNames:Array[String]):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String, columnIndexes: Array[Int]): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String,columnIndexes:Array[Int]):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String, autoGeneratedKeys: Int): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String,autoGeneratedKeys:Int):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String,resultSetType:Int,resultSetConcurrency:Int,resultSetHoldability:Int):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String,resultSetType:Int,resultSetConcurrency:Int):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "prepareStatement", "tail" : "(sql: String): PreparedStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareStatement(sql:String):java.sql.PreparedStatement", "kind" : "def"}, {"label" : "getAutoCommit", "tail" : "(): Boolean", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getAutoCommit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getAutoCommit():Boolean", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.close", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#close():Unit", "kind" : "def"}, {"label" : "abort", "tail" : "(executor: Executor): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.abort", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#abort(executor:java.util.concurrent.Executor):Unit", "kind" : "def"}, {"label" : "setCatalog", "tail" : "(catalog: String): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setCatalog", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setCatalog(catalog:String):Unit", "kind" : "def"}, {"label" : "createArrayOf", "tail" : "(typeName: String, elements: Array[AnyRef]): Array", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createArrayOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createArrayOf(typeName:String,elements:Array[AnyRef]):java.sql.Array", "kind" : "def"}, {"label" : "prepareCall", "tail" : "(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareCall(sql:String,resultSetType:Int,resultSetConcurrency:Int,resultSetHoldability:Int):java.sql.CallableStatement", "kind" : "def"}, {"label" : "prepareCall", "tail" : "(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareCall(sql:String,resultSetType:Int,resultSetConcurrency:Int):java.sql.CallableStatement", "kind" : "def"}, {"label" : "prepareCall", "tail" : "(sql: String): CallableStatement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.prepareCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#prepareCall(sql:String):java.sql.CallableStatement", "kind" : "def"}, {"label" : "nativeSQL", "tail" : "(sql: String): String", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.nativeSQL", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#nativeSQL(sql:String):String", "kind" : "def"}, {"label" : "setTransactionIsolation", "tail" : "(level: Int): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setTransactionIsolation", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setTransactionIsolation(level:Int):Unit", "kind" : "def"}, {"label" : "createClob", "tail" : "(): Clob", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createClob", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createClob():java.sql.Clob", "kind" : "def"}, {"label" : "getCatalog", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getCatalog", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getCatalog():String", "kind" : "def"}, {"label" : "setTypeMap", "tail" : "(map: Map[String, Class[_]]): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setTypeMap", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setTypeMap(map:java.util.Map[String,Class[_]]):Unit", "kind" : "def"}, {"label" : "isReadOnly", "tail" : "(): Boolean", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.isReadOnly", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#isReadOnly():Boolean", "kind" : "def"}, {"label" : "setClientInfo", "tail" : "(properties: Properties): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setClientInfo", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setClientInfo(properties:java.util.Properties):Unit", "kind" : "def"}, {"label" : "setClientInfo", "tail" : "(name: String, value: String): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setClientInfo", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setClientInfo(name:String,value:String):Unit", "kind" : "def"}, {"label" : "setReadOnly", "tail" : "(readOnly: Boolean): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setReadOnly", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setReadOnly(readOnly:Boolean):Unit", "kind" : "def"}, {"label" : "getHoldability", "tail" : "(): Int", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getHoldability", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getHoldability():Int", "kind" : "def"}, {"label" : "createStatement", "tail" : "(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createStatement(resultSetType:Int,resultSetConcurrency:Int,resultSetHoldability:Int):java.sql.Statement", "kind" : "def"}, {"label" : "createStatement", "tail" : "(resultSetType: Int, resultSetConcurrency: Int): Statement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createStatement(resultSetType:Int,resultSetConcurrency:Int):java.sql.Statement", "kind" : "def"}, {"label" : "createStatement", "tail" : "(): Statement", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createStatement", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createStatement():java.sql.Statement", "kind" : "def"}, {"label" : "rollback", "tail" : "(savepoint: Savepoint): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.rollback", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#rollback(savepoint:java.sql.Savepoint):Unit", "kind" : "def"}, {"label" : "rollback", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.rollback", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#rollback():Unit", "kind" : "def"}, {"label" : "getTypeMap", "tail" : "(): Map[String, Class[_]]", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getTypeMap", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getTypeMap():java.util.Map[String,Class[_]]", "kind" : "def"}, {"label" : "getMetaData", "tail" : "(): DatabaseMetaData", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getMetaData", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getMetaData():java.sql.DatabaseMetaData", "kind" : "def"}, {"label" : "setNetworkTimeout", "tail" : "(executor: Executor, milliseconds: Int): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setNetworkTimeout", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setNetworkTimeout(executor:java.util.concurrent.Executor,milliseconds:Int):Unit", "kind" : "def"}, {"label" : "getClientInfo", "tail" : "(): Properties", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getClientInfo", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getClientInfo():java.util.Properties", "kind" : "def"}, {"label" : "getClientInfo", "tail" : "(name: String): String", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getClientInfo", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getClientInfo(name:String):String", "kind" : "def"}, {"label" : "createNClob", "tail" : "(): NClob", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createNClob", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createNClob():java.sql.NClob", "kind" : "def"}, {"label" : "getTransactionIsolation", "tail" : "(): Int", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getTransactionIsolation", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getTransactionIsolation():Int", "kind" : "def"}, {"label" : "setSavepoint", "tail" : "(name: String): Savepoint", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setSavepoint", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setSavepoint(name:String):java.sql.Savepoint", "kind" : "def"}, {"label" : "setSavepoint", "tail" : "(): Savepoint", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setSavepoint", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setSavepoint():java.sql.Savepoint", "kind" : "def"}, {"label" : "createSQLXML", "tail" : "(): SQLXML", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createSQLXML", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createSQLXML():java.sql.SQLXML", "kind" : "def"}, {"label" : "createBlob", "tail" : "(): Blob", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.createBlob", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#createBlob():java.sql.Blob", "kind" : "def"}, {"label" : "getNetworkTimeout", "tail" : "(): Int", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getNetworkTimeout", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getNetworkTimeout():Int", "kind" : "def"}, {"label" : "clearWarnings", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.clearWarnings", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#clearWarnings():Unit", "kind" : "def"}, {"label" : "setHoldability", "tail" : "(holdability: Int): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setHoldability", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setHoldability(holdability:Int):Unit", "kind" : "def"}, {"label" : "setAutoCommit", "tail" : "(autoCommit: Boolean): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setAutoCommit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setAutoCommit(autoCommit:Boolean):Unit", "kind" : "def"}, {"label" : "setSchema", "tail" : "(s: String): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.setSchema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#setSchema(s:String):Unit", "kind" : "def"}, {"label" : "getProperties", "tail" : "(): Properties", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getProperties", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getProperties():java.util.Properties", "kind" : "def"}, {"label" : "getRootSchema", "tail" : "(): SchemaPlus", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getRootSchema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getRootSchema():org.apache.calcite.schema.SchemaPlus", "kind" : "def"}, {"label" : "getTypeFactory", "tail" : "(): JavaTypeFactory", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getTypeFactory", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getTypeFactory():org.apache.calcite.adapter.java.JavaTypeFactory", "kind" : "def"}, {"label" : "getSchema", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.getSchema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getSchema():String", "kind" : "def"}, {"label" : "config", "tail" : "(): CalciteConnectionConfig", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.config", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#config():org.apache.calcite.config.CalciteConnectionConfig", "kind" : "def"}, {"label" : "schema", "tail" : ": String", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.schema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#schema:String", "kind" : "var"}, {"label" : "rootSchema", "tail" : ": SchemaPlus", "member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection.rootSchema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#rootSchema:org.apache.calcite.schema.SchemaPlus", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.SimpleCalciteConnection#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleCalciteConnection.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SimplePlanExecutor", "shortDescription" : "", "members_class" : [{"label" : "execute", "tail" : "(plan: RelNode): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanExecutor.execute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#execute(plan:org.apache.calcite.rel.RelNode):Unit", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.plan.SimplePlanExecutor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanExecutor.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html", "members_class" : [{"label" : "generateLogicalPlan", "tail" : "(rules: Seq[Rule]): RelNode", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.generateLogicalPlan", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#generateLogicalPlan(rules:Seq[org.apache.jena.reasoner.rulesys.Rule]):org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "generateLogicalPlan", "tail" : "(rule: Rule, optimized: Boolean): RelNode", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.generateLogicalPlan", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#generateLogicalPlan(rule:org.apache.jena.reasoner.rulesys.Rule,optimized:Boolean):org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "sqlGenerator", "tail" : ": SimpleSQLGenerator", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.sqlGenerator", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#sqlGenerator:net.sansa_stack.inference.rules.plan.SimpleSQLGenerator", "kind" : "val"}, {"label" : "planner", "tail" : ": Planner", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.planner", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#planner:org.apache.calcite.tools.Planner", "kind" : "lazy val"}, {"label" : "calciteFrameworkConfig", "tail" : ": FrameworkConfig", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.calciteFrameworkConfig", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#calciteFrameworkConfig:org.apache.calcite.tools.FrameworkConfig", "kind" : "val"}, {"label" : "optRuleSet", "tail" : ": RuleSet", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.optRuleSet", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#optRuleSet:org.apache.calcite.tools.RuleSet", "kind" : "val"}, {"label" : "traitDefs", "tail" : ": List[RelTraitDef[_ <: RelTrait]]", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.traitDefs", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#traitDefs:List[org.apache.calcite.plan.RelTraitDef[_<:org.apache.calcite.plan.RelTrait]]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.rules.plan.SimplePlanGenerator.main", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SimplePlanGenerator.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html", "members_class" : [{"label" : "getCluster", "tail" : "(): RelOptCluster", "member" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder.getCluster", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#getCluster:org.apache.calcite.plan.RelOptCluster", "kind" : "def"}, {"label" : "getPlanner", "tail" : "(): RelOptPlanner", "member" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder.getPlanner", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#getPlanner:org.apache.calcite.plan.RelOptPlanner", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder#<init>", "error" : "unsupported entity"}, {"label" : "clear", "tail" : "(): Unit", "member" : "org.apache.calcite.tools.RelBuilder.clear", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#clear():Unit", "kind" : "def"}, {"label" : "match", "tail" : "(arg0: RexNode, arg1: Boolean, arg2: Boolean, arg3: Map[String, RexNode], arg4: Iterable[_ <: RexNode], arg5: RexNode, arg6: Map[String, _ <: SortedSet[String]], arg7: Boolean, arg8: Iterable[_ <: RexNode], arg9: Iterable[_ <: RexNode], arg10: RexNode): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.match", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#match(x$1:org.apache.calcite.rex.RexNode,x$2:Boolean,x$3:Boolean,x$4:java.util.Map[String,org.apache.calcite.rex.RexNode],x$5:Iterable[_<:org.apache.calcite.rex.RexNode],x$6:org.apache.calcite.rex.RexNode,x$7:java.util.Map[String,_<:java.util.SortedSet[String]],x$8:Boolean,x$9:Iterable[_<:org.apache.calcite.rex.RexNode],x$10:Iterable[_<:org.apache.calcite.rex.RexNode],x$11:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "aggregate", "tail" : "(arg0: GroupKey, arg1: List[AggregateCall]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.aggregate", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregate(x$1:org.apache.calcite.tools.RelBuilder.GroupKey,x$2:java.util.List[org.apache.calcite.rel.core.AggregateCall]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "permute", "tail" : "(arg0: Mapping): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.permute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#permute(x$1:org.apache.calcite.util.mapping.Mapping):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "convert", "tail" : "(arg0: RelDataType, arg1: Boolean): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.convert", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#convert(x$1:org.apache.calcite.rel.type.RelDataType,x$2:Boolean):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "sortLimit", "tail" : "(arg0: Int, arg1: Int, arg2: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.sortLimit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sortLimit(x$1:Int,x$2:Int,x$3:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "sortLimit", "tail" : "(arg0: Int, arg1: Int, arg2: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.sortLimit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sortLimit(x$1:Int,x$2:Int,x$3:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "sort", "tail" : "(arg0: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.sort", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sort(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "sort", "tail" : "(arg0: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.sort", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sort(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "sort", "tail" : "(arg0: <repeated...>[Int]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.sort", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sort(x$1:Int*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "limit", "tail" : "(arg0: Int, arg1: Int): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.limit", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#limit(x$1:Int,x$2:Int):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "values", "tail" : "(arg0: RelDataType): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.values", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#values(x$1:org.apache.calcite.rel.type.RelDataType):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "values", "tail" : "(arg0: Iterable[_ <: List[RexLiteral]], arg1: RelDataType): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.values", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#values(x$1:Iterable[_<:java.util.List[org.apache.calcite.rex.RexLiteral]],x$2:org.apache.calcite.rel.type.RelDataType):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "values", "tail" : "(arg0: RelDataType, arg1: <repeated...>[AnyRef]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.values", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#values(x$1:org.apache.calcite.rel.type.RelDataType,x$2:Object*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "empty", "tail" : "(): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.empty", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#empty():org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "values", "tail" : "(arg0: Array[String], arg1: <repeated...>[AnyRef]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.values", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#values(x$1:Array[String],x$2:Object*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "as", "tail" : "(arg0: String): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.as", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#as(x$1:String):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "semiJoin", "tail" : "(arg0: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.semiJoin", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#semiJoin(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "semiJoin", "tail" : "(arg0: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.semiJoin", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#semiJoin(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "join", "tail" : "(arg0: JoinRelType, arg1: <repeated...>[String]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.join", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#join(x$1:org.apache.calcite.rel.core.JoinRelType,x$2:String*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "join", "tail" : "(arg0: JoinRelType, arg1: RexNode, arg2: Set[CorrelationId]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.join", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#join(x$1:org.apache.calcite.rel.core.JoinRelType,x$2:org.apache.calcite.rex.RexNode,x$3:java.util.Set[org.apache.calcite.rel.core.CorrelationId]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "join", "tail" : "(arg0: JoinRelType, arg1: RexNode): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.join", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#join(x$1:org.apache.calcite.rel.core.JoinRelType,x$2:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "join", "tail" : "(arg0: JoinRelType, arg1: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.join", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#join(x$1:org.apache.calcite.rel.core.JoinRelType,x$2:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "join", "tail" : "(arg0: JoinRelType, arg1: RexNode, arg2: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.join", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#join(x$1:org.apache.calcite.rel.core.JoinRelType,x$2:org.apache.calcite.rex.RexNode,x$3:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "minus", "tail" : "(arg0: Boolean, arg1: Int): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.minus", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#minus(x$1:Boolean,x$2:Int):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "minus", "tail" : "(arg0: Boolean): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.minus", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#minus(x$1:Boolean):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "intersect", "tail" : "(arg0: Boolean, arg1: Int): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.intersect", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#intersect(x$1:Boolean,x$2:Int):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "intersect", "tail" : "(arg0: Boolean): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.intersect", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#intersect(x$1:Boolean):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "union", "tail" : "(arg0: Boolean, arg1: Int): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.union", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#union(x$1:Boolean,x$2:Int):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "union", "tail" : "(arg0: Boolean): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.union", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#union(x$1:Boolean):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "aggregate", "tail" : "(arg0: GroupKey, arg1: Iterable[AggCall]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.aggregate", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregate(x$1:org.apache.calcite.tools.RelBuilder.GroupKey,x$2:Iterable[org.apache.calcite.tools.RelBuilder.AggCall]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "aggregate", "tail" : "(arg0: GroupKey, arg1: <repeated...>[AggCall]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.aggregate", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregate(x$1:org.apache.calcite.tools.RelBuilder.GroupKey,x$2:org.apache.calcite.tools.RelBuilder.AggCall*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.distinct", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#distinct():org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "rename", "tail" : "(arg0: List[String]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.rename", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#rename(x$1:java.util.List[String]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.project", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#project(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Iterable[_ <: RexNode], arg1: Iterable[String], arg2: Boolean): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.project", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#project(x$1:Iterable[_<:org.apache.calcite.rex.RexNode],x$2:Iterable[String],x$3:Boolean):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Iterable[_ <: RexNode], arg1: Iterable[String]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.project", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#project(x$1:Iterable[_<:org.apache.calcite.rex.RexNode],x$2:Iterable[String]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.project", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#project(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "filter", "tail" : "(arg0: Iterable[_ <: RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.filter", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#filter(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "filter", "tail" : "(arg0: <repeated...>[RexNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.filter", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#filter(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "scan", "tail" : "(arg0: <repeated...>[String]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.scan", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#scan(x$1:String*):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "scan", "tail" : "(arg0: Iterable[String]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.scan", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#scan(x$1:Iterable[String]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "patternExclude", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternExclude", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternExclude(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternPermute", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternPermute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternPermute(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternPermute", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternPermute", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternPermute(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternQuantify", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternQuantify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternQuantify(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternQuantify", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternQuantify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternQuantify(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternAlter", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternAlter", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternAlter(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternAlter", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternAlter", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternAlter(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternConcat", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternConcat", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternConcat(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternConcat", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternConcat", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternConcat(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "patternField", "tail" : "(arg0: String, arg1: RelDataType, arg2: Int): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.patternField", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#patternField(x$1:String,x$2:org.apache.calcite.rel.type.RelDataType,x$3:Int):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "max", "tail" : "(arg0: String, arg1: RexNode): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.max", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#max(x$1:String,x$2:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "min", "tail" : "(arg0: String, arg1: RexNode): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.min", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#min(x$1:String,x$2:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "avg", "tail" : "(arg0: Boolean, arg1: String, arg2: RexNode): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.avg", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#avg(x$1:Boolean,x$2:String,x$3:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "sum", "tail" : "(arg0: Boolean, arg1: String, arg2: RexNode): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.sum", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#sum(x$1:Boolean,x$2:String,x$3:org.apache.calcite.rex.RexNode):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "countStar", "tail" : "(arg0: String): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.countStar", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#countStar(x$1:String):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "count", "tail" : "(arg0: Boolean, arg1: String, arg2: <repeated...>[RexNode]): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.count", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#count(x$1:Boolean,x$2:String,x$3:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "aggregateCall", "tail" : "(arg0: SqlAggFunction, arg1: Boolean, arg2: Boolean, arg3: RexNode, arg4: String, arg5: Iterable[_ <: RexNode]): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.aggregateCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregateCall(x$1:org.apache.calcite.sql.SqlAggFunction,x$2:Boolean,x$3:Boolean,x$4:org.apache.calcite.rex.RexNode,x$5:String,x$6:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "aggregateCall", "tail" : "(arg0: SqlAggFunction, arg1: Boolean, arg2: RexNode, arg3: String, arg4: Iterable[_ <: RexNode]): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.aggregateCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregateCall(x$1:org.apache.calcite.sql.SqlAggFunction,x$2:Boolean,x$3:org.apache.calcite.rex.RexNode,x$4:String,x$5:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "aggregateCall", "tail" : "(arg0: SqlAggFunction, arg1: Boolean, arg2: Boolean, arg3: RexNode, arg4: String, arg5: <repeated...>[RexNode]): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.aggregateCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregateCall(x$1:org.apache.calcite.sql.SqlAggFunction,x$2:Boolean,x$3:Boolean,x$4:org.apache.calcite.rex.RexNode,x$5:String,x$6:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "aggregateCall", "tail" : "(arg0: SqlAggFunction, arg1: Boolean, arg2: RexNode, arg3: String, arg4: <repeated...>[RexNode]): AggCall", "member" : "org.apache.calcite.tools.RelBuilder.aggregateCall", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#aggregateCall(x$1:org.apache.calcite.sql.SqlAggFunction,x$2:Boolean,x$3:org.apache.calcite.rex.RexNode,x$4:String,x$5:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder.AggCall", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: ImmutableBitSet, arg1: Boolean, arg2: ImmutableList[ImmutableBitSet]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:org.apache.calcite.util.ImmutableBitSet,x$2:Boolean,x$3:com.google.common.collect.ImmutableList[org.apache.calcite.util.ImmutableBitSet]):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: ImmutableBitSet, arg1: ImmutableList[ImmutableBitSet]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:org.apache.calcite.util.ImmutableBitSet,x$2:com.google.common.collect.ImmutableList[org.apache.calcite.util.ImmutableBitSet]):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: <repeated...>[String]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:String*):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: <repeated...>[Int]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:Int*):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: Iterable[_ <: RexNode], arg1: Boolean, arg2: Iterable[_ <: Iterable[_ <: RexNode]]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:Iterable[_<:org.apache.calcite.rex.RexNode],x$2:Boolean,x$3:Iterable[_<:Iterable[_<:org.apache.calcite.rex.RexNode]]):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: Iterable[_ <: RexNode]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(arg0: <repeated...>[RexNode]): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "groupKey", "tail" : "(): GroupKey", "member" : "org.apache.calcite.tools.RelBuilder.groupKey", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#groupKey():org.apache.calcite.tools.RelBuilder.GroupKey", "kind" : "def"}, {"label" : "nullsFirst", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.nullsFirst", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#nullsFirst(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "nullsLast", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.nullsLast", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#nullsLast(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "desc", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.desc", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#desc(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "alias", "tail" : "(arg0: RexNode, arg1: String): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.alias", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#alias(x$1:org.apache.calcite.rex.RexNode,x$2:String):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "cast", "tail" : "(arg0: RexNode, arg1: SqlTypeName, arg2: Int, arg3: Int): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.cast", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#cast(x$1:org.apache.calcite.rex.RexNode,x$2:org.apache.calcite.sql.type.SqlTypeName,x$3:Int,x$4:Int):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "cast", "tail" : "(arg0: RexNode, arg1: SqlTypeName, arg2: Int): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.cast", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#cast(x$1:org.apache.calcite.rex.RexNode,x$2:org.apache.calcite.sql.type.SqlTypeName,x$3:Int):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "cast", "tail" : "(arg0: RexNode, arg1: SqlTypeName): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.cast", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#cast(x$1:org.apache.calcite.rex.RexNode,x$2:org.apache.calcite.sql.type.SqlTypeName):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.isNotNull", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#isNotNull(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "isNull", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.isNull", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#isNull(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "notEquals", "tail" : "(arg0: RexNode, arg1: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.notEquals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#notEquals(x$1:org.apache.calcite.rex.RexNode,x$2:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: RexNode, arg1: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#equals(x$1:org.apache.calcite.rex.RexNode,x$2:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "not", "tail" : "(arg0: RexNode): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.not", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#not(x$1:org.apache.calcite.rex.RexNode):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "or", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.or", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#or(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "or", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.or", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#or(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "and", "tail" : "(arg0: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.and", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#and(x$1:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "and", "tail" : "(arg0: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.and", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#and(x$1:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "call", "tail" : "(arg0: SqlOperator, arg1: Iterable[_ <: RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.call", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#call(x$1:org.apache.calcite.sql.SqlOperator,x$2:Iterable[_<:org.apache.calcite.rex.RexNode]):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "call", "tail" : "(arg0: SqlOperator, arg1: <repeated...>[RexNode]): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.call", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#call(x$1:org.apache.calcite.sql.SqlOperator,x$2:org.apache.calcite.rex.RexNode*):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "dot", "tail" : "(arg0: RexNode, arg1: Int): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.dot", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#dot(x$1:org.apache.calcite.rex.RexNode,x$2:Int):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "dot", "tail" : "(arg0: RexNode, arg1: String): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.dot", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#dot(x$1:org.apache.calcite.rex.RexNode,x$2:String):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "fields", "tail" : "(arg0: TargetMapping): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields(x$1:org.apache.calcite.util.mapping.Mappings.TargetMapping):com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "fields", "tail" : "(arg0: Iterable[String]): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields(x$1:Iterable[String]):com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "fields", "tail" : "(arg0: List[_ <: Number]): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields(x$1:java.util.List[_<:Number]):com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "fields", "tail" : "(arg0: RelCollation): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields(x$1:org.apache.calcite.rel.RelCollation):com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "fields", "tail" : "(arg0: Int, arg1: Int): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields(x$1:Int,x$2:Int):com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "fields", "tail" : "(): ImmutableList[RexNode]", "member" : "org.apache.calcite.tools.RelBuilder.fields", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#fields():com.google.common.collect.ImmutableList[org.apache.calcite.rex.RexNode]", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: RexNode, arg1: String): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:org.apache.calcite.rex.RexNode,x$2:String):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: Int, arg1: String, arg2: String): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:Int,x$2:String,x$3:String):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: String, arg1: String): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:String,x$2:String):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: Int, arg1: Int, arg2: Int): RexInputRef", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:Int,x$2:Int,x$3:Int):org.apache.calcite.rex.RexInputRef", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: Int): RexInputRef", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:Int):org.apache.calcite.rex.RexInputRef", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: Int, arg1: Int, arg2: String): RexInputRef", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:Int,x$2:Int,x$3:String):org.apache.calcite.rex.RexInputRef", "kind" : "def"}, {"label" : "field", "tail" : "(arg0: String): RexInputRef", "member" : "org.apache.calcite.tools.RelBuilder.field", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#field(x$1:String):org.apache.calcite.rex.RexInputRef", "kind" : "def"}, {"label" : "variable", "tail" : "(arg0: Holder[RexCorrelVariable]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.variable", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#variable(x$1:org.apache.calcite.util.Holder[org.apache.calcite.rex.RexCorrelVariable]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "literal", "tail" : "(arg0: Any): RexNode", "member" : "org.apache.calcite.tools.RelBuilder.literal", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#literal(x$1:Any):org.apache.calcite.rex.RexNode", "kind" : "def"}, {"label" : "peek", "tail" : "(arg0: Int, arg1: Int): RelNode", "member" : "org.apache.calcite.tools.RelBuilder.peek", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#peek(x$1:Int,x$2:Int):org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "peek", "tail" : "(arg0: Int): RelNode", "member" : "org.apache.calcite.tools.RelBuilder.peek", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#peek(x$1:Int):org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "peek", "tail" : "(): RelNode", "member" : "org.apache.calcite.tools.RelBuilder.peek", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#peek():org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "build", "tail" : "(): RelNode", "member" : "org.apache.calcite.tools.RelBuilder.build", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#build():org.apache.calcite.rel.RelNode", "kind" : "def"}, {"label" : "pushAll", "tail" : "(arg0: Iterable[_ <: RelNode]): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.pushAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#pushAll(x$1:Iterable[_<:org.apache.calcite.rel.RelNode]):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "push", "tail" : "(arg0: RelNode): RelBuilder", "member" : "org.apache.calcite.tools.RelBuilder.push", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#push(x$1:org.apache.calcite.rel.RelNode):org.apache.calcite.tools.RelBuilder", "kind" : "def"}, {"label" : "getRexBuilder", "tail" : "(): RexBuilder", "member" : "org.apache.calcite.tools.RelBuilder.getRexBuilder", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#getRexBuilder():org.apache.calcite.rex.RexBuilder", "kind" : "def"}, {"label" : "getTypeFactory", "tail" : "(): RelDataTypeFactory", "member" : "org.apache.calcite.tools.RelBuilder.getTypeFactory", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#getTypeFactory():org.apache.calcite.rel.type.RelDataTypeFactory", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "connectionConfig", "tail" : "(parserConfig: Config): CalciteConnectionConfig", "member" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder.connectionConfig", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#connectionConfig(parserConfig:org.apache.calcite.sql.parser.SqlParser.Config):org.apache.calcite.config.CalciteConnectionConfig", "kind" : "def"}, {"label" : "create", "tail" : "(config: FrameworkConfig): SimpleRelBuilder", "member" : "net.sansa_stack.inference.rules.plan.SimpleRelBuilder.create", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#create(config:org.apache.calcite.tools.FrameworkConfig):net.sansa_stack.inference.rules.plan.SimpleRelBuilder", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleRelBuilder.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator", "shortDescription" : "A simple implementation of a SQL generator:Joins are generated for common triple patterns in the body.", "members_class" : [{"label" : "generateSQLQuery", "tail" : "(rule: Rule): String", "member" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator.generateSQLQuery", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#generateSQLQuery(rule:org.apache.jena.reasoner.rulesys.Rule):String", "kind" : "def"}, {"label" : "idx", "tail" : ": Int", "member" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator.idx", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#idx:Int", "kind" : "var"}, {"label" : "aliases", "tail" : ": HashMap[Triple, String]", "member" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator.aliases", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#aliases:scala.collection.mutable.HashMap[org.apache.jena.graph.Triple,String]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator#<init>", "error" : "unsupported entity"}, {"label" : "sqlSchema", "tail" : ": SQLSchema", "member" : "net.sansa_stack.inference.rules.plan.SimpleSQLGenerator.sqlSchema", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#sqlSchema:net.sansa_stack.inference.data.SQLSchema", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SimpleSQLGenerator.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.SQLGenerator", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "generateSQLQuery", "tail" : "(rule: Rule): String", "member" : "net.sansa_stack.inference.rules.plan.SQLGenerator.generateSQLQuery", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html#generateSQLQuery(rule:org.apache.jena.reasoner.rulesys.Rule):String", "kind" : "abstract def"}], "shortDescription" : "A SQL generator for rules.", "trait" : "net\/sansa_stack\/inference\/rules\/plan\/SQLGenerator.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.rules.plan.SQLQuery", "shortDescription" : "", "members_class" : [{"label" : "select", "tail" : "(variable: Node): Unit", "member" : "net.sansa_stack.inference.rules.plan.SQLQuery.select", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#select(variable:org.apache.jena.graph.Node):Unit", "kind" : "def"}, {"label" : "selectableVariables", "tail" : "(): List[Node]", "member" : "net.sansa_stack.inference.rules.plan.SQLQuery.selectableVariables", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#selectableVariables:List[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "selectedVars", "tail" : ": Set[Node]", "member" : "net.sansa_stack.inference.rules.plan.SQLQuery.selectedVars", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#selectedVars:scala.collection.mutable.Set[org.apache.jena.graph.Node]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.plan.SQLQuery#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/SQLQuery.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.plan.TriplesSchema", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html", "members_object" : [{"label" : "get", "tail" : "(): SchemaPlus", "member" : "net.sansa_stack.inference.rules.plan.TriplesSchema.get", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#get():org.apache.calcite.schema.SchemaPlus", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesSchema$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.plan.TriplesTableFactory", "shortDescription" : "", "members_class" : [{"label" : "TriplesTable", "tail" : "", "member" : "net.sansa_stack.inference.rules.plan.TriplesTableFactory.TriplesTable", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#TriplesTableextendsScannableTablewithFilterableTablewithProjectableFilterableTable", "kind" : "class"}, {"label" : "create", "tail" : "(schema: SchemaPlus, name: String, operand: Map[String, AnyRef], rowType: RelDataType): Table", "member" : "net.sansa_stack.inference.rules.plan.TriplesTableFactory.create", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#create(schema:org.apache.calcite.schema.SchemaPlus,name:String,operand:java.util.Map[String,AnyRef],rowType:org.apache.calcite.rel.type.RelDataType):org.apache.calcite.schema.Table", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.plan.TriplesTableFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/plan\/TriplesTableFactory.html", "kind" : "class"}], "net.sansa_stack.inference.rules.minimizer" : [{"name" : "net.sansa_stack.inference.rules.minimizer.DefaultRuleDependencyGraphMinimizer", "shortDescription" : "", "members_class" : [{"label" : "RemoveEdgeIfLongerPathToSameNodeExists", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgeIfLongerPathToSameNodeExists", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgeIfLongerPathToSameNodeExists", "kind" : "object"}, {"label" : "RemoveCyclesInBothDirections", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveCyclesInBothDirections", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveCyclesInBothDirections", "kind" : "object"}, {"label" : "RemoveEdgesWithCycleOverTCNode", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgesWithCycleOverTCNode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgesWithCycleOverTCNode", "kind" : "object"}, {"label" : "RemoveEdgesWithPredicateAlreadyTC", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgesWithPredicateAlreadyTC", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgesWithPredicateAlreadyTC", "kind" : "object"}, {"label" : "RemoveCyclesIfPredicateIsTC", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveCyclesIfPredicateIsTC", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveCyclesIfPredicateIsTC", "kind" : "object"}, {"label" : "RemoveLoops", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveLoops", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveLoops", "kind" : "object"}, {"label" : "Batch", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Batch", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#BatchextendsProductwithSerializable", "kind" : "case class"}, {"label" : "FixedPoint", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.FixedPoint", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#FixedPointextendsMinimizationRuleExecutor.this.StrategywithProductwithSerializable", "kind" : "case class"}, {"label" : "Once", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Once", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#Once", "kind" : "object"}, {"label" : "Strategy", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Strategy", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#StrategyextendsAnyRef", "kind" : "abstract class"}, {"member" : "net.sansa_stack.inference.rules.minimizer.DefaultRuleDependencyGraphMinimizer#<init>", "error" : "unsupported entity"}, {"label" : "batches", "tail" : "(): Seq[Batch]", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.batches", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#batches:Seq[RuleDependencyGraphMinimizer.this.Batch]", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.execute", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#execute(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/minimizer\/DefaultRuleDependencyGraphMinimizer.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.minimizer.MinimizationRule", "shortDescription" : "A minimization rule.", "members_class" : [{"label" : "ruleName", "tail" : ": String", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRule.ruleName", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#ruleName:String", "kind" : "val"}, {"member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRule#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRule.apply", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html#apply(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRule.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html", "members_class" : [{"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.execute", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#execute(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "Batch", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Batch", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#BatchextendsProductwithSerializable", "kind" : "case class"}, {"label" : "FixedPoint", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.FixedPoint", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#FixedPointextendsMinimizationRuleExecutor.this.StrategywithProductwithSerializable", "kind" : "case class"}, {"label" : "Once", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Once", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#Once", "kind" : "object"}, {"label" : "Strategy", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Strategy", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#StrategyextendsAnyRef", "kind" : "abstract class"}, {"member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "batches", "tail" : "(): Seq[Batch]", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.batches", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#batches:Seq[MinimizationRuleExecutor.this.Batch]", "kind" : "abstract def"}], "members_object" : [{"label" : "dumpTimeSpent", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.dumpTimeSpent", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#dumpTimeSpent():String", "kind" : "def"}, {"label" : "resetTime", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.resetTime", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#resetTime():Unit", "kind" : "def"}, {"label" : "timeMap", "tail" : ": AtomicLongMap[String]", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.timeMap", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#timeMap:com.google.common.util.concurrent.AtomicLongMap[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html", "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer", "shortDescription" : "", "members_class" : [{"label" : "Batch", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Batch", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#BatchextendsProductwithSerializable", "kind" : "case class"}, {"label" : "FixedPoint", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.FixedPoint", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#FixedPointextendsMinimizationRuleExecutor.this.StrategywithProductwithSerializable", "kind" : "case class"}, {"label" : "Once", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Once", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#Once", "kind" : "object"}, {"label" : "Strategy", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.Strategy", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/MinimizationRuleExecutor.html#StrategyextendsAnyRef", "kind" : "abstract class"}, {"label" : "RemoveEdgeIfLongerPathToSameNodeExists", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgeIfLongerPathToSameNodeExists", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgeIfLongerPathToSameNodeExists", "kind" : "object"}, {"label" : "RemoveCyclesInBothDirections", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveCyclesInBothDirections", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveCyclesInBothDirections", "kind" : "object"}, {"label" : "RemoveEdgesWithCycleOverTCNode", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgesWithCycleOverTCNode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgesWithCycleOverTCNode", "kind" : "object"}, {"label" : "RemoveEdgesWithPredicateAlreadyTC", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveEdgesWithPredicateAlreadyTC", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveEdgesWithPredicateAlreadyTC", "kind" : "object"}, {"label" : "RemoveCyclesIfPredicateIsTC", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveCyclesIfPredicateIsTC", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveCyclesIfPredicateIsTC", "kind" : "object"}, {"label" : "RemoveLoops", "tail" : "", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.RemoveLoops", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#RemoveLoops", "kind" : "object"}, {"label" : "batches", "tail" : "(): Seq[Batch]", "member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer.batches", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#batches:Seq[RuleDependencyGraphMinimizer.this.Batch]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.minimizer.RuleDependencyGraphMinimizer#<init>", "error" : "unsupported entity"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.minimizer.MinimizationRuleExecutor.execute", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#execute(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/minimizer\/RuleDependencyGraphMinimizer.html", "kind" : "class"}], "net.sansa_stack.inference.rules" : [{"name" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraph", "shortDescription" : "Given a rule dependency graph (RDG), a high-level rule dependency graph (HLRDG) is a directed acyclic graph G =(V, E)such that", "members_class" : [{"label" : "NodeBase", "tail" : "", "member" : "scalax.collection.immutable.DefaultGraphImpl.NodeBase", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeBaseextendsDefaultGraphImpl.this.InnerNodeImplwithDefaultGraphImpl.this.InnerNodeTraversalImpl", "kind" : "final class"}, {"label" : "MultiEdgeLazyCycle", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MultiEdgeLazyCycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#MultiEdgeLazyCycleextendsGraphTraversalImpl.this.MultiEdgeLazyPathwithGraphTraversalImpl.this.Cycle", "kind" : "class"}, {"label" : "AnyEdgeLazyCycle", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.AnyEdgeLazyCycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#AnyEdgeLazyCycleextendsGraphTraversalImpl.this.AnyEdgeLazyPathwithGraphTraversalImpl.this.Cycle", "kind" : "class"}, {"label" : "MultiEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MultiEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#MultiEdgeLazyPathextendsGraphTraversalImpl.this.LazyPath", "kind" : "class"}, {"label" : "MinWeightEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MinWeightEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#MinWeightEdgeLazyPathextendsGraphTraversalImpl.this.SimpleLazyPath", "kind" : "class"}, {"label" : "AnyEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.AnyEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#AnyEdgeLazyPathextendsGraphTraversalImpl.this.SimpleLazyPath", "kind" : "class"}, {"label" : "SimpleLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.SimpleLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#SimpleLazyPathextendsGraphTraversalImpl.this.LazyPath", "kind" : "abstract class"}, {"label" : "LazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.LazyPath", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#LazyPathextendsGraphTraversalImpl.this.Path", "kind" : "abstract class"}, {"label" : "MapPathTraversable", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MapPathTraversable", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#MapPathTraversable[T<:<?>]extendsTraversable[T]", "kind" : "final class"}, {"label" : "ReverseStackTraversable", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.ReverseStackTraversable", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ReverseStackTraversable[S<:<?>]extendsTraversable[GraphTraversalImpl.this.NodeT]", "kind" : "final class"}, {"label" : "OuterNodeDownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#OuterNodeDownUpTraverserextendsGraphTraversalImpl.this.OuterNodeDownUpTraverserwithGraphTraversalImpl.this.DownUpTraverser[(Boolean,N),GraphTraversalImpl.this.OuterNodeDownUpTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerNodeDownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeDownUpTraverserextendsGraphTraversalImpl.this.InnerNodeDownUpTraverserwithGraphTraversalImpl.this.DownUpTraverser[(Boolean,GraphTraversalImpl.this.NodeT),GraphTraversalImpl.this.InnerNodeDownUpTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "DownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.DownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#DownUpTraverser[A<:<?>,+This<:<?>]extendsGraphTraversalImpl.this.TraverserMethods[A,This]withGraphTraversalImpl.this.Impl[A,This]", "kind" : "trait"}, {"label" : "OuterElemTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#OuterElemTraverserextendsGraphTraversalImpl.this.TraverserMethods[scalax.collection.GraphPredef.OuterElem[N,E],GraphTraversalImpl.this.OuterElemTraverser]withGraphTraversalImpl.this.OuterElemTraverserwithGraphTraversalImpl.this.Impl[scalax.collection.GraphPredef.OuterElem[N,E],GraphTraversalImpl.this.OuterElemTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "OuterEdgeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#OuterEdgeTraverserextendsGraphTraversalImpl.this.OuterEdgeTraverserwithGraphTraversalImpl.this.Impl[E[N],GraphTraversalImpl.this.OuterEdgeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerEdgeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerEdgeTraverserextendsGraphTraversalImpl.this.InnerEdgeTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.EdgeT,GraphTraversalImpl.this.InnerEdgeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "OuterNodeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#OuterNodeTraverserextendsGraphTraversalImpl.this.OuterNodeTraverserwithGraphTraversalImpl.this.Impl[N,GraphTraversalImpl.this.OuterNodeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerNodeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeTraverserextendsGraphTraversalImpl.this.InnerNodeTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.InnerNodeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "StrongComponentTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.StrongComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#StrongComponentTraverserextendsGraphTraversalImpl.this.StrongComponentTraverserwithProductwithSerializable", "kind" : "case class"}, {"label" : "InnerElemTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerElemTraverserextendsGraphTraversalImpl.this.InnerElemTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.InnerElem,GraphTraversalImpl.this.InnerElemTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "ComponentTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.ComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ComponentTraverserextendsGraphTraversalImpl.this.ComponentTraverserwithProductwithSerializable", "kind" : "case class"}, {"label" : "StrongComponentImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.StrongComponentImpl", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#StrongComponentImplextendsGraphTraversalImpl.this.Component", "kind" : "class"}, {"label" : "WeakComponentImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.WeakComponentImpl", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#WeakComponentImplextendsGraphTraversalImpl.this.Component", "kind" : "class"}, {"label" : "PathBuilder", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.PathBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#PathBuilderextendsGraphTraversalImpl.this.WalkBuilderwithGraphTraversalImpl.this.PathBuilder", "kind" : "class"}, {"label" : "WalkBuilder", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.WalkBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#WalkBuilderextendsGraphTraversalImpl.this.WalkBuilder", "kind" : "class"}, {"label" : "InnerNodeTraversalImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeTraversalImpl", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeTraversalImplextendsGraphTraversalImpl.this.TraverserInnerNodewithGraphTraversalImpl.this.InnerNodeState", "kind" : "trait"}, {"label" : "InnerNodeState", "tail" : "", "member" : "scalax.collection.State.InnerNodeState", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeStateextendsAnyRef", "kind" : "trait"}, {"label" : "Impl", "tail" : "", "member" : "scalax.collection.TraverserImpl.Impl", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Impl[A<:<?>,+This<:<?>]extendsTraverserImpl.this.TraverserMethods[A,This]withTraverserImpl.this.Traverser[A,This]", "kind" : "trait"}, {"label" : "EdgeSet", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.EdgeSet", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeSetextendsAdjacencyListGraph.this.EdgeSet", "kind" : "class"}, {"label" : "NodeSet", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.NodeSet", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeSetextendsAdjacencyListGraph.this.NodeSet", "kind" : "class"}, {"label" : "InnerNodeImpl", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.InnerNodeImpl", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeImplextendsAdjacencyListGraph.this.NodeBasewithAdjacencyListGraph.this.InnerNode", "kind" : "abstract class"}, {"label" : "InnerNode", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListBase.InnerNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNodeextendsAdjacencyListBase.this.InnerNode", "kind" : "trait"}, {"label" : "EdgeBase", "tail" : "", "member" : "scalax.collection.GraphLike.EdgeBase", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeBaseextendsGraphPredef.InnerEdgeParam[N,E,GraphLike.this.NodeT,E]withGraphLike.this.InnerEdge", "kind" : "class"}, {"label" : "InnerEdge", "tail" : "", "member" : "scalax.collection.GraphLike.InnerEdge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerEdgeextendsGraphLike.this.InnerEdge", "kind" : "trait"}, {"label" : "Filter", "tail" : "", "member" : "scalax.collection.GraphDegree.Filter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Filter[T<:<?>]extendsT=>Boolean", "kind" : "trait"}, {"label" : "DegreeFunction", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeFunction", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#DegreeFunctionextendsGraphDegree.this.NodeT=>Int", "kind" : "trait"}, {"label" : "DegreeOrdering", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#DegreeOrderingextendsOrdering[GraphDegree.this.NodeT]", "kind" : "final class"}, {"label" : "TraverserInnerNode", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserInnerNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#TraverserInnerNode", "kind" : "object"}, {"label" : "ExtendedNodeVisitor", "tail" : "", "member" : "scalax.collection.GraphTraversal.ExtendedNodeVisitor", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ExtendedNodeVisitor[U<:<?>]extendsGraphTraversal.this.NodeT=>Uwith(GraphTraversal.this.NodeT,Int,Int,=>scalax.collection.GraphTraversal.NodeInformer)=>U", "kind" : "trait"}, {"label" : "Component", "tail" : "", "member" : "scalax.collection.GraphTraversal.Component", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ComponentextendsGraphTraversal.this.Properties", "kind" : "abstract class"}, {"label" : "LayeredTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.LayeredTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#LayeredTopologicalOrder[+A<:<?>]extendsGraphTraversal.this.AbstractTopologicalOrder[A,(Int,Iterable[A])]", "kind" : "final class"}, {"label" : "Layer", "tail" : "", "member" : "scalax.collection.GraphTraversal.Layer", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#LayerextendsProductwithSerializable", "kind" : "case class"}, {"label" : "AbstractTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.AbstractTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#AbstractTopologicalOrder[+A<:<?>,+T<:<?>]extendsAbstractTraversable[T]", "kind" : "sealed abstract class"}, {"label" : "TopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.TopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#TopologicalOrder[+A<:<?>]extendsGraphTraversal.this.AbstractTopologicalOrder[A,A]", "kind" : "final class"}, {"label" : "SubgraphProperties", "tail" : "", "member" : "scalax.collection.GraphTraversal.SubgraphProperties", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#SubgraphPropertiesextendsAnyRef", "kind" : "trait"}, {"label" : "Properties", "tail" : "", "member" : "scalax.collection.GraphTraversal.Properties", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#PropertiesextendsGraphTraversal.this.SubgraphProperties", "kind" : "trait"}, {"label" : "Traverser", "tail" : "", "member" : "scalax.collection.GraphTraversal.Traverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Traverser[A<:<?>,+This<:<?>]extendsGraphTraversal.this.TraverserMethods[A,This]withGraphTraversal.this.PropertieswithTraversable[A]", "kind" : "trait"}, {"label" : "Weight", "tail" : "", "member" : "scalax.collection.GraphTraversal.Weight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#WeightextendsAnyRef", "kind" : "class"}, {"label" : "FluentProperties", "tail" : "", "member" : "scalax.collection.GraphTraversal.FluentProperties", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#FluentProperties[+This<:GraphTraversal.this.FluentProperties[This]]extendsAnyRef", "kind" : "abstract class"}, {"label" : "TraverserMethods", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserMethods", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#TraverserMethods[A<:<?>,+This<:<?>]extendsGraphTraversal.this.FluentProperties[This]", "kind" : "abstract class"}, {"label" : "TraverserInnerNode", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserInnerNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#TraverserInnerNodeextendsGraphTraversal.this.InnerNode", "kind" : "trait"}, {"label" : "Walk", "tail" : "", "member" : "scalax.collection.GraphTraversal.Walk", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#WalkextendsTraversable[GraphTraversal.this.InnerElem]", "kind" : "trait"}, {"label" : "Path", "tail" : "", "member" : "scalax.collection.GraphTraversal.Path", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#PathextendsGraphTraversal.this.Walk", "kind" : "trait"}, {"label" : "Cycle", "tail" : "", "member" : "scalax.collection.GraphTraversal.Cycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#CycleextendsGraphTraversal.this.Path", "kind" : "trait"}, {"label" : "Edge", "tail" : "", "member" : "scalax.collection.GraphBase.Edge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Edge", "kind" : "object"}, {"label" : "InnerEdge", "tail" : "", "member" : "scalax.collection.GraphBase.InnerEdge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerEdge", "kind" : "object"}, {"label" : "NodeOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.NodeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeOrderingextendsOrdering[GraphBase.this.NodeT]withGraphBase.this.ElemOrdering", "kind" : "sealed trait"}, {"label" : "EdgeOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.EdgeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeOrderingextendsOrdering[GraphBase.this.EdgeT]withGraphBase.this.ElemOrdering", "kind" : "sealed trait"}, {"label" : "ElemOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.ElemOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ElemOrderingextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Node", "tail" : "", "member" : "scalax.collection.GraphBase.Node", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Node", "kind" : "object"}, {"label" : "InnerNode", "tail" : "", "member" : "scalax.collection.GraphBase.InnerNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerNode", "kind" : "object"}, {"label" : "Edge", "tail" : "", "member" : "scalax.collection.GraphBase.Edge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeextendsSerializable", "kind" : "trait"}, {"label" : "InnerElem", "tail" : "", "member" : "scalax.collection.GraphBase.InnerElem", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#InnerElemextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Node", "tail" : "", "member" : "scalax.collection.GraphBase.Node", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeextendsSerializable", "kind" : "trait"}, {"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "layers", "tail" : "(): Traversable[(Int, Iterable[RuleDependencyGraph])]", "member" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraph.layers", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#layers():Traversable[(Int,Iterable[net.sansa_stack.inference.rules.RuleDependencyGraph])]", "kind" : "def"}, {"label" : "components", "tail" : "(): Set[Graph[Rule, LDiEdge]]", "member" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraph.components", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#components():Set[scalax.collection.Graph[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.edge.LDiEdge]]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraph#<init>", "error" : "unsupported entity"}, {"label" : "newNodeWithHints", "tail" : "(n: Graph[Rule, LDiEdge], h: Hints): NodeBase", "member" : "scalax.collection.immutable.DefaultGraphImpl.newNodeWithHints", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newNodeWithHints(n:N,h:scalax.collection.mutable.ArraySet.Hints):DefaultGraphImpl.this.NodeBase", "kind" : "final def"}, {"label" : "NodeT", "tail" : "", "member" : "scalax.collection.immutable.DefaultGraphImpl.NodeT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeT=DefaultGraphImpl.this.NodeBase", "kind" : "type"}, {"label" : "copy", "tail" : "(nodes: Traversable[Graph[Rule, LDiEdge]], edges: Traversable[DiEdge[Graph[Rule, LDiEdge]]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.DefaultGraphImpl.copy", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#copy(nodes:Traversable[N],edges:Traversable[E[N]]):scalax.collection.immutable.DefaultGraphImpl[N,E]", "kind" : "final def"}, {"label" : "empty", "tail" : "(): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.DefaultGraphImpl.empty", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#empty:scalax.collection.immutable.DefaultGraphImpl[N,E]", "kind" : "final def"}, {"label" : "newBuilder", "tail" : "(): GraphBuilder[Graph[Rule, LDiEdge], DiEdge, DefaultGraphImpl]", "member" : "scalax.collection.immutable.DefaultGraphImpl.newBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newBuilder:scalax.collection.mutable.GraphBuilder[N,E,scalax.collection.immutable.DefaultGraphImpl]", "kind" : "def"}, {"label" : "edges", "tail" : "(): EdgeSetT", "member" : "scalax.collection.immutable.DefaultGraphImpl.edges", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#edges:DefaultGraphImpl.this.EdgeSetT", "kind" : "final def"}, {"label" : "nodes", "tail" : "(): NodeSetT", "member" : "scalax.collection.immutable.DefaultGraphImpl.nodes", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#nodes:DefaultGraphImpl.this.NodeSetT", "kind" : "final def"}, {"label" : "newNodeSet", "tail" : "(): NodeSetT", "member" : "scalax.collection.immutable.DefaultGraphImpl.newNodeSet", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newNodeSet:DefaultGraphImpl.this.NodeSetT", "kind" : "final def"}, {"label" : "Config", "tail" : "", "member" : "scalax.collection.immutable.DefaultGraphImpl.Config", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Config=scalax.collection.immutable.DefaultGraphImpl.Config", "kind" : "type"}, {"label" : "graphCompanion", "tail" : ": DefaultGraphImpl.type", "member" : "scalax.collection.immutable.DefaultGraphImpl.graphCompanion", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#graphCompanion:scalax.collection.immutable.DefaultGraphImpl.type", "kind" : "final val"}, {"label" : "config", "tail" : ": scalax.collection.immutable.DefaultGraphImpl.Config with AdjacencyListArrayConfig", "member" : "scalax.collection.immutable.DefaultGraphImpl.config", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#config:scalax.collection.immutable.DefaultGraphImpl.Configwithscalax.collection.config.AdjacencyListArrayConfig", "kind" : "implicit val"}, {"label" : "edgeT", "tail" : ": ClassTag[DiEdge[Graph[Rule, LDiEdge]]]", "member" : "scalax.collection.immutable.DefaultGraphImpl.edgeT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#edgeT:scala.reflect.ClassTag[E[N]]", "kind" : "implicit val"}, {"label" : "outerNodeDownUpTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterNodeDownUpTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#outerNodeDownUpTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterNodeDownUpTraverser", "kind" : "def"}, {"label" : "innerNodeDownUpTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerNodeDownUpTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#innerNodeDownUpTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerNodeDownUpTraverser", "kind" : "def"}, {"label" : "outerElemTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterElemTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#outerElemTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterElemTraverser", "kind" : "def"}, {"label" : "innerElemTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerElemTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#innerElemTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerElemTraverser", "kind" : "def"}, {"label" : "outerEdgeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterEdgeTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#outerEdgeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterEdgeTraverser", "kind" : "def"}, {"label" : "innerEdgeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerEdgeTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#innerEdgeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerEdgeTraverser", "kind" : "def"}, {"label" : "outerNodeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterNodeTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#outerNodeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterNodeTraverser", "kind" : "def"}, {"label" : "innerNodeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerNodeTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#innerNodeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerNodeTraverser", "kind" : "def"}, {"label" : "strongComponentTraverser", "tail" : "(parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): StrongComponentTraverser", "member" : "scalax.collection.GraphTraversalImpl.strongComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#strongComponentTraverser(parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.StrongComponentTraverser", "kind" : "def"}, {"label" : "componentTraverser", "tail" : "(parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): ComponentTraverser", "member" : "scalax.collection.GraphTraversalImpl.componentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#componentTraverser(parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.ComponentTraverser", "kind" : "def"}, {"label" : "forInDegrees", "tail" : "(traversable: Traversable[NodeT] with SubgraphProperties, maybeHandle: Option[Handle], includeAnyway: Option[NodeT], includeInDegree: NodeFilter, fillInDegrees: Boolean): TopoSortSetup", "member" : "scalax.collection.GraphTraversalImpl.forInDegrees", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#forInDegrees(traversable:Traversable[GraphTraversalImpl.this.NodeT]withGraphTraversalImpl.this.SubgraphProperties,maybeHandle:Option[scalax.collection.State.Handle],includeAnyway:Option[GraphTraversalImpl.this.NodeT],includeInDegree:GraphTraversalImpl.this.NodeFilter,fillInDegrees:Boolean):GraphTraversalImpl.this.TopoSortSetup", "kind" : "final def"}, {"label" : "TopoSortSetup", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.TopoSortSetup", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#TopoSortSetup=(scala.collection.mutable.Buffer[GraphTraversalImpl.this.NodeT],scala.collection.mutable.Map[GraphTraversalImpl.this.NodeT,Int],Option[GraphTraversalImpl.this.NodeT])", "kind" : "type"}, {"label" : "expectedMaxNodes", "tail" : "(divisor: Int, min: Int): Int", "member" : "scalax.collection.GraphTraversalImpl.expectedMaxNodes", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#expectedMaxNodes(divisor:Int,min:Int):Int", "kind" : "final def"}, {"label" : "newPathBuilder", "tail" : "(start: NodeT)(sizeHint: Int, edgeSelector: (NodeT, NodeT) ⇒ Option[EdgeT]): PathBuilder", "member" : "scalax.collection.GraphTraversalImpl.newPathBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newPathBuilder(start:GraphTraversalImpl.this.NodeT)(implicitsizeHint:Int,implicitedgeSelector:(GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.NodeT)=>Option[GraphTraversalImpl.this.EdgeT]):GraphTraversalImpl.this.PathBuilder", "kind" : "def"}, {"label" : "newWalkBuilder", "tail" : "(start: NodeT)(sizeHint: Int, edgeSelector: (NodeT, NodeT) ⇒ Option[EdgeT]): WalkBuilder", "member" : "scalax.collection.GraphTraversalImpl.newWalkBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newWalkBuilder(start:GraphTraversalImpl.this.NodeT)(implicitsizeHint:Int,implicitedgeSelector:(GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.NodeT)=>Option[GraphTraversalImpl.this.EdgeT]):GraphTraversalImpl.this.WalkBuilder", "kind" : "def"}, {"label" : "cycle", "tail" : "(results: Option[(NodeT, ArrayStack[CycleStackElem])], edgeFilter: EdgeFilter): Option[Cycle]", "member" : "scalax.collection.GraphTraversalImpl.cycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#cycle(results:Option[(GraphTraversalImpl.this.NodeT,scala.collection.mutable.ArrayStack[GraphTraversalImpl.this.Informer.CycleStackElem])],edgeFilter:GraphTraversalImpl.this.EdgeFilter):Option[GraphTraversalImpl.this.Cycle]", "kind" : "final def"}, {"label" : "cycle", "tail" : "(maybeStart: Option[NodeT], stack: ArrayStack[Element], edgeFilter: EdgeFilter): Option[Cycle]", "member" : "scalax.collection.GraphTraversalImpl.cycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#cycle(maybeStart:Option[GraphTraversalImpl.this.NodeT],stack:scala.collection.mutable.ArrayStack[GraphTraversalImpl.this.Informer.DfsInformer.Element],edgeFilter:GraphTraversalImpl.this.EdgeFilter):Option[GraphTraversalImpl.this.Cycle]", "kind" : "final def"}, {"label" : "clearNodeStates", "tail" : "(flags: FlagWord, flagsExt: ExtBitSet): Unit", "member" : "scalax.collection.State.clearNodeStates", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#clearNodeStates(flags:scalax.collection.State.FlagWord,flagsExt:scalax.collection.mutable.ExtBitSet):Unit", "kind" : "def"}, {"label" : "withHandles", "tail" : "(nr: Int, reuse: Array[Handle])(block: (Array[Handle]) ⇒ T): T", "member" : "scalax.collection.State.withHandles", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#withHandles[T](nr:Int,reuse:Array[scalax.collection.State.Handle])(block:Array[scalax.collection.State.Handle]=>T):T", "kind" : "def"}, {"label" : "withHandle", "tail" : "(reuse: Option[Handle])(block: (Handle) ⇒ T): T", "member" : "scalax.collection.State.withHandle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#withHandle[T](reuse:Option[scalax.collection.State.Handle])(block:scalax.collection.State.Handle=>T):T", "kind" : "def"}, {"label" : "releaseHandle", "tail" : "(handle: Handle): Unit", "member" : "scalax.collection.State.releaseHandle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#releaseHandle(handle:scalax.collection.State.Handle):Unit", "kind" : "def"}, {"label" : "nextHandle", "tail" : "(): Handle", "member" : "scalax.collection.State.nextHandle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#nextHandle:scalax.collection.State.Handle", "kind" : "def"}, {"label" : "dumpDirty", "tail" : "(): ExtBitSet", "member" : "scalax.collection.State.dumpDirty", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#dumpDirty:scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "dumpInUse", "tail" : "(): ExtBitSet", "member" : "scalax.collection.State.dumpInUse", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#dumpInUse:scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "dump", "tail" : "(store: FlagStore): ExtBitSet", "member" : "scalax.collection.State.dump", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#dump(store:scalax.collection.State.FlagStore):scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "-!#", "tail" : "(e: DiEdge[Graph[Rule, LDiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.-!#", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-!#(e:E[N]):This[N,E]", "kind" : "def"}, {"label" : "-#", "tail" : "(e: DiEdge[Graph[Rule, LDiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.-#", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-#(e:E[N]):This[N,E]", "kind" : "def"}, {"label" : "-?", "tail" : "(n: Graph[Rule, LDiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.-?", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-?(n:N):This[N,E]", "kind" : "def"}, {"label" : "-", "tail" : "(n: Graph[Rule, LDiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.-", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-(n:N):This[N,E]", "kind" : "def"}, {"label" : "+#", "tail" : "(e: DiEdge[Graph[Rule, LDiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.+#", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#+#(e:E[N]):This[N,E]", "kind" : "def"}, {"label" : "+", "tail" : "(n: Graph[Rule, LDiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.immutable.AdjacencyListGraph.+", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#+(n:N):This[N,E]", "kind" : "def"}, {"label" : "EdgeSetT", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.EdgeSetT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeSetT=AdjacencyListGraph.this.EdgeSet", "kind" : "type"}, {"label" : "newEdge", "tail" : "(innerEdge: DiEdge[NodeT]): EdgeT", "member" : "scalax.collection.immutable.AdjacencyListGraph.newEdge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newEdge(innerEdge:E[AdjacencyListGraph.this.NodeT]):AdjacencyListGraph.this.EdgeT", "kind" : "final def"}, {"label" : "newEdgeTArray", "tail" : "(size: Int): Array[EdgeT]", "member" : "scalax.collection.immutable.AdjacencyListGraph.newEdgeTArray", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newEdgeTArray(size:Int):Array[AdjacencyListGraph.this.EdgeT]", "kind" : "final def"}, {"label" : "NodeSetT", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.NodeSetT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeSetT=AdjacencyListGraph.this.NodeSet", "kind" : "type"}, {"label" : "EdgeT", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListGraph.EdgeT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeT=AdjacencyListGraph.this.EdgeBase", "kind" : "type"}, {"label" : "initializeFrom", "tail" : "(in: ObjectInputStream, nodes: NodeSetT, edges: EdgeSetT): Unit", "member" : "scalax.collection.immutable.AdjacencyListBase.initializeFrom", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#initializeFrom(in:java.io.ObjectInputStream,nodes:AdjacencyListBase.this.NodeSetT,edges:AdjacencyListBase.this.EdgeSetT):Unit", "kind" : "def"}, {"label" : "serializeTo", "tail" : "(out: ObjectOutputStream): Unit", "member" : "scalax.collection.immutable.AdjacencyListBase.serializeTo", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#serializeTo(out:java.io.ObjectOutputStream):Unit", "kind" : "final def"}, {"label" : "edgeIterator", "tail" : "(): GroupIterator[EdgeT] { ... \/* 2 definitions in type refinement *\/ }", "member" : "scalax.collection.immutable.AdjacencyListBase.edgeIterator", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#edgeIterator:scalax.collection.generic.GroupIterator[AdjacencyListBase.this.EdgeT]{objectOuter;objectInner}", "kind" : "def"}, {"label" : "newNode", "tail" : "(n: Graph[Rule, LDiEdge]): NodeT", "member" : "scalax.collection.immutable.AdjacencyListBase.newNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#newNode(n:N):AdjacencyListBase.this.NodeT", "kind" : "final def"}, {"label" : "having", "tail" : "(node: NodeFilter, edge: EdgeFilter): PartialFunction[Param[Graph[Rule, LDiEdge], DiEdge], Boolean]", "member" : "scalax.collection.GraphLike.having", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#having(node:GraphLike.this.NodeFilter,edge:GraphLike.this.EdgeFilter):PartialFunction[scalax.collection.GraphPredef.Param[N,E],Boolean]", "kind" : "def"}, {"label" : "--!", "tail" : "(elems: GenTraversableOnce[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.--!", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#--!(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "-!", "tail" : "(elem: Param[Graph[Rule, LDiEdge], DiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.-!", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-!(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "-", "tail" : "(elem: Param[Graph[Rule, LDiEdge], DiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.-", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "minusMinusNodesEdges", "tail" : "(delNodes: Traversable[Graph[Rule, LDiEdge]], delEdges: Traversable[DiEdge[Graph[Rule, LDiEdge]]]): (Set[Graph[Rule, LDiEdge]], Set[DiEdge[Graph[Rule, LDiEdge]]])", "member" : "scalax.collection.GraphLike.minusMinusNodesEdges", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#minusMinusNodesEdges(delNodes:Traversable[N],delEdges:Traversable[E[N]]):(scala.collection.immutable.Set[N],scala.collection.immutable.Set[E[N]])", "kind" : "def"}, {"label" : "minusMinus", "tail" : "(delNodes: Traversable[Graph[Rule, LDiEdge]], delEdges: Traversable[DiEdge[Graph[Rule, LDiEdge]]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.minusMinus", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#minusMinus(delNodes:Traversable[N],delEdges:Traversable[E[N]]):This[N,E]", "kind" : "def"}, {"label" : "plusPlus", "tail" : "(newNodes: Traversable[Graph[Rule, LDiEdge]], newEdges: Traversable[DiEdge[Graph[Rule, LDiEdge]]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.plusPlus", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#plusPlus(newNodes:Traversable[N],newEdges:Traversable[E[N]]):This[N,E]", "kind" : "def"}, {"label" : "partition", "tail" : "(elems: GenTraversableOnce[Param[Graph[Rule, LDiEdge], DiEdge]]): Partitions[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.partition", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#partition(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):scalax.collection.GraphPredef.Param.Partitions[N,E]", "kind" : "final def"}, {"label" : "bulkOp", "tail" : "(elems: GenTraversableOnce[Param[Graph[Rule, LDiEdge], DiEdge]], isPlusPlus: Boolean): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.bulkOp", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#bulkOp(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]],isPlusPlus:Boolean):This[N,E]", "kind" : "final def"}, {"label" : "--", "tail" : "(elems: GenTraversableOnce[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.--", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#--(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "++", "tail" : "(elems: GenTraversableOnce[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.++", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#++(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: Param[Graph[Rule, LDiEdge], DiEdge]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scalax.collection.GraphLike.+", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#+(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(outerEdge: DiEdge[Graph[Rule, LDiEdge]], default: EdgeT): EdgeT", "member" : "scalax.collection.GraphLike.getOrElse", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#getOrElse(outerEdge:E[N],default:GraphLike.this.EdgeT):GraphLike.this.EdgeT", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(outerNode: Graph[Rule, LDiEdge], default: NodeT): NodeT", "member" : "scalax.collection.GraphLike.getOrElse", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#getOrElse(outerNode:N,default:GraphLike.this.NodeT):GraphLike.this.NodeT", "kind" : "final def"}, {"label" : "get", "tail" : "(outerEdge: DiEdge[Graph[Rule, LDiEdge]]): EdgeT", "member" : "scalax.collection.GraphLike.get", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#get(outerEdge:E[N]):GraphLike.this.EdgeT", "kind" : "final def"}, {"label" : "get", "tail" : "(outerNode: Graph[Rule, LDiEdge]): NodeT", "member" : "scalax.collection.GraphLike.get", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#get(outerNode:N):GraphLike.this.NodeT", "kind" : "final def"}, {"label" : "find", "tail" : "(outerEdge: DiEdge[Graph[Rule, LDiEdge]]): Option[EdgeT]", "member" : "scalax.collection.GraphLike.find", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#find(outerEdge:E[N]):Option[GraphLike.this.EdgeT]", "kind" : "final def"}, {"label" : "find", "tail" : "(outerNode: Graph[Rule, LDiEdge]): Option[NodeT]", "member" : "scalax.collection.GraphLike.find", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#find(outerNode:N):Option[GraphLike.this.NodeT]", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scalax.collection.GraphLike.iterator", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#iterator:Iterator[scalax.collection.GraphPredef.Param[N,E]]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Param[Graph[Rule, LDiEdge], DiEdge]): Boolean", "member" : "scalax.collection.GraphLike.contains", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#contains(elem:scalax.collection.GraphPredef.Param[N,E]):Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scalax.collection.GraphLike.equals", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "toSortedString", "tail" : "(nodeSeparator: String, edgeSeparator: String, nodesEdgesSeparator: String, withNodesEdgesPrefix: Boolean)(ordNode: NodeOrdering, ordEdge: EdgeOrdering): String", "member" : "scalax.collection.GraphLike.toSortedString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toSortedString(nodeSeparator:String,edgeSeparator:String,nodesEdgesSeparator:String,withNodesEdgesPrefix:Boolean)(implicitordNode:GraphLike.this.NodeOrdering,implicitordEdge:GraphLike.this.EdgeOrdering):String", "kind" : "def"}, {"label" : "asSortedString", "tail" : "(nodeSeparator: String, edgeSeparator: String, nodesEdgesSeparator: String, withNodesEdgesPrefix: Boolean)(ordNode: NodeOrdering, ordEdge: EdgeOrdering): String", "member" : "scalax.collection.GraphLike.asSortedString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#asSortedString(nodeSeparator:String,edgeSeparator:String,nodesEdgesSeparator:String,withNodesEdgesPrefix:Boolean)(implicitordNode:GraphLike.this.NodeOrdering,implicitordEdge:GraphLike.this.EdgeOrdering):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scalax.collection.GraphLike.toString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scalax.collection.GraphLike.stringPrefix", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#stringPrefix:String", "kind" : "def"}, {"label" : "isMultiT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isMultiT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isMultiT:Boolean", "kind" : "final val"}, {"label" : "isMulti", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isMulti", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isMulti:Boolean", "kind" : "def"}, {"label" : "isMixed", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isMixed", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isMixed:Boolean", "kind" : "def"}, {"label" : "isHyperT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isHyperT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isHyperT:Boolean", "kind" : "final val"}, {"label" : "isHyper", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isHyper", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isHyper:Boolean", "kind" : "def"}, {"label" : "isDirectedT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isDirectedT", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isDirectedT:Boolean", "kind" : "final val"}, {"label" : "isDirected", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isDirected", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isDirected:Boolean", "kind" : "def"}, {"label" : "ThisGraph", "tail" : "", "member" : "scalax.collection.GraphLike.ThisGraph", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ThisGraph=scalax.collection.GraphLike.<refinement>.type", "kind" : "type"}, {"label" : "degreeCount", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedMap[Int, Int]", "member" : "scalax.collection.GraphDegree.degreeCount", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#degreeCount(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedMap[Int,Int]", "kind" : "def"}, {"label" : "degreeNodesMap", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedMap[Int, AnySet[NodeT]]", "member" : "scalax.collection.GraphDegree.degreeNodesMap", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#degreeNodesMap(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedMap[Int,scalax.collection.AnySet[GraphDegree.this.NodeT]]", "kind" : "def"}, {"label" : "degreeNodeSeq", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Seq[DegreeNodeSeqEntry]", "member" : "scalax.collection.GraphDegree.degreeNodeSeq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#degreeNodeSeq(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Seq[GraphDegree.this.DegreeNodeSeqEntry]", "kind" : "def"}, {"label" : "DegreeNodeSeqEntry", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeNodeSeqEntry", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#DegreeNodeSeqEntry=(Int,GraphDegree.this.NodeT)", "kind" : "type"}, {"label" : "degreeSet", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedSet[Int]", "member" : "scalax.collection.GraphDegree.degreeSet", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#degreeSet(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedSet[Int]", "kind" : "def"}, {"label" : "degreeSeq", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Seq[Int]", "member" : "scalax.collection.GraphDegree.degreeSeq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#degreeSeq(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Seq[Int]", "kind" : "def"}, {"label" : "maxDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.maxDegree", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#maxDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "minDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.minDegree", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#minDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "totalDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.totalDegree", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#totalDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "anyEdgeSelector", "tail" : "(from: NodeT, to: NodeT): Option[EdgeT]", "member" : "scalax.collection.GraphTraversal.anyEdgeSelector", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#anyEdgeSelector(from:GraphTraversal.this.NodeT,to:GraphTraversal.this.NodeT):Option[GraphTraversal.this.EdgeT]", "kind" : "final def"}, {"label" : "isComplete", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isComplete", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isComplete:Boolean", "kind" : "def"}, {"label" : "defaultPathSize", "tail" : "(): Int", "member" : "scalax.collection.GraphTraversal.defaultPathSize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#defaultPathSize:Int", "kind" : "final def"}, {"label" : "topologicalSortByComponent", "tail" : "(visitor: (InnerElem) ⇒ U): Traversable[CycleNodeOrTopologicalOrder]", "member" : "scalax.collection.GraphTraversal.topologicalSortByComponent", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#topologicalSortByComponent[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):Traversable[GraphTraversal.this.CycleNodeOrTopologicalOrder]", "kind" : "final def"}, {"label" : "topologicalSort", "tail" : "(visitor: (InnerElem) ⇒ U): CycleNodeOrTopologicalOrder", "member" : "scalax.collection.GraphTraversal.topologicalSort", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#topologicalSort[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):GraphTraversal.this.CycleNodeOrTopologicalOrder", "kind" : "final def"}, {"label" : "findCycleContaining", "tail" : "(node: NodeT)(visitor: (InnerElem) ⇒ U): Option[Cycle]", "member" : "scalax.collection.GraphTraversal.findCycleContaining", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#findCycleContaining[U](node:GraphTraversal.this.NodeT)(implicitvisitor:GraphTraversal.this.InnerElem=>U):Option[GraphTraversal.this.Cycle]", "kind" : "final def"}, {"label" : "Layers", "tail" : "", "member" : "scalax.collection.GraphTraversal.Layers", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Layers=Traversable[GraphTraversal.this.Layer]", "kind" : "type"}, {"label" : "CycleNodeOrTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.CycleNodeOrTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#CycleNodeOrTopologicalOrder=Either[GraphTraversal.this.NodeT,GraphTraversal.this.TopologicalOrder[GraphTraversal.this.NodeT]]", "kind" : "type"}, {"label" : "findCycle", "tail" : "(visitor: (InnerElem) ⇒ U): Option[Cycle]", "member" : "scalax.collection.GraphTraversal.findCycle", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#findCycle[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):Option[GraphTraversal.this.Cycle]", "kind" : "final def"}, {"label" : "isAcyclic", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isAcyclic", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isAcyclic:Boolean", "kind" : "final def"}, {"label" : "isCyclic", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isCyclic", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isCyclic:Boolean", "kind" : "final def"}, {"label" : "isConnected", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isConnected", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isConnected:Boolean", "kind" : "def"}, {"label" : "totalWeight", "tail" : "(): Double", "member" : "scalax.collection.GraphBase.totalWeight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#totalWeight:Double", "kind" : "def"}, {"label" : "defaultEdgeOrdering", "tail" : ": EdgeOrdering", "member" : "scalax.collection.GraphBase.defaultEdgeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#defaultEdgeOrdering:GraphBase.this.EdgeOrdering", "kind" : "final lazy val"}, {"label" : "edgeToEdgeCont", "tail" : "(e: DiEdge[Graph[Rule, LDiEdge]]): DiEdge[NodeT]", "member" : "scalax.collection.GraphBase.edgeToEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#edgeToEdgeCont(e:E[N]):E[GraphBase.this.NodeT]", "kind" : "implicit final def"}, {"label" : "defaultNodeOrdering", "tail" : ": NodeOrdering", "member" : "scalax.collection.GraphBase.defaultNodeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#defaultNodeOrdering:GraphBase.this.NodeOrdering", "kind" : "final lazy val"}, {"label" : "anyOrdering", "tail" : ": AnyOrdering[Graph[Rule, LDiEdge]]", "member" : "scalax.collection.GraphBase.anyOrdering", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#anyOrdering:scalax.collection.generic.AnyOrdering[N]", "kind" : "final lazy val"}, {"label" : "isCustomEdgeFilter", "tail" : "(f: EdgeFilter): Boolean", "member" : "scalax.collection.GraphBase.isCustomEdgeFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isCustomEdgeFilter(f:GraphBase.this.EdgeFilter):Boolean", "kind" : "final def"}, {"label" : "isCustomNodeFilter", "tail" : "(f: NodeFilter): Boolean", "member" : "scalax.collection.GraphBase.isCustomNodeFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isCustomNodeFilter(f:GraphBase.this.NodeFilter):Boolean", "kind" : "final def"}, {"label" : "anyEdge", "tail" : ": EdgeFilter", "member" : "scalax.collection.GraphBase.anyEdge", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#anyEdge:GraphBase.this.EdgeFilter", "kind" : "final val"}, {"label" : "noNode", "tail" : ": NodeFilter", "member" : "scalax.collection.GraphBase.noNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#noNode:GraphBase.this.NodeFilter", "kind" : "final val"}, {"label" : "anyNode", "tail" : ": NodeFilter", "member" : "scalax.collection.GraphBase.anyNode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#anyNode:GraphBase.this.NodeFilter", "kind" : "final val"}, {"label" : "EdgeFilter", "tail" : "", "member" : "scalax.collection.GraphBase.EdgeFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#EdgeFilter=GraphBase.this.EdgeT=>Boolean", "kind" : "type"}, {"label" : "NodeFilter", "tail" : "", "member" : "scalax.collection.GraphBase.NodeFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#NodeFilter=GraphBase.this.NodeT=>Boolean", "kind" : "type"}, {"label" : "graphSize", "tail" : "(): Int", "member" : "scalax.collection.GraphBase.graphSize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#graphSize:Int", "kind" : "def"}, {"label" : "nonTrivial", "tail" : "(): Boolean", "member" : "scalax.collection.GraphBase.nonTrivial", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#nonTrivial:Boolean", "kind" : "final def"}, {"label" : "isTrivial", "tail" : "(): Boolean", "member" : "scalax.collection.GraphBase.isTrivial", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isTrivial:Boolean", "kind" : "final def"}, {"label" : "order", "tail" : "(): Int", "member" : "scalax.collection.GraphBase.order", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#order:Int", "kind" : "def"}, {"label" : "initialize", "tail" : "(nodes: Traversable[Graph[Rule, LDiEdge]], edges: Traversable[DiEdge[Graph[Rule, LDiEdge]]]): Unit", "member" : "scalax.collection.GraphBase.initialize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#initialize(nodes:Traversable[N],edges:Traversable[E[N]]):Unit", "kind" : "def"}, {"label" : "seq", "tail" : "(): Set[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.Set.seq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#seq:scala.collection.Set[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Set]", "member" : "scala.collection.Set.companion", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#companion:scala.collection.generic.GenericCompanion[scala.collection.Set]", "kind" : "def"}, {"label" : "subsets", "tail" : "(): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.SetLike.subsets", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#subsets():Iterator[This]", "kind" : "def"}, {"label" : "subsets", "tail" : "(len: Int): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.SetLike.subsets", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#subsets(len:Int):Iterator[This]", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.SetLike.diff", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#diff(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.SetLike.union", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#union(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SetLike.isEmpty", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: Param[Graph[Rule, LDiEdge], DiEdge], elem2: Param[Graph[Rule, LDiEdge], DiEdge], elems: Param[Graph[Rule, LDiEdge], DiEdge]*): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.SetLike.+", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#+(elem1:A,elem2:A,elems:A*):This", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.SetLike.map", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[This,B,That]):That", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[A1]", "member" : "scala.collection.SetLike.toBuffer", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toBuffer[A1>:A]:scala.collection.mutable.Buffer[A1]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.SetLike.toSeq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Param[Graph[Rule, LDiEdge], DiEdge], ParSet[Param[Graph[Rule, LDiEdge], DiEdge]]]", "member" : "scala.collection.SetLike.parCombiner", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParSet[A]]", "kind" : "def"}, {"label" : "-", "tail" : "(elem1: Param[Graph[Rule, LDiEdge], DiEdge], elem2: Param[Graph[Rule, LDiEdge], DiEdge], elems: Param[Graph[Rule, LDiEdge], DiEdge]*): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.generic.Subtractable.-", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#-(elem1:A,elem2:A,elems:A*):Repr", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.GenSetLike.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "subsetOf", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): Boolean", "member" : "scala.collection.GenSetLike.subsetOf", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#subsetOf(that:scala.collection.GenSet[A]):Boolean", "kind" : "def"}, {"label" : "&~", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.GenSetLike.&~", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#&~(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "|", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.GenSetLike.|", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#|(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "&", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.GenSetLike.&", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#&(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSet[Param[Graph[Rule, LDiEdge], DiEdge]]): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.GenSetLike.intersect", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#intersect(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "apply", "tail" : "(elem: Param[Graph[Rule, LDiEdge], DiEdge]): Boolean", "member" : "scala.collection.GenSetLike.apply", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#apply(elem:A):Boolean", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[Param[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.view", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[Param[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.view", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.toStream", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.dropRight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.takeRight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.grouped", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.drop", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.take", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.slice", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.IterableLike.head", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.toIterator", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.toIterable", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Param[Graph[Rule, LDiEdge], DiEdge], B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Param[Graph[Rule, LDiEdge], DiEdge], B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): Option[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.find", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]): Iterable[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.toCollection", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ GenTraversableOnce[B]): Set[Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ GenTraversableOnce[B]): Set[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ (A1, A2, A3)): (Set[A1], Set[A2], Set[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ (A1, A2)): (Set[A1], Set[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): FilterMonadic[Param[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Param[Graph[Rule, LDiEdge], DiEdge], Col[Param[Graph[Rule, LDiEdge], DiEdge]]]): Col[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.to", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.inits", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.tails", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): (DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge])", "member" : "scala.collection.TraversableLike.span", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.init", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.last", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.tail", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.headOption", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Param[Graph[Rule, LDiEdge], DiEdge], B) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ K): Map[K, DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): (DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge])", "member" : "scala.collection.TraversableLike.partition", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Param[Graph[Rule, LDiEdge], DiEdge], B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.filter", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): DefaultGraphImpl[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableLike.repr", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSet[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.Parallelizable.par", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Param[Graph[Rule, LDiEdge], DiEdge], (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableOnce.toList", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B)(cmp: Ordering[B]): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableOnce.minBy", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B)(cmp: Ordering[B]): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableOnce.max", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Param[Graph[Rule, LDiEdge], DiEdge]", "member" : "scala.collection.TraversableOnce.min", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Param[Graph[Rule, LDiEdge], DiEdge], B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Param[Graph[Rule, LDiEdge], DiEdge], B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Param[Graph[Rule, LDiEdge], DiEdge], B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Param[Graph[Rule, LDiEdge], DiEdge]]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Boolean) ⇒ A): (Param[Graph[Rule, LDiEdge], DiEdge]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Param[Graph[Rule, LDiEdge], DiEdge]): (A) ⇒ Boolean", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraph.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraphGenerator", "shortDescription" : "A generator for a high-level rule dependency graph for a given rule dependency graph.", "object" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html", "members_object" : [{"label" : "generate", "tail" : "(graph: RuleDependencyGraph): HighLevelRuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.HighLevelRuleDependencyGraphGenerator.generate", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#generate(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.HighLevelRuleDependencyGraph", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/HighLevelRuleDependencyGraphGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.Planner", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/Planner$.html", "members_object" : [{"label" : "findNextTriplePattern", "tail" : "(triplePatterns: Seq[Triple], variable: Node): Option[Triple]", "member" : "net.sansa_stack.inference.rules.Planner.findNextTriplePattern", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#findNextTriplePattern(triplePatterns:scala.collection.mutable.Seq[org.apache.jena.graph.Triple],variable:org.apache.jena.graph.Node):Option[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "process", "tail" : "(tp: Triple, body: ListBuffer[Triple], visited: Set[Triple]): Unit", "member" : "net.sansa_stack.inference.rules.Planner.process", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#process(tp:org.apache.jena.graph.Triple,body:scala.collection.mutable.ListBuffer[org.apache.jena.graph.Triple],visited:scala.collection.mutable.Set[org.apache.jena.graph.Triple]):Unit", "kind" : "def"}, {"label" : "generatePlan", "tail" : "(rule: Rule): Plan", "member" : "net.sansa_stack.inference.rules.Planner.generatePlan", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#generatePlan(rule:org.apache.jena.reasoner.rulesys.Rule):net.sansa_stack.inference.rules.plan.Plan", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/Planner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.RDFSLevel", "shortDescription" : "The ForwardRuleReasonerRDFS can be configured to work at three different compliance levels:", "object" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "SIMPLE", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RDFSLevel.SIMPLE", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#SIMPLE:net.sansa_stack.inference.rules.RDFSLevel.Value", "kind" : "val"}, {"label" : "DEFAULT", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RDFSLevel.DEFAULT", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#DEFAULT:net.sansa_stack.inference.rules.RDFSLevel.Value", "kind" : "val"}, {"label" : "FULL", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RDFSLevel.FULL", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#FULL:net.sansa_stack.inference.rules.RDFSLevel.Value", "kind" : "val"}, {"label" : "RDFSLevel", "tail" : "", "member" : "net.sansa_stack.inference.rules.RDFSLevel.RDFSLevel", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#RDFSLevel=net.sansa_stack.inference.rules.RDFSLevel.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RDFSLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.ReasoningProfile", "shortDescription" : "An enumeration of reasoning profiles, which are usually different sets of rules with different complexity.", "object" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "forName", "tail" : "(n: String): ReasoningProfile", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.forName", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#forName(n:String):net.sansa_stack.inference.rules.ReasoningProfile.ReasoningProfile", "kind" : "def"}, {"label" : "OWL_EL", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.OWL_EL", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#OWL_EL:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "OWL_RL", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.OWL_RL", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#OWL_RL:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "OWL_HORST", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.OWL_HORST", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#OWL_HORST:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "RDFS_SIMPLE", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.RDFS_SIMPLE", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#RDFS_SIMPLE:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "RDFS", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.RDFS", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#RDFS:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "TRANSITIVE", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.TRANSITIVE", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#TRANSITIVE:net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "val"}, {"label" : "ReasoningProfile", "tail" : "", "member" : "net.sansa_stack.inference.rules.ReasoningProfile.ReasoningProfile", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#ReasoningProfile=net.sansa_stack.inference.rules.ReasoningProfile.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/ReasoningProfile$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.RuleDependencyGraph", "shortDescription" : "Given a set of rules R, a rule dependency graph (RDG) is a directed graphG = (V, E) such that", "members_class" : [{"label" : "NodeBase", "tail" : "", "member" : "scalax.collection.mutable.DefaultGraphImpl.NodeBase", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeBaseextendsDefaultGraphImpl.this.InnerNodeImplwithDefaultGraphImpl.this.InnerNodeTraversalImpl", "kind" : "final class"}, {"label" : "MultiEdgeLazyCycle", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MultiEdgeLazyCycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#MultiEdgeLazyCycleextendsGraphTraversalImpl.this.MultiEdgeLazyPathwithGraphTraversalImpl.this.Cycle", "kind" : "class"}, {"label" : "AnyEdgeLazyCycle", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.AnyEdgeLazyCycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#AnyEdgeLazyCycleextendsGraphTraversalImpl.this.AnyEdgeLazyPathwithGraphTraversalImpl.this.Cycle", "kind" : "class"}, {"label" : "MultiEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MultiEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#MultiEdgeLazyPathextendsGraphTraversalImpl.this.LazyPath", "kind" : "class"}, {"label" : "MinWeightEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MinWeightEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#MinWeightEdgeLazyPathextendsGraphTraversalImpl.this.SimpleLazyPath", "kind" : "class"}, {"label" : "AnyEdgeLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.AnyEdgeLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#AnyEdgeLazyPathextendsGraphTraversalImpl.this.SimpleLazyPath", "kind" : "class"}, {"label" : "SimpleLazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.SimpleLazyPath", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#SimpleLazyPathextendsGraphTraversalImpl.this.LazyPath", "kind" : "abstract class"}, {"label" : "LazyPath", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.LazyPath", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#LazyPathextendsGraphTraversalImpl.this.Path", "kind" : "abstract class"}, {"label" : "MapPathTraversable", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.MapPathTraversable", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#MapPathTraversable[T]extendsTraversable[T]", "kind" : "final class"}, {"label" : "ReverseStackTraversable", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.ReverseStackTraversable", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ReverseStackTraversable[S<:<?>]extendsTraversable[GraphTraversalImpl.this.NodeT]", "kind" : "final class"}, {"label" : "OuterNodeDownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#OuterNodeDownUpTraverserextendsGraphTraversalImpl.this.OuterNodeDownUpTraverserwithGraphTraversalImpl.this.DownUpTraverser[(Boolean,N),GraphTraversalImpl.this.OuterNodeDownUpTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerNodeDownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeDownUpTraverserextendsGraphTraversalImpl.this.InnerNodeDownUpTraverserwithGraphTraversalImpl.this.DownUpTraverser[(Boolean,GraphTraversalImpl.this.NodeT),GraphTraversalImpl.this.InnerNodeDownUpTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "DownUpTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.DownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#DownUpTraverser[A,+This<:GraphTraversalImpl.this.DownUpTraverser[A,This]]extendsGraphTraversalImpl.this.TraverserMethods[A,This]withGraphTraversalImpl.this.Impl[A,This]", "kind" : "trait"}, {"label" : "OuterElemTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#OuterElemTraverserextendsGraphTraversalImpl.this.TraverserMethods[scalax.collection.GraphPredef.OuterElem[N,E],GraphTraversalImpl.this.OuterElemTraverser]withGraphTraversalImpl.this.OuterElemTraverserwithGraphTraversalImpl.this.Impl[scalax.collection.GraphPredef.OuterElem[N,E],GraphTraversalImpl.this.OuterElemTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "OuterEdgeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#OuterEdgeTraverserextendsGraphTraversalImpl.this.OuterEdgeTraverserwithGraphTraversalImpl.this.Impl[E[N],GraphTraversalImpl.this.OuterEdgeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerEdgeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerEdgeTraverserextendsGraphTraversalImpl.this.InnerEdgeTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.EdgeT,GraphTraversalImpl.this.InnerEdgeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "OuterNodeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.OuterNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#OuterNodeTraverserextendsGraphTraversalImpl.this.OuterNodeTraverserwithGraphTraversalImpl.this.Impl[N,GraphTraversalImpl.this.OuterNodeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "InnerNodeTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeTraverserextendsGraphTraversalImpl.this.InnerNodeTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.InnerNodeTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "StrongComponentTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.StrongComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#StrongComponentTraverserextendsGraphTraversalImpl.this.StrongComponentTraverserwithProductwithSerializable", "kind" : "case class"}, {"label" : "InnerElemTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerElemTraverserextendsGraphTraversalImpl.this.InnerElemTraverserwithGraphTraversalImpl.this.Impl[GraphTraversalImpl.this.InnerElem,GraphTraversalImpl.this.InnerElemTraverser]withProductwithSerializable", "kind" : "case class"}, {"label" : "ComponentTraverser", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.ComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ComponentTraverserextendsGraphTraversalImpl.this.ComponentTraverserwithProductwithSerializable", "kind" : "case class"}, {"label" : "StrongComponentImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.StrongComponentImpl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#StrongComponentImplextendsGraphTraversalImpl.this.Component", "kind" : "class"}, {"label" : "WeakComponentImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.WeakComponentImpl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#WeakComponentImplextendsGraphTraversalImpl.this.Component", "kind" : "class"}, {"label" : "PathBuilder", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.PathBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#PathBuilderextendsGraphTraversalImpl.this.WalkBuilderwithGraphTraversalImpl.this.PathBuilder", "kind" : "class"}, {"label" : "WalkBuilder", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.WalkBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#WalkBuilderextendsGraphTraversalImpl.this.WalkBuilder", "kind" : "class"}, {"label" : "InnerNodeTraversalImpl", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.InnerNodeTraversalImpl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeTraversalImplextendsGraphTraversalImpl.this.TraverserInnerNodewithGraphTraversalImpl.this.InnerNodeState", "kind" : "trait"}, {"label" : "InnerNodeState", "tail" : "", "member" : "scalax.collection.State.InnerNodeState", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeStateextendsAnyRef", "kind" : "trait"}, {"label" : "Impl", "tail" : "", "member" : "scalax.collection.TraverserImpl.Impl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Impl[A,+This<:TraverserImpl.this.Traverser[A,This]withTraverserImpl.this.Impl[A,This]]extendsTraverserImpl.this.TraverserMethods[A,This]withTraverserImpl.this.Traverser[A,This]", "kind" : "trait"}, {"label" : "EdgeSet", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.EdgeSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeSetextendsAdjacencyListGraph.this.EdgeSetwithAdjacencyListGraph.this.EdgeSet", "kind" : "class"}, {"label" : "NodeSet", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.NodeSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeSetextendsAdjacencyListGraph.this.NodeSetwithAdjacencyListGraph.this.NodeSet", "kind" : "class"}, {"label" : "EdgeImpl", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.EdgeImpl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeImplextendsAdjacencyListGraph.this.EdgeBase", "kind" : "class"}, {"label" : "InnerNodeImpl", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.InnerNodeImpl", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeImplextendsAdjacencyListGraph.this.NodeBasewithAdjacencyListGraph.this.InnerNodewithAdjacencyListGraph.this.InnerNode", "kind" : "abstract class"}, {"label" : "InnerNode", "tail" : "", "member" : "scalax.collection.immutable.AdjacencyListBase.InnerNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeextendsAdjacencyListBase.this.InnerNode", "kind" : "trait"}, {"label" : "InnerNodeOps", "tail" : "", "member" : "scalax.collection.mutable.EdgeOps.InnerNodeOps", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNodeOpsextendsAnyRef", "kind" : "trait"}, {"label" : "EdgeBase", "tail" : "", "member" : "scalax.collection.GraphLike.EdgeBase", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeBaseextendsGraphPredef.InnerEdgeParam[N,E,GraphLike.this.NodeT,E]withGraphLike.this.InnerEdge", "kind" : "class"}, {"label" : "InnerEdge", "tail" : "", "member" : "scalax.collection.GraphLike.InnerEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerEdgeextendsGraphLike.this.InnerEdge", "kind" : "trait"}, {"label" : "Filter", "tail" : "", "member" : "scalax.collection.GraphDegree.Filter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Filter[T]extendsT=>Boolean", "kind" : "trait"}, {"label" : "DegreeFunction", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeFunction", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#DegreeFunctionextendsGraphDegree.this.NodeT=>Int", "kind" : "trait"}, {"label" : "DegreeOrdering", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#DegreeOrderingextendsOrdering[GraphDegree.this.NodeT]", "kind" : "final class"}, {"label" : "TraverserInnerNode", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserInnerNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#TraverserInnerNode", "kind" : "object"}, {"label" : "ExtendedNodeVisitor", "tail" : "", "member" : "scalax.collection.GraphTraversal.ExtendedNodeVisitor", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ExtendedNodeVisitor[U]extendsGraphTraversal.this.NodeT=>Uwith(GraphTraversal.this.NodeT,Int,Int,=>scalax.collection.GraphTraversal.NodeInformer)=>U", "kind" : "trait"}, {"label" : "Component", "tail" : "", "member" : "scalax.collection.GraphTraversal.Component", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ComponentextendsGraphTraversal.this.Properties", "kind" : "abstract class"}, {"label" : "LayeredTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.LayeredTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#LayeredTopologicalOrder[+A]extendsGraphTraversal.this.AbstractTopologicalOrder[A,(Int,Iterable[A])]", "kind" : "final class"}, {"label" : "Layer", "tail" : "", "member" : "scalax.collection.GraphTraversal.Layer", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#LayerextendsProductwithSerializable", "kind" : "case class"}, {"label" : "AbstractTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.AbstractTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#AbstractTopologicalOrder[+A<:<?>,+T]extendsAbstractTraversable[T]", "kind" : "sealed abstract class"}, {"label" : "TopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.TopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#TopologicalOrder[+A]extendsGraphTraversal.this.AbstractTopologicalOrder[A,A]", "kind" : "final class"}, {"label" : "SubgraphProperties", "tail" : "", "member" : "scalax.collection.GraphTraversal.SubgraphProperties", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#SubgraphPropertiesextendsAnyRef", "kind" : "trait"}, {"label" : "Properties", "tail" : "", "member" : "scalax.collection.GraphTraversal.Properties", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#PropertiesextendsGraphTraversal.this.SubgraphProperties", "kind" : "trait"}, {"label" : "Traverser", "tail" : "", "member" : "scalax.collection.GraphTraversal.Traverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Traverser[A,+This<:GraphTraversal.this.Traverser[A,This]]extendsGraphTraversal.this.TraverserMethods[A,This]withGraphTraversal.this.PropertieswithTraversable[A]", "kind" : "trait"}, {"label" : "Weight", "tail" : "", "member" : "scalax.collection.GraphTraversal.Weight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#WeightextendsAnyRef", "kind" : "class"}, {"label" : "FluentProperties", "tail" : "", "member" : "scalax.collection.GraphTraversal.FluentProperties", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#FluentProperties[+This<:GraphTraversal.this.FluentProperties[This]]extendsAnyRef", "kind" : "abstract class"}, {"label" : "TraverserMethods", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserMethods", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#TraverserMethods[A<:<?>,+This<:GraphTraversal.this.TraverserMethods[A,This]]extendsGraphTraversal.this.FluentProperties[This]", "kind" : "abstract class"}, {"label" : "TraverserInnerNode", "tail" : "", "member" : "scalax.collection.GraphTraversal.TraverserInnerNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#TraverserInnerNodeextendsGraphTraversal.this.InnerNode", "kind" : "trait"}, {"label" : "Walk", "tail" : "", "member" : "scalax.collection.GraphTraversal.Walk", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#WalkextendsTraversable[GraphTraversal.this.InnerElem]", "kind" : "trait"}, {"label" : "Path", "tail" : "", "member" : "scalax.collection.GraphTraversal.Path", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#PathextendsGraphTraversal.this.Walk", "kind" : "trait"}, {"label" : "Cycle", "tail" : "", "member" : "scalax.collection.GraphTraversal.Cycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#CycleextendsGraphTraversal.this.Path", "kind" : "trait"}, {"label" : "Edge", "tail" : "", "member" : "scalax.collection.GraphBase.Edge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Edge", "kind" : "object"}, {"label" : "InnerEdge", "tail" : "", "member" : "scalax.collection.GraphBase.InnerEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerEdge", "kind" : "object"}, {"label" : "NodeOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.NodeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeOrderingextendsOrdering[GraphBase.this.NodeT]withGraphBase.this.ElemOrdering", "kind" : "sealed trait"}, {"label" : "EdgeOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.EdgeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeOrderingextendsOrdering[GraphBase.this.EdgeT]withGraphBase.this.ElemOrdering", "kind" : "sealed trait"}, {"label" : "ElemOrdering", "tail" : "", "member" : "scalax.collection.GraphBase.ElemOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ElemOrderingextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Node", "tail" : "", "member" : "scalax.collection.GraphBase.Node", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Node", "kind" : "object"}, {"label" : "InnerNode", "tail" : "", "member" : "scalax.collection.GraphBase.InnerNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerNode", "kind" : "object"}, {"label" : "Edge", "tail" : "", "member" : "scalax.collection.GraphBase.Edge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeextendsSerializable", "kind" : "trait"}, {"label" : "InnerElem", "tail" : "", "member" : "scalax.collection.GraphBase.InnerElem", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#InnerElemextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Node", "tail" : "", "member" : "scalax.collection.GraphBase.Node", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeextendsSerializable", "kind" : "trait"}, {"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "hasCycle", "tail" : "(): Boolean", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraph.hasCycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#hasCycle():Boolean", "kind" : "def"}, {"label" : "loopNodes", "tail" : "(): Set[NodeBase]", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraph.loopNodes", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#loopNodes():scala.collection.mutable.Set[RuleDependencyGraph.this.NodeBase]", "kind" : "def"}, {"label" : "layers", "tail" : "(): Traversable[(Int, Iterable[Rule])]", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraph.layers", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#layers():Traversable[(Int,Iterable[org.apache.jena.reasoner.rulesys.Rule])]", "kind" : "def"}, {"label" : "printNodes", "tail" : "(): String", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraph.printNodes", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#printNodes():String", "kind" : "def"}, {"label" : "rules", "tail" : "(): Set[Rule]", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraph.rules", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#rules():Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.rules.RuleDependencyGraph#<init>", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.rules.RuleDependencyGraph#<init>", "error" : "unsupported entity"}, {"label" : "newNodeWithHints", "tail" : "(n: Rule, h: Hints): NodeBase", "member" : "scalax.collection.mutable.DefaultGraphImpl.newNodeWithHints", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newNodeWithHints(n:N,h:scalax.collection.mutable.ArraySet.Hints):DefaultGraphImpl.this.NodeBase", "kind" : "final def"}, {"label" : "NodeT", "tail" : "", "member" : "scalax.collection.mutable.DefaultGraphImpl.NodeT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeT=DefaultGraphImpl.this.NodeBase", "kind" : "type"}, {"label" : "clone", "tail" : "(): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.DefaultGraphImpl.clone", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#clone():DefaultGraphImpl.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.DefaultGraphImpl.empty", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#empty:scalax.collection.mutable.DefaultGraphImpl[N,E]", "kind" : "final def"}, {"label" : "newBuilder", "tail" : "(): GraphBuilder[Rule, LDiEdge, DefaultGraphImpl]", "member" : "scalax.collection.mutable.DefaultGraphImpl.newBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newBuilder:scalax.collection.mutable.GraphBuilder[N,E,scalax.collection.mutable.DefaultGraphImpl]", "kind" : "def"}, {"label" : "edges", "tail" : "(): EdgeSetT", "member" : "scalax.collection.mutable.DefaultGraphImpl.edges", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#edges:DefaultGraphImpl.this.EdgeSetT", "kind" : "final def"}, {"label" : "nodes", "tail" : "(): NodeSetT", "member" : "scalax.collection.mutable.DefaultGraphImpl.nodes", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodes:DefaultGraphImpl.this.NodeSetT", "kind" : "final def"}, {"label" : "newNodeSet", "tail" : "(): NodeSetT", "member" : "scalax.collection.mutable.DefaultGraphImpl.newNodeSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newNodeSet:DefaultGraphImpl.this.NodeSetT", "kind" : "final def"}, {"label" : "Config", "tail" : "", "member" : "scalax.collection.mutable.DefaultGraphImpl.Config", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Config=scalax.collection.mutable.DefaultGraphImpl.Config", "kind" : "type"}, {"label" : "graphCompanion", "tail" : ": DefaultGraphImpl.type", "member" : "scalax.collection.mutable.DefaultGraphImpl.graphCompanion", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#graphCompanion:scalax.collection.mutable.DefaultGraphImpl.type", "kind" : "final val"}, {"label" : "config", "tail" : ": scalax.collection.mutable.DefaultGraphImpl.Config with AdjacencyListArrayConfig", "member" : "scalax.collection.mutable.DefaultGraphImpl.config", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#config:scalax.collection.mutable.DefaultGraphImpl.Configwithscalax.collection.config.AdjacencyListArrayConfig", "kind" : "implicit val"}, {"label" : "edgeT", "tail" : ": ClassTag[LDiEdge[Rule]]", "member" : "scalax.collection.mutable.DefaultGraphImpl.edgeT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#edgeT:scala.reflect.ClassTag[E[N]]", "kind" : "implicit val"}, {"label" : "outerNodeDownUpTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterNodeDownUpTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#outerNodeDownUpTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterNodeDownUpTraverser", "kind" : "def"}, {"label" : "innerNodeDownUpTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerNodeDownUpTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerNodeDownUpTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#innerNodeDownUpTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerNodeDownUpTraverser", "kind" : "def"}, {"label" : "outerElemTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterElemTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#outerElemTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterElemTraverser", "kind" : "def"}, {"label" : "innerElemTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerElemTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerElemTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#innerElemTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerElemTraverser", "kind" : "def"}, {"label" : "outerEdgeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterEdgeTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#outerEdgeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterEdgeTraverser", "kind" : "def"}, {"label" : "innerEdgeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerEdgeTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerEdgeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#innerEdgeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerEdgeTraverser", "kind" : "def"}, {"label" : "outerNodeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): OuterNodeTraverser", "member" : "scalax.collection.GraphTraversalImpl.outerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#outerNodeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.OuterNodeTraverser", "kind" : "def"}, {"label" : "innerNodeTraverser", "tail" : "(root: NodeT, parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): InnerNodeTraverser", "member" : "scalax.collection.GraphTraversalImpl.innerNodeTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#innerNodeTraverser(root:GraphTraversalImpl.this.NodeT,parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.InnerNodeTraverser", "kind" : "def"}, {"label" : "strongComponentTraverser", "tail" : "(parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): StrongComponentTraverser", "member" : "scalax.collection.GraphTraversalImpl.strongComponentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#strongComponentTraverser(parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.StrongComponentTraverser", "kind" : "def"}, {"label" : "componentTraverser", "tail" : "(parameters: Parameters, subgraphNodes: NodeFilter, subgraphEdges: EdgeFilter, ordering: ElemOrdering, maxWeight: Option[Weight]): ComponentTraverser", "member" : "scalax.collection.GraphTraversalImpl.componentTraverser", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#componentTraverser(parameters:scalax.collection.GraphTraversal.Parameters,subgraphNodes:GraphTraversalImpl.this.NodeFilter,subgraphEdges:GraphTraversalImpl.this.EdgeFilter,ordering:GraphTraversalImpl.this.ElemOrdering,maxWeight:Option[GraphTraversalImpl.this.Weight]):GraphTraversalImpl.this.ComponentTraverser", "kind" : "def"}, {"label" : "forInDegrees", "tail" : "(traversable: Traversable[NodeT] with SubgraphProperties, maybeHandle: Option[Handle], includeAnyway: Option[NodeT], includeInDegree: NodeFilter, fillInDegrees: Boolean): TopoSortSetup", "member" : "scalax.collection.GraphTraversalImpl.forInDegrees", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#forInDegrees(traversable:Traversable[GraphTraversalImpl.this.NodeT]withGraphTraversalImpl.this.SubgraphProperties,maybeHandle:Option[scalax.collection.State.Handle],includeAnyway:Option[GraphTraversalImpl.this.NodeT],includeInDegree:GraphTraversalImpl.this.NodeFilter,fillInDegrees:Boolean):GraphTraversalImpl.this.TopoSortSetup", "kind" : "final def"}, {"label" : "TopoSortSetup", "tail" : "", "member" : "scalax.collection.GraphTraversalImpl.TopoSortSetup", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#TopoSortSetup=(scala.collection.mutable.Buffer[GraphTraversalImpl.this.NodeT],scala.collection.mutable.Map[GraphTraversalImpl.this.NodeT,Int],Option[GraphTraversalImpl.this.NodeT])", "kind" : "type"}, {"label" : "expectedMaxNodes", "tail" : "(divisor: Int, min: Int): Int", "member" : "scalax.collection.GraphTraversalImpl.expectedMaxNodes", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#expectedMaxNodes(divisor:Int,min:Int):Int", "kind" : "final def"}, {"label" : "newPathBuilder", "tail" : "(start: NodeT)(sizeHint: Int, edgeSelector: (NodeT, NodeT) ⇒ Option[EdgeT]): PathBuilder", "member" : "scalax.collection.GraphTraversalImpl.newPathBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newPathBuilder(start:GraphTraversalImpl.this.NodeT)(implicitsizeHint:Int,implicitedgeSelector:(GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.NodeT)=>Option[GraphTraversalImpl.this.EdgeT]):GraphTraversalImpl.this.PathBuilder", "kind" : "def"}, {"label" : "newWalkBuilder", "tail" : "(start: NodeT)(sizeHint: Int, edgeSelector: (NodeT, NodeT) ⇒ Option[EdgeT]): WalkBuilder", "member" : "scalax.collection.GraphTraversalImpl.newWalkBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newWalkBuilder(start:GraphTraversalImpl.this.NodeT)(implicitsizeHint:Int,implicitedgeSelector:(GraphTraversalImpl.this.NodeT,GraphTraversalImpl.this.NodeT)=>Option[GraphTraversalImpl.this.EdgeT]):GraphTraversalImpl.this.WalkBuilder", "kind" : "def"}, {"label" : "cycle", "tail" : "(results: Option[(NodeT, ArrayStack[CycleStackElem])], edgeFilter: EdgeFilter): Option[Cycle]", "member" : "scalax.collection.GraphTraversalImpl.cycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#cycle(results:Option[(GraphTraversalImpl.this.NodeT,scala.collection.mutable.ArrayStack[GraphTraversalImpl.this.Informer.CycleStackElem])],edgeFilter:GraphTraversalImpl.this.EdgeFilter):Option[GraphTraversalImpl.this.Cycle]", "kind" : "final def"}, {"label" : "cycle", "tail" : "(maybeStart: Option[NodeT], stack: ArrayStack[Element], edgeFilter: EdgeFilter): Option[Cycle]", "member" : "scalax.collection.GraphTraversalImpl.cycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#cycle(maybeStart:Option[GraphTraversalImpl.this.NodeT],stack:scala.collection.mutable.ArrayStack[GraphTraversalImpl.this.Informer.DfsInformer.Element],edgeFilter:GraphTraversalImpl.this.EdgeFilter):Option[GraphTraversalImpl.this.Cycle]", "kind" : "final def"}, {"label" : "clearNodeStates", "tail" : "(flags: FlagWord, flagsExt: ExtBitSet): Unit", "member" : "scalax.collection.State.clearNodeStates", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#clearNodeStates(flags:scalax.collection.State.FlagWord,flagsExt:scalax.collection.mutable.ExtBitSet):Unit", "kind" : "def"}, {"label" : "withHandles", "tail" : "(nr: Int, reuse: Array[Handle])(block: (Array[Handle]) ⇒ T): T", "member" : "scalax.collection.State.withHandles", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#withHandles[T](nr:Int,reuse:Array[scalax.collection.State.Handle])(block:Array[scalax.collection.State.Handle]=>T):T", "kind" : "def"}, {"label" : "withHandle", "tail" : "(reuse: Option[Handle])(block: (Handle) ⇒ T): T", "member" : "scalax.collection.State.withHandle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#withHandle[T](reuse:Option[scalax.collection.State.Handle])(block:scalax.collection.State.Handle=>T):T", "kind" : "def"}, {"label" : "releaseHandle", "tail" : "(handle: Handle): Unit", "member" : "scalax.collection.State.releaseHandle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#releaseHandle(handle:scalax.collection.State.Handle):Unit", "kind" : "def"}, {"label" : "nextHandle", "tail" : "(): Handle", "member" : "scalax.collection.State.nextHandle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nextHandle:scalax.collection.State.Handle", "kind" : "def"}, {"label" : "dumpDirty", "tail" : "(): ExtBitSet", "member" : "scalax.collection.State.dumpDirty", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#dumpDirty:scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "dumpInUse", "tail" : "(): ExtBitSet", "member" : "scalax.collection.State.dumpInUse", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#dumpInUse:scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "dump", "tail" : "(store: FlagStore): ExtBitSet", "member" : "scalax.collection.State.dump", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#dump(store:scalax.collection.State.FlagStore):scalax.collection.mutable.ExtBitSet", "kind" : "def"}, {"label" : "upsert", "tail" : "(edge: LDiEdge[Rule]): Boolean", "member" : "scalax.collection.mutable.AdjacencyListGraph.upsert", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#upsert(edge:E[N]):Boolean", "kind" : "final def"}, {"label" : "+=#", "tail" : "(edge: LDiEdge[Rule]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.AdjacencyListGraph.+=#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+=#(edge:E[N]):AdjacencyListGraph.this.type", "kind" : "final def"}, {"label" : "add", "tail" : "(edge: LDiEdge[Rule]): Boolean", "member" : "scalax.collection.mutable.AdjacencyListGraph.add", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#add(edge:E[N]):Boolean", "kind" : "final def"}, {"label" : "add", "tail" : "(node: Rule): Boolean", "member" : "scalax.collection.mutable.AdjacencyListGraph.add", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#add(node:N):Boolean", "kind" : "final def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scalax.collection.mutable.AdjacencyListGraph.clear", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#clear():Unit", "kind" : "final def"}, {"label" : "EdgeSetT", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.EdgeSetT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeSetT=AdjacencyListGraph.this.EdgeSet", "kind" : "type"}, {"label" : "newEdge", "tail" : "(innerEdge: LDiEdge[NodeT]): EdgeT", "member" : "scalax.collection.mutable.AdjacencyListGraph.newEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newEdge(innerEdge:E[AdjacencyListGraph.this.NodeT]):AdjacencyListGraph.this.EdgeT", "kind" : "final def"}, {"label" : "newEdgeTArray", "tail" : "(size: Int): Array[EdgeT]", "member" : "scalax.collection.mutable.AdjacencyListGraph.newEdgeTArray", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newEdgeTArray(size:Int):Array[AdjacencyListGraph.this.EdgeT]", "kind" : "final def"}, {"label" : "NodeSetT", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.NodeSetT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeSetT=AdjacencyListGraph.this.NodeSet", "kind" : "type"}, {"label" : "EdgeT", "tail" : "", "member" : "scalax.collection.mutable.AdjacencyListGraph.EdgeT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeT=AdjacencyListGraph.this.EdgeImpl", "kind" : "type"}, {"label" : "initializeFrom", "tail" : "(in: ObjectInputStream, nodes: NodeSetT, edges: EdgeSetT): Unit", "member" : "scalax.collection.immutable.AdjacencyListBase.initializeFrom", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#initializeFrom(in:java.io.ObjectInputStream,nodes:AdjacencyListBase.this.NodeSetT,edges:AdjacencyListBase.this.EdgeSetT):Unit", "kind" : "def"}, {"label" : "serializeTo", "tail" : "(out: ObjectOutputStream): Unit", "member" : "scalax.collection.immutable.AdjacencyListBase.serializeTo", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#serializeTo(out:java.io.ObjectOutputStream):Unit", "kind" : "final def"}, {"label" : "edgeIterator", "tail" : "(): GroupIterator[EdgeT] { ... \/* 2 definitions in type refinement *\/ }", "member" : "scalax.collection.immutable.AdjacencyListBase.edgeIterator", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#edgeIterator:scalax.collection.generic.GroupIterator[AdjacencyListBase.this.EdgeT]{objectOuter;objectInner}", "kind" : "def"}, {"label" : "newNode", "tail" : "(n: Rule): NodeT", "member" : "scalax.collection.immutable.AdjacencyListBase.newNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#newNode(n:N):AdjacencyListBase.this.NodeT", "kind" : "final def"}, {"label" : "--!=", "tail" : "(coll: Iterable[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.--!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#--!=(coll:Iterable[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "final def"}, {"label" : "&=", "tail" : "(coll: Iterable[Param[Rule, LDiEdge]]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.&=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#&=(coll:Iterable[scalax.collection.GraphPredef.Param[N,E]]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "def"}, {"label" : "-!=", "tail" : "(elem: Param[Rule, LDiEdge]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-!=(elem:scalax.collection.GraphPredef.Param[N,E]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "def"}, {"label" : "-=", "tail" : "(elem: Param[Rule, LDiEdge]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-=(elem:scalax.collection.GraphPredef.Param[N,E]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "def"}, {"label" : "removeWithNodes", "tail" : "(edge: LDiEdge[Rule]): Boolean", "member" : "scalax.collection.mutable.GraphLike.removeWithNodes", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#removeWithNodes(edge:E[N]):Boolean", "kind" : "final def"}, {"label" : "-!#", "tail" : "(edge: LDiEdge[Rule]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-!#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-!#(edge:E[N]):This[N,E]", "kind" : "final def"}, {"label" : "-#", "tail" : "(edge: LDiEdge[Rule]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-#(edge:E[N]):This[N,E]", "kind" : "final def"}, {"label" : "-!", "tail" : "(edge: LDiEdge[Rule]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-!", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-!(edge:E[N]):This[N,E]", "kind" : "final def"}, {"label" : "-!=#", "tail" : "(edge: LDiEdge[Rule]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-!=#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-!=#(edge:E[N]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "final def"}, {"label" : "-=#", "tail" : "(edge: LDiEdge[Rule]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-=#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-=#(edge:E[N]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "final def"}, {"label" : "remove", "tail" : "(edge: LDiEdge[Rule]): Boolean", "member" : "scalax.collection.mutable.GraphLike.remove", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#remove(edge:E[N]):Boolean", "kind" : "final def"}, {"label" : "-", "tail" : "(edge: LDiEdge[Rule]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-(edge:E[N]):This[N,E]", "kind" : "final def"}, {"label" : "removeGently", "tail" : "(node: Rule): Boolean", "member" : "scalax.collection.mutable.GraphLike.removeGently", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#removeGently(node:N):Boolean", "kind" : "final def"}, {"label" : "-?", "tail" : "(node: Rule): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-?", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-?(node:N):This[N,E]", "kind" : "final def"}, {"label" : "-?=", "tail" : "(node: Rule): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-?=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-?=(node:N):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "final def"}, {"label" : "-=", "tail" : "(node: Rule): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.-=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-=(node:N):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "final def"}, {"label" : "remove", "tail" : "(node: Rule): Boolean", "member" : "scalax.collection.mutable.GraphLike.remove", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#remove(node:N):Boolean", "kind" : "final def"}, {"label" : "-", "tail" : "(node: Rule): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.-", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-(node:N):This[N,E]", "kind" : "final def"}, {"label" : "+=", "tail" : "(elem: Param[Rule, LDiEdge]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+=(elem:scalax.collection.GraphPredef.Param[N,E]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "def"}, {"label" : "+#", "tail" : "(edge: LDiEdge[Rule]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.+#", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+#(edge:E[N]):This[N,E]", "kind" : "final def"}, {"label" : "addAndGet", "tail" : "(edge: LDiEdge[Rule]): EdgeT", "member" : "scalax.collection.mutable.GraphLike.addAndGet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGet(edge:E[N]):GraphLike.this.EdgeT", "kind" : "final def"}, {"label" : "+=", "tail" : "(node: Rule): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+=(node:N):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "final def"}, {"label" : "+", "tail" : "(node: Rule): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.mutable.GraphLike.+", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+(node:N):This[N,E]", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(node: Rule): NodeT", "member" : "scalax.collection.mutable.GraphLike.addAndGet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGet(node:N):GraphLike.this.NodeT", "kind" : "final def"}, {"label" : "++=", "tail" : "(xs: TraversableOnce[Param[Rule, LDiEdge]]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.GraphLike.++=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#++=(xs:TraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):scalax.collection.mutable.GraphLike.<refinement>.type", "kind" : "def"}, {"label" : "nodesToCEdgeCont", "tail" : "(factory: CHyperEdgeCompanion[EE], attrib: Product, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToCEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToCEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.CBase.CHyperEdgeBound[_,EE]](factory:scalax.collection.edge.CBase.CHyperEdgeCompanion[EE],attrib:Product,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToCEdgeCont", "tail" : "(factory: CEdgeCompanion[EE], attrib: Product, node_1: Rule, node_2: Rule): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToCEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToCEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.CBase.CEdgeBound[_,EE]](factory:scalax.collection.edge.CBase.CEdgeCompanion[EE],attrib:Product,node_1:N,node_2:N):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToWLEdgeCont", "tail" : "(factory: WLEdgeCompanion[EE], weight: Double, label: L, node_1: Rule, node_2: Rule): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToWLEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWLEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLEdgeBound[_,EE],L](factory:scalax.collection.edge.WLBase.WLEdgeCompanion[EE],weight:Double,label:L,node_1:N,node_2:N):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToWLEdgeCont", "tail" : "(factory: WLHyperEdgeCompanion[EE], weight: Double, label: L, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToWLEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWLEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLHyperEdgeBound[_,EE],L](factory:scalax.collection.edge.WLBase.WLHyperEdgeCompanion[EE],weight:Double,label:L,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToLEdgeCont", "tail" : "(factory: LEdgeCompanion[EE], label: L, node_1: Rule, node_2: Rule): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToLEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToLEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LEdgeBound[_,EE],L](factory:scalax.collection.edge.LBase.LEdgeCompanion[EE],label:L,node_1:N,node_2:N):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToLEdgeCont", "tail" : "(factory: LHyperEdgeCompanion[EE], label: L, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToLEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToLEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LHyperEdgeBound[_,EE],L](factory:scalax.collection.edge.LBase.LHyperEdgeCompanion[EE],label:L,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToWEdgeCont", "tail" : "(factory: WEdgeCompanion[EE], weight: Double, node_1: Rule, node_2: Rule): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToWEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WEdgeBound[_,EE]](factory:scalax.collection.edge.WBase.WEdgeCompanion[EE],weight:Double,node_1:N,node_2:N):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToWEdgeCont", "tail" : "(factory: WHyperEdgeCompanion[EE], weight: Double, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToWEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWEdgeCont[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WHyperEdgeBound[_,EE]](factory:scalax.collection.edge.WBase.WHyperEdgeCompanion[EE],weight:Double,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToEdgeCont", "tail" : "(factory: EdgeCompanion[LDiEdge], node_1: Rule, node_2: Rule): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToEdgeCont(factory:scalax.collection.GraphEdge.EdgeCompanion[E],node_1:N,node_2:N):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToEdgeCont", "tail" : "(factory: HyperEdgeCompanion[LDiEdge], node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): LDiEdge[NodeT]", "member" : "scalax.collection.mutable.EdgeOps.nodesToEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToEdgeCont(factory:scalax.collection.GraphEdge.HyperEdgeCompanion[E],node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):E[EdgeOps.this.NodeT]", "kind" : "def"}, {"label" : "nodesToWLEdge", "tail" : "(edgeFactory: WLHyperEdgeCompanion[EE], weight: Double, label: L, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLHyperEdgeBound[_,EE],L](edgeFactory:scalax.collection.edge.WLBase.WLHyperEdgeCompanion[EE],weight:Double,label:L,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToWLEdge", "tail" : "(edgeFactory: WLEdgeCompanion[EE], weight: Double, label: L, node_1: Rule, node_2: Rule): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLEdgeBound[_,EE],L](edgeFactory:scalax.collection.edge.WLBase.WLEdgeCompanion[EE],weight:Double,label:L,node_1:N,node_2:N):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToLEdge", "tail" : "(edgeFactory: LHyperEdgeCompanion[EE], label: L, node_1: Rule, node_2: Rule, nodes: Rule*): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LHyperEdgeBound[_,EE],L](edgeFactory:scalax.collection.edge.LBase.LHyperEdgeCompanion[EE],label:L,node_1:N,node_2:N,nodes:N*):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToLEdge", "tail" : "(edgeFactory: LEdgeCompanion[EE], label: L, node_1: Rule, node_2: Rule): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LEdgeBound[_,EE],L](edgeFactory:scalax.collection.edge.LBase.LEdgeCompanion[EE],label:L,node_1:N,node_2:N):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToWEdge", "tail" : "(edgeFactory: WHyperEdgeCompanion[EE], weight: Double, node_1: Rule, node_2: Rule, nodes: Rule*)(kind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WHyperEdgeBound[_,EE]](edgeFactory:scalax.collection.edge.WBase.WHyperEdgeCompanion[EE],weight:Double,node_1:N,node_2:N,nodes:N*)(implicitkind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToWEdge", "tail" : "(edgeFactory: WEdgeCompanion[EE], weight: Double, node_1: Rule, node_2: Rule): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WEdgeBound[_,EE]](edgeFactory:scalax.collection.edge.WBase.WEdgeCompanion[EE],weight:Double,node_1:N,node_2:N):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToEdge", "tail" : "(edgeFactory: HyperEdgeCompanion[LDiEdge], node_1: Rule, node_2: Rule, nodes: Rule*)(endpointsKind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToEdge(edgeFactory:scalax.collection.GraphEdge.HyperEdgeCompanion[E],node_1:N,node_2:N,nodes:N*)(implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "nodesToEdge", "tail" : "(edgeFactory: EdgeCompanion[LDiEdge], node_1: Rule, node_2: Rule): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.nodesToEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nodesToEdge(edgeFactory:scalax.collection.GraphEdge.EdgeCompanion[E],node_1:N,node_2:N):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "addAndGetWLEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double, label: L)(edgeFactory: WLHyperEdgeCompanion[EE], endpointsKind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "def"}, {"label" : "+~%+=", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double, label: L)(edgeFactory: WLHyperEdgeCompanion[EE], endpointsKind: CollectionKind): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~%+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~%+=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addWLEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double, label: L)(edgeFactory: WLHyperEdgeCompanion[EE], endpointsKind: CollectionKind): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):Boolean", "kind" : "final def"}, {"label" : "addAndGetWLEdge", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double, label: L)(edgeFactory: WLEdgeCompanion[EE]): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLEdgeBound[_,EE],L](node_1:N,node_2:N)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLEdgeCompanion[EE]):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "+~%+=", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double, label: L)(edgeFactory: WLEdgeCompanion[EE]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~%+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~%+=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLEdgeBound[_,EE],L](node_1:N,node_2:N)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLEdgeCompanion[EE]):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addWLEdge", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double, label: L)(edgeFactory: WLEdgeCompanion[EE]): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addWLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addWLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WLBase.WLEdgeBound[_,EE],L](node_1:N,node_2:N)(weight:Double,label:L)(implicitedgeFactory:scalax.collection.edge.WLBase.WLEdgeCompanion[EE]):Boolean", "kind" : "final def"}, {"label" : "addAndGetLEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(label: L)(edgeFactory: LHyperEdgeCompanion[EE]): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LHyperEdgeCompanion[EE]):EdgeOps.this.EdgeT", "kind" : "def"}, {"label" : "+~+=", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(label: L)(edgeFactory: LHyperEdgeCompanion[EE]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~+=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LHyperEdgeCompanion[EE]):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addLEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(label: L)(edgeFactory: LHyperEdgeCompanion[EE]): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LHyperEdgeBound[_,EE],L](node_1:N,node_2:N,nodes:N*)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LHyperEdgeCompanion[EE]):Boolean", "kind" : "final def"}, {"label" : "addAndGetLEdge", "tail" : "(node_1: Rule, node_2: Rule)(label: L)(edgeFactory: LEdgeCompanion[EE]): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LEdgeBound[_,EE],L](node_1:N,node_2:N)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LEdgeCompanion[EE]):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "+~+=", "tail" : "(node_1: Rule, node_2: Rule)(label: L)(edgeFactory: LEdgeCompanion[EE]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~+=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LEdgeBound[_,EE],L](node_1:N,node_2:N)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LEdgeCompanion[EE]):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addLEdge", "tail" : "(node_1: Rule, node_2: Rule)(label: L)(edgeFactory: LEdgeCompanion[EE]): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addLEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addLEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.LBase.LEdgeBound[_,EE],L](node_1:N,node_2:N)(label:L)(implicitedgeFactory:scalax.collection.edge.LBase.LEdgeCompanion[EE]):Boolean", "kind" : "final def"}, {"label" : "addAndGetWEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double)(edgeFactory: WHyperEdgeCompanion[EE], endpointsKind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WHyperEdgeBound[_,EE]](node_1:N,node_2:N,nodes:N*)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "def"}, {"label" : "+~%=", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double)(edgeFactory: WHyperEdgeCompanion[EE], endpointsKind: CollectionKind): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~%=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~%=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WHyperEdgeBound[_,EE]](node_1:N,node_2:N,nodes:N*)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addWEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(weight: Double)(edgeFactory: WHyperEdgeCompanion[EE], endpointsKind: CollectionKind): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WHyperEdgeBound[_,EE]](node_1:N,node_2:N,nodes:N*)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WHyperEdgeCompanion[EE],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):Boolean", "kind" : "final def"}, {"label" : "addAndGetWEdge", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double)(edgeFactory: WEdgeCompanion[EE]): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WEdgeBound[_,EE]](node_1:N,node_2:N)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WEdgeCompanion[EE]):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "+~%=", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double)(edgeFactory: WEdgeCompanion[EE]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~%=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~%=[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WEdgeBound[_,EE]](node_1:N,node_2:N)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WEdgeCompanion[EE]):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addWEdge", "tail" : "(node_1: Rule, node_2: Rule)(weight: Double)(edgeFactory: WEdgeCompanion[EE]): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addWEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addWEdge[EE[X<:<?>]<:E[X]withscalax.collection.GraphPredef.EdgeLikeIn[X]withscalax.collection.edge.WBase.WEdgeBound[_,EE]](node_1:N,node_2:N)(weight:Double)(implicitedgeFactory:scalax.collection.edge.WBase.WEdgeCompanion[EE]):Boolean", "kind" : "final def"}, {"label" : "addAndGetEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(edgeFactory: HyperEdgeCompanion[LDiEdge], endpointsKind: CollectionKind): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetEdge(node_1:N,node_2:N,nodes:N*)(implicitedgeFactory:scalax.collection.GraphEdge.HyperEdgeCompanion[E],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.EdgeT", "kind" : "def"}, {"label" : "+~=", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(edgeFactory: HyperEdgeCompanion[LDiEdge], endpointsKind: CollectionKind): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~=(node_1:N,node_2:N,nodes:N*)(implicitedgeFactory:scalax.collection.GraphEdge.HyperEdgeCompanion[E],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addEdge", "tail" : "(node_1: Rule, node_2: Rule, nodes: Rule*)(edgeFactory: HyperEdgeCompanion[LDiEdge], endpointsKind: CollectionKind): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addEdge(node_1:N,node_2:N,nodes:N*)(implicitedgeFactory:scalax.collection.GraphEdge.HyperEdgeCompanion[E],implicitendpointsKind:scalax.collection.GraphEdge.CollectionKind):Boolean", "kind" : "final def"}, {"label" : "addAndGetEdge", "tail" : "(node_1: Rule, node_2: Rule)(edgeFactory: EdgeCompanion[LDiEdge]): EdgeT", "member" : "scalax.collection.mutable.EdgeOps.addAndGetEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addAndGetEdge(node_1:N,node_2:N)(implicitedgeFactory:scalax.collection.GraphEdge.EdgeCompanion[E]):EdgeOps.this.EdgeT", "kind" : "final def"}, {"label" : "+~=", "tail" : "(node_1: Rule, node_2: Rule)(edgeFactory: EdgeCompanion[LDiEdge]): RuleDependencyGraph.this.type", "member" : "scalax.collection.mutable.EdgeOps.+~=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+~=(node_1:N,node_2:N)(implicitedgeFactory:scalax.collection.GraphEdge.EdgeCompanion[E]):EdgeOps.this.type", "kind" : "final def"}, {"label" : "addEdge", "tail" : "(node_1: Rule, node_2: Rule)(edgeFactory: EdgeCompanion[LDiEdge]): Boolean", "member" : "scalax.collection.mutable.EdgeOps.addEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addEdge(node_1:N,node_2:N)(implicitedgeFactory:scalax.collection.GraphEdge.EdgeCompanion[E]):Boolean", "kind" : "final def"}, {"label" : "--=", "tail" : "(xs: TraversableOnce[Param[Rule, LDiEdge]]): RuleDependencyGraph.this.type", "member" : "scala.collection.generic.Shrinkable.--=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#--=(xs:scala.collection.TraversableOnce[A]):Shrinkable.this.type", "kind" : "def"}, {"label" : "-=", "tail" : "(elem1: Param[Rule, LDiEdge], elem2: Param[Rule, LDiEdge], elems: Param[Rule, LDiEdge]*): RuleDependencyGraph.this.type", "member" : "scala.collection.generic.Shrinkable.-=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-=(elem1:A,elem2:A,elems:A*):Shrinkable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem1: Param[Rule, LDiEdge], elem2: Param[Rule, LDiEdge], elems: Param[Rule, LDiEdge]*): RuleDependencyGraph.this.type", "member" : "scala.collection.generic.Growable.+=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+=(elem1:A,elem2:A,elems:A*):Growable.this.type", "kind" : "def"}, {"label" : "having", "tail" : "(node: NodeFilter, edge: EdgeFilter): PartialFunction[Param[Rule, LDiEdge], Boolean]", "member" : "scalax.collection.GraphLike.having", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#having(node:GraphLike.this.NodeFilter,edge:GraphLike.this.EdgeFilter):PartialFunction[scalax.collection.GraphPredef.Param[N,E],Boolean]", "kind" : "def"}, {"label" : "--!", "tail" : "(elems: GenTraversableOnce[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.--!", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#--!(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "-!", "tail" : "(elem: Param[Rule, LDiEdge]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.-!", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-!(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "-", "tail" : "(elem: Param[Rule, LDiEdge]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.-", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "minusMinusNodesEdges", "tail" : "(delNodes: Traversable[Rule], delEdges: Traversable[LDiEdge[Rule]]): (Set[Rule], Set[LDiEdge[Rule]])", "member" : "scalax.collection.GraphLike.minusMinusNodesEdges", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#minusMinusNodesEdges(delNodes:Traversable[N],delEdges:Traversable[E[N]]):(scala.collection.immutable.Set[N],scala.collection.immutable.Set[E[N]])", "kind" : "def"}, {"label" : "minusMinus", "tail" : "(delNodes: Traversable[Rule], delEdges: Traversable[LDiEdge[Rule]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.minusMinus", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#minusMinus(delNodes:Traversable[N],delEdges:Traversable[E[N]]):This[N,E]", "kind" : "def"}, {"label" : "plusPlus", "tail" : "(newNodes: Traversable[Rule], newEdges: Traversable[LDiEdge[Rule]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.plusPlus", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#plusPlus(newNodes:Traversable[N],newEdges:Traversable[E[N]]):This[N,E]", "kind" : "def"}, {"label" : "partition", "tail" : "(elems: GenTraversableOnce[Param[Rule, LDiEdge]]): Partitions[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.partition", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#partition(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):scalax.collection.GraphPredef.Param.Partitions[N,E]", "kind" : "final def"}, {"label" : "bulkOp", "tail" : "(elems: GenTraversableOnce[Param[Rule, LDiEdge]], isPlusPlus: Boolean): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.bulkOp", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#bulkOp(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]],isPlusPlus:Boolean):This[N,E]", "kind" : "final def"}, {"label" : "--", "tail" : "(elems: GenTraversableOnce[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.--", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#--(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "++", "tail" : "(elems: GenTraversableOnce[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.++", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#++(elems:scala.collection.GenTraversableOnce[scalax.collection.GraphPredef.Param[N,E]]):This[N,E]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: Param[Rule, LDiEdge]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scalax.collection.GraphLike.+", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+(elem:scalax.collection.GraphPredef.Param[N,E]):This[N,E]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(outerEdge: LDiEdge[Rule], default: EdgeT): EdgeT", "member" : "scalax.collection.GraphLike.getOrElse", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#getOrElse(outerEdge:E[N],default:GraphLike.this.EdgeT):GraphLike.this.EdgeT", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(outerNode: Rule, default: NodeT): NodeT", "member" : "scalax.collection.GraphLike.getOrElse", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#getOrElse(outerNode:N,default:GraphLike.this.NodeT):GraphLike.this.NodeT", "kind" : "final def"}, {"label" : "get", "tail" : "(outerEdge: LDiEdge[Rule]): EdgeT", "member" : "scalax.collection.GraphLike.get", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#get(outerEdge:E[N]):GraphLike.this.EdgeT", "kind" : "final def"}, {"label" : "get", "tail" : "(outerNode: Rule): NodeT", "member" : "scalax.collection.GraphLike.get", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#get(outerNode:N):GraphLike.this.NodeT", "kind" : "final def"}, {"label" : "find", "tail" : "(outerEdge: LDiEdge[Rule]): Option[EdgeT]", "member" : "scalax.collection.GraphLike.find", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#find(outerEdge:E[N]):Option[GraphLike.this.EdgeT]", "kind" : "final def"}, {"label" : "find", "tail" : "(outerNode: Rule): Option[NodeT]", "member" : "scalax.collection.GraphLike.find", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#find(outerNode:N):Option[GraphLike.this.NodeT]", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[Param[Rule, LDiEdge]]", "member" : "scalax.collection.GraphLike.iterator", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#iterator:Iterator[scalax.collection.GraphPredef.Param[N,E]]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Param[Rule, LDiEdge]): Boolean", "member" : "scalax.collection.GraphLike.contains", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#contains(elem:scalax.collection.GraphPredef.Param[N,E]):Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scalax.collection.GraphLike.equals", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "toSortedString", "tail" : "(nodeSeparator: String, edgeSeparator: String, nodesEdgesSeparator: String, withNodesEdgesPrefix: Boolean)(ordNode: NodeOrdering, ordEdge: EdgeOrdering): String", "member" : "scalax.collection.GraphLike.toSortedString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toSortedString(nodeSeparator:String,edgeSeparator:String,nodesEdgesSeparator:String,withNodesEdgesPrefix:Boolean)(implicitordNode:GraphLike.this.NodeOrdering,implicitordEdge:GraphLike.this.EdgeOrdering):String", "kind" : "def"}, {"label" : "asSortedString", "tail" : "(nodeSeparator: String, edgeSeparator: String, nodesEdgesSeparator: String, withNodesEdgesPrefix: Boolean)(ordNode: NodeOrdering, ordEdge: EdgeOrdering): String", "member" : "scalax.collection.GraphLike.asSortedString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#asSortedString(nodeSeparator:String,edgeSeparator:String,nodesEdgesSeparator:String,withNodesEdgesPrefix:Boolean)(implicitordNode:GraphLike.this.NodeOrdering,implicitordEdge:GraphLike.this.EdgeOrdering):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scalax.collection.GraphLike.toString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scalax.collection.GraphLike.stringPrefix", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#stringPrefix:String", "kind" : "def"}, {"label" : "isMultiT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isMultiT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isMultiT:Boolean", "kind" : "final val"}, {"label" : "isMulti", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isMulti", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isMulti:Boolean", "kind" : "def"}, {"label" : "isMixed", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isMixed", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isMixed:Boolean", "kind" : "def"}, {"label" : "isHyperT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isHyperT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isHyperT:Boolean", "kind" : "final val"}, {"label" : "isHyper", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isHyper", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isHyper:Boolean", "kind" : "def"}, {"label" : "isDirectedT", "tail" : ": Boolean", "member" : "scalax.collection.GraphLike.isDirectedT", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isDirectedT:Boolean", "kind" : "final val"}, {"label" : "isDirected", "tail" : "(): Boolean", "member" : "scalax.collection.GraphLike.isDirected", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isDirected:Boolean", "kind" : "def"}, {"label" : "ThisGraph", "tail" : "", "member" : "scalax.collection.GraphLike.ThisGraph", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ThisGraph=scalax.collection.GraphLike.<refinement>.type", "kind" : "type"}, {"label" : "degreeCount", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedMap[Int, Int]", "member" : "scalax.collection.GraphDegree.degreeCount", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#degreeCount(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedMap[Int,Int]", "kind" : "def"}, {"label" : "degreeNodesMap", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedMap[Int, AnySet[NodeT]]", "member" : "scalax.collection.GraphDegree.degreeNodesMap", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#degreeNodesMap(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedMap[Int,scalax.collection.AnySet[GraphDegree.this.NodeT]]", "kind" : "def"}, {"label" : "degreeNodeSeq", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Seq[DegreeNodeSeqEntry]", "member" : "scalax.collection.GraphDegree.degreeNodeSeq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#degreeNodeSeq(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Seq[GraphDegree.this.DegreeNodeSeqEntry]", "kind" : "def"}, {"label" : "DegreeNodeSeqEntry", "tail" : "", "member" : "scalax.collection.GraphDegree.DegreeNodeSeqEntry", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#DegreeNodeSeqEntry=(Int,GraphDegree.this.NodeT)", "kind" : "type"}, {"label" : "degreeSet", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): SortedSet[Int]", "member" : "scalax.collection.GraphDegree.degreeSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#degreeSet(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):scala.collection.SortedSet[Int]", "kind" : "def"}, {"label" : "degreeSeq", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Seq[Int]", "member" : "scalax.collection.GraphDegree.degreeSeq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#degreeSeq(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Seq[Int]", "kind" : "def"}, {"label" : "maxDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.maxDegree", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#maxDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "minDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.minDegree", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#minDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "totalDegree", "tail" : "(nodeDegree: DegreeFunction, degreeFilter: (Int) ⇒ Boolean): Int", "member" : "scalax.collection.GraphDegree.totalDegree", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#totalDegree(implicitnodeDegree:GraphDegree.this.DegreeFunction,implicitdegreeFilter:Int=>Boolean):Int", "kind" : "def"}, {"label" : "anyEdgeSelector", "tail" : "(from: NodeT, to: NodeT): Option[EdgeT]", "member" : "scalax.collection.GraphTraversal.anyEdgeSelector", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#anyEdgeSelector(from:GraphTraversal.this.NodeT,to:GraphTraversal.this.NodeT):Option[GraphTraversal.this.EdgeT]", "kind" : "final def"}, {"label" : "isComplete", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isComplete", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isComplete:Boolean", "kind" : "def"}, {"label" : "defaultPathSize", "tail" : "(): Int", "member" : "scalax.collection.GraphTraversal.defaultPathSize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#defaultPathSize:Int", "kind" : "final def"}, {"label" : "topologicalSortByComponent", "tail" : "(visitor: (InnerElem) ⇒ U): Traversable[CycleNodeOrTopologicalOrder]", "member" : "scalax.collection.GraphTraversal.topologicalSortByComponent", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#topologicalSortByComponent[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):Traversable[GraphTraversal.this.CycleNodeOrTopologicalOrder]", "kind" : "final def"}, {"label" : "topologicalSort", "tail" : "(visitor: (InnerElem) ⇒ U): CycleNodeOrTopologicalOrder", "member" : "scalax.collection.GraphTraversal.topologicalSort", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#topologicalSort[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):GraphTraversal.this.CycleNodeOrTopologicalOrder", "kind" : "final def"}, {"label" : "findCycleContaining", "tail" : "(node: NodeT)(visitor: (InnerElem) ⇒ U): Option[Cycle]", "member" : "scalax.collection.GraphTraversal.findCycleContaining", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#findCycleContaining[U](node:GraphTraversal.this.NodeT)(implicitvisitor:GraphTraversal.this.InnerElem=>U):Option[GraphTraversal.this.Cycle]", "kind" : "final def"}, {"label" : "Layers", "tail" : "", "member" : "scalax.collection.GraphTraversal.Layers", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Layers=Traversable[GraphTraversal.this.Layer]", "kind" : "type"}, {"label" : "CycleNodeOrTopologicalOrder", "tail" : "", "member" : "scalax.collection.GraphTraversal.CycleNodeOrTopologicalOrder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#CycleNodeOrTopologicalOrder=Either[GraphTraversal.this.NodeT,GraphTraversal.this.TopologicalOrder[GraphTraversal.this.NodeT]]", "kind" : "type"}, {"label" : "findCycle", "tail" : "(visitor: (InnerElem) ⇒ U): Option[Cycle]", "member" : "scalax.collection.GraphTraversal.findCycle", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#findCycle[U](implicitvisitor:GraphTraversal.this.InnerElem=>U):Option[GraphTraversal.this.Cycle]", "kind" : "final def"}, {"label" : "isAcyclic", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isAcyclic", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isAcyclic:Boolean", "kind" : "final def"}, {"label" : "isCyclic", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isCyclic", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isCyclic:Boolean", "kind" : "final def"}, {"label" : "isConnected", "tail" : "(): Boolean", "member" : "scalax.collection.GraphTraversal.isConnected", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isConnected:Boolean", "kind" : "def"}, {"label" : "totalWeight", "tail" : "(): Double", "member" : "scalax.collection.GraphBase.totalWeight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#totalWeight:Double", "kind" : "def"}, {"label" : "defaultEdgeOrdering", "tail" : ": EdgeOrdering", "member" : "scalax.collection.GraphBase.defaultEdgeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#defaultEdgeOrdering:GraphBase.this.EdgeOrdering", "kind" : "final lazy val"}, {"label" : "edgeToEdgeCont", "tail" : "(e: LDiEdge[Rule]): LDiEdge[NodeT]", "member" : "scalax.collection.GraphBase.edgeToEdgeCont", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#edgeToEdgeCont(e:E[N]):E[GraphBase.this.NodeT]", "kind" : "implicit final def"}, {"label" : "defaultNodeOrdering", "tail" : ": NodeOrdering", "member" : "scalax.collection.GraphBase.defaultNodeOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#defaultNodeOrdering:GraphBase.this.NodeOrdering", "kind" : "final lazy val"}, {"label" : "anyOrdering", "tail" : ": AnyOrdering[Rule]", "member" : "scalax.collection.GraphBase.anyOrdering", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#anyOrdering:scalax.collection.generic.AnyOrdering[N]", "kind" : "final lazy val"}, {"label" : "isCustomEdgeFilter", "tail" : "(f: EdgeFilter): Boolean", "member" : "scalax.collection.GraphBase.isCustomEdgeFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isCustomEdgeFilter(f:GraphBase.this.EdgeFilter):Boolean", "kind" : "final def"}, {"label" : "isCustomNodeFilter", "tail" : "(f: NodeFilter): Boolean", "member" : "scalax.collection.GraphBase.isCustomNodeFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isCustomNodeFilter(f:GraphBase.this.NodeFilter):Boolean", "kind" : "final def"}, {"label" : "anyEdge", "tail" : ": EdgeFilter", "member" : "scalax.collection.GraphBase.anyEdge", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#anyEdge:GraphBase.this.EdgeFilter", "kind" : "final val"}, {"label" : "noNode", "tail" : ": NodeFilter", "member" : "scalax.collection.GraphBase.noNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#noNode:GraphBase.this.NodeFilter", "kind" : "final val"}, {"label" : "anyNode", "tail" : ": NodeFilter", "member" : "scalax.collection.GraphBase.anyNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#anyNode:GraphBase.this.NodeFilter", "kind" : "final val"}, {"label" : "EdgeFilter", "tail" : "", "member" : "scalax.collection.GraphBase.EdgeFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#EdgeFilter=GraphBase.this.EdgeT=>Boolean", "kind" : "type"}, {"label" : "NodeFilter", "tail" : "", "member" : "scalax.collection.GraphBase.NodeFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#NodeFilter=GraphBase.this.NodeT=>Boolean", "kind" : "type"}, {"label" : "graphSize", "tail" : "(): Int", "member" : "scalax.collection.GraphBase.graphSize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#graphSize:Int", "kind" : "def"}, {"label" : "nonTrivial", "tail" : "(): Boolean", "member" : "scalax.collection.GraphBase.nonTrivial", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nonTrivial:Boolean", "kind" : "final def"}, {"label" : "isTrivial", "tail" : "(): Boolean", "member" : "scalax.collection.GraphBase.isTrivial", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isTrivial:Boolean", "kind" : "final def"}, {"label" : "order", "tail" : "(): Int", "member" : "scalax.collection.GraphBase.order", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#order:Int", "kind" : "def"}, {"label" : "initialize", "tail" : "(nodes: Traversable[Rule], edges: Traversable[LDiEdge[Rule]]): Unit", "member" : "scalax.collection.GraphBase.initialize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#initialize(nodes:Traversable[N],edges:Traversable[E[N]]):Unit", "kind" : "def"}, {"label" : "seq", "tail" : "(): Set[Param[Rule, LDiEdge]]", "member" : "scala.collection.Set.seq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#seq:scala.collection.Set[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Set]", "member" : "scala.collection.Set.companion", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#companion:scala.collection.generic.GenericCompanion[scala.collection.Set]", "kind" : "def"}, {"label" : "subsets", "tail" : "(): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.SetLike.subsets", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#subsets():Iterator[This]", "kind" : "def"}, {"label" : "subsets", "tail" : "(len: Int): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.SetLike.subsets", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#subsets(len:Int):Iterator[This]", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.SetLike.diff", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#diff(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.SetLike.union", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#union(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SetLike.isEmpty", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: Param[Rule, LDiEdge], elem2: Param[Rule, LDiEdge], elems: Param[Rule, LDiEdge]*): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.SetLike.+", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#+(elem1:A,elem2:A,elems:A*):This", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.SetLike.map", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[This,B,That]):That", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[A1]", "member" : "scala.collection.SetLike.toBuffer", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toBuffer[A1>:A]:scala.collection.mutable.Buffer[A1]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Param[Rule, LDiEdge]]", "member" : "scala.collection.SetLike.toSeq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Param[Rule, LDiEdge], ParSet[Param[Rule, LDiEdge]]]", "member" : "scala.collection.SetLike.parCombiner", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParSet[A]]", "kind" : "def"}, {"label" : "-", "tail" : "(elem1: Param[Rule, LDiEdge], elem2: Param[Rule, LDiEdge], elems: Param[Rule, LDiEdge]*): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.generic.Subtractable.-", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#-(elem1:A,elem2:A,elems:A*):Repr", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.GenSetLike.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "subsetOf", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): Boolean", "member" : "scala.collection.GenSetLike.subsetOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#subsetOf(that:scala.collection.GenSet[A]):Boolean", "kind" : "def"}, {"label" : "&~", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.GenSetLike.&~", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#&~(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "|", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.GenSetLike.|", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#|(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "&", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.GenSetLike.&", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#&(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSet[Param[Rule, LDiEdge]]): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.GenSetLike.intersect", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#intersect(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "apply", "tail" : "(elem: Param[Rule, LDiEdge]): Boolean", "member" : "scala.collection.GenSetLike.apply", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#apply(elem:A):Boolean", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[Param[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.view", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[Param[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.view", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.toStream", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.dropRight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.takeRight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.grouped", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.drop", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.take", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.slice", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Param[Rule, LDiEdge]", "member" : "scala.collection.IterableLike.head", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.toIterator", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.toIterable", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Param[Rule, LDiEdge], B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Param[Rule, LDiEdge], B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): Option[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.find", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: DefaultGraphImpl[Rule, LDiEdge]): Iterable[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.toCollection", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[Param[Rule, LDiEdge]]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Param[Rule, LDiEdge]) ⇒ GenTraversableOnce[B]): Set[Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Param[Rule, LDiEdge]) ⇒ GenTraversableOnce[B]): Set[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Param[Rule, LDiEdge]) ⇒ (A1, A2, A3)): (Set[A1], Set[A2], Set[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Param[Rule, LDiEdge]) ⇒ (A1, A2)): (Set[A1], Set[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): FilterMonadic[Param[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Param[Rule, LDiEdge], Col[Param[Rule, LDiEdge]]]): Col[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.to", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.inits", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.tails", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (DefaultGraphImpl[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): (DefaultGraphImpl[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge])", "member" : "scala.collection.TraversableLike.span", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.init", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Param[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.last", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.tail", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.headOption", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Param[Rule, LDiEdge], B) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Param[Rule, LDiEdge]) ⇒ B)(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ K): Map[K, DefaultGraphImpl[Rule, LDiEdge]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): (DefaultGraphImpl[Rule, LDiEdge], DefaultGraphImpl[Rule, LDiEdge])", "member" : "scala.collection.TraversableLike.partition", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Param[Rule, LDiEdge], B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.filter", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[DefaultGraphImpl[Rule, LDiEdge], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): DefaultGraphImpl[Rule, LDiEdge]", "member" : "scala.collection.TraversableLike.repr", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSet[Param[Rule, LDiEdge]]", "member" : "scala.collection.Parallelizable.par", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Param[Rule, LDiEdge], (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableOnce.toList", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ B)(cmp: Ordering[B]): Param[Rule, LDiEdge]", "member" : "scala.collection.TraversableOnce.minBy", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Param[Rule, LDiEdge]) ⇒ B)(cmp: Ordering[B]): Param[Rule, LDiEdge]", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Param[Rule, LDiEdge]", "member" : "scala.collection.TraversableOnce.max", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Param[Rule, LDiEdge]", "member" : "scala.collection.TraversableOnce.min", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Param[Rule, LDiEdge]) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Param[Rule, LDiEdge], B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Param[Rule, LDiEdge]) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Param[Rule, LDiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Param[Rule, LDiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Param[Rule, LDiEdge], B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Param[Rule, LDiEdge]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Param[Rule, LDiEdge], B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Param[Rule, LDiEdge]) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Param[Rule, LDiEdge]]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Boolean) ⇒ A): (Param[Rule, LDiEdge]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Param[Rule, LDiEdge]): (A) ⇒ Boolean", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraph.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer.main", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "analyze", "tail" : "(g: Graph[Rule, LDiEdge]): Unit", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer.analyze", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#analyze(g:scalax.collection.Graph[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.edge.LDiEdge]):Unit", "kind" : "def"}, {"label" : "computePlan", "tail" : "(rules: Set[Rule]): Unit", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer.computePlan", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#computePlan(rules:Set[org.apache.jena.reasoner.rulesys.Rule]):Unit", "kind" : "def"}, {"label" : "computeHighLevelDependencyGraph", "tail" : "(ruleDependencyGraph: Graph[Rule, DiEdge]): Graph[Graph[Rule, DiEdge], DiEdge]", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer.computeHighLevelDependencyGraph", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#computeHighLevelDependencyGraph(ruleDependencyGraph:scalax.collection.Graph[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.GraphEdge.DiEdge]):scalax.collection.Graph[scalax.collection.Graph[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.GraphEdge.DiEdge],scalax.collection.GraphEdge.DiEdge]", "kind" : "def"}, {"label" : "analyze", "tail" : "(rules: Set[Rule]): Unit", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphAnalyzer.analyze", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#analyze(rules:Set[org.apache.jena.reasoner.rulesys.Rule]):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphAnalyzer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator", "shortDescription" : "A generator for a so-called dependency graph based on a given set of rules.", "object" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html", "members_object" : [{"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "asString", "tail" : "(edge: scalax.collection.mutable.DefaultGraphImpl.EdgeImpl): String", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.asString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#asString(edge:scalax.collection.mutable.DefaultGraphImpl[org.apache.jena.reasoner.rulesys.Rule,scalax.collection.edge.LDiEdge]#EdgeImpl):String", "kind" : "def"}, {"label" : "removeCyclesIfPredicateIsTC", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeCyclesIfPredicateIsTC", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeCyclesIfPredicateIsTC(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "prune1", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.prune1", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#prune1(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "removeEdgesWithCycleOverTCNode", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeEdgesWithCycleOverTCNode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeEdgesWithCycleOverTCNode(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "removeEdgesWithPredicateAlreadyTC", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeEdgesWithPredicateAlreadyTC", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeEdgesWithPredicateAlreadyTC(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "removeRedundantEdges", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeRedundantEdges", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeRedundantEdges(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "prune", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.prune", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#prune(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "removeCycles", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeCycles", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeCycles(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "sameElements", "tail" : "(this1: Traversable[_], that: Traversable[_]): Boolean", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.sameElements", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#sameElements(this1:Traversable[_],that:Traversable[_]):Boolean", "kind" : "def"}, {"label" : "removeLoops", "tail" : "(graph: RuleDependencyGraph): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.removeLoops", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#removeLoops(graph:net.sansa_stack.inference.rules.RuleDependencyGraph):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "dependsOnSmart", "tail" : "(rule1: Rule, rule2: Rule): Option[TriplePattern]", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.dependsOnSmart", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#dependsOnSmart(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Option[org.apache.jena.reasoner.TriplePattern]", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(rule1: Rule, rule2: Rule): Boolean", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.dependsOn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#dependsOn(rule1:org.apache.jena.reasoner.rulesys.Rule,rule2:org.apache.jena.reasoner.rulesys.Rule):Boolean", "kind" : "def"}, {"label" : "generate", "tail" : "(rules: Set[Rule], f: (Rule, Rule) ⇒ Option[TriplePattern], pruned: Boolean, dependencyDirection: RuleDependencyDirection): RuleDependencyGraph", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.generate", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#generate(rules:Set[org.apache.jena.reasoner.rulesys.Rule],f:(org.apache.jena.reasoner.rulesys.Rule,org.apache.jena.reasoner.rulesys.Rule)=>Option[org.apache.jena.reasoner.TriplePattern],pruned:Boolean,dependencyDirection:net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.RuleDependencyDirection):net.sansa_stack.inference.rules.RuleDependencyGraph", "kind" : "def"}, {"label" : "ProducerConsumer", "tail" : "", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.ProducerConsumer", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#ProducerConsumer", "kind" : "object"}, {"label" : "ConsumerProducer", "tail" : "", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.ConsumerProducer", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#ConsumerProducer", "kind" : "object"}, {"label" : "RuleDependencyDirection", "tail" : "", "member" : "net.sansa_stack.inference.rules.RuleDependencyGraphGenerator.RuleDependencyDirection", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#RuleDependencyDirectionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleDependencyGraphGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.RuleEntailmentType", "shortDescription" : "The type of entailment of a rule, i.e.", "object" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "HYBRID", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RuleEntailmentType.HYBRID", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#HYBRID:net.sansa_stack.inference.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "TERMINOLOGICAL", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RuleEntailmentType.TERMINOLOGICAL", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#TERMINOLOGICAL:net.sansa_stack.inference.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "ASSERTIONAL", "tail" : ": Value", "member" : "net.sansa_stack.inference.rules.RuleEntailmentType.ASSERTIONAL", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#ASSERTIONAL:net.sansa_stack.inference.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "RuleEntailmentType", "tail" : "", "member" : "net.sansa_stack.inference.rules.RuleEntailmentType.RuleEntailmentType", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#RuleEntailmentType=net.sansa_stack.inference.rules.RuleEntailmentType.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleEntailmentType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.rules.RuleSets", "shortDescription" : "Predefined sets of rules.", "object" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html", "members_object" : [{"label" : "OWL_RL", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.rules.RuleSets.OWL_RL", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#OWL_RL:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "lazy val"}, {"label" : "OWL_HORST", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.rules.RuleSets.OWL_HORST", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#OWL_HORST:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "lazy val"}, {"label" : "RDFS_SIMPLE", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.rules.RuleSets.RDFS_SIMPLE", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#RDFS_SIMPLE:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/rules\/RuleSets$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net.sansa_stack" : [], "scalax.collection" : [], "net.sansa_stack.inference.abstraction" : [{"name" : "net.sansa_stack.inference.abstraction.AbstractionGenerator", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/abstraction\/AbstractionGenerator.html", "kind" : "trait"}], "net.sansa_stack.inference.utils.graph" : [{"name" : "net.sansa_stack.inference.utils.graph.EdgeEquivalenceComparator", "shortDescription" : "Definition of edge equivalence used for graph isomorphism detection.", "members_class" : [{"label" : "compare", "tail" : "(e1: LabeledEdge[Node, String], e2: LabeledEdge[Node, String]): Int", "member" : "net.sansa_stack.inference.utils.graph.EdgeEquivalenceComparator.compare", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#compare(e1:net.sansa_stack.inference.utils.graph.LabeledEdge[org.apache.jena.graph.Node,String],e2:net.sansa_stack.inference.utils.graph.LabeledEdge[org.apache.jena.graph.Node,String]):Int", "kind" : "def"}, {"member" : "net.sansa_stack.inference.utils.graph.EdgeEquivalenceComparator#<init>", "error" : "unsupported entity"}, {"label" : "thenComparingDouble", "tail" : "(arg0: ToDoubleFunction[_ >: LabeledEdge[Node, String]]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparingDouble", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparingDouble(x$1:java.util.function.ToDoubleFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingLong", "tail" : "(arg0: ToLongFunction[_ >: LabeledEdge[Node, String]]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparingLong", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparingLong(x$1:java.util.function.ToLongFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingInt", "tail" : "(arg0: ToIntFunction[_ >: LabeledEdge[Node, String]]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparingInt", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparingInt(x$1:java.util.function.ToIntFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: LabeledEdge[Node, String], _ <: U]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparing[U<:Comparable[_>:U]](x$1:java.util.function.Function[_>:T,_<:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: LabeledEdge[Node, String], _ <: U], arg1: Comparator[_ >: U]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparing[U](x$1:java.util.function.Function[_>:T,_<:U],x$2:java.util.Comparator[_>:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Comparator[_ >: LabeledEdge[Node, String]]): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#thenComparing(x$1:java.util.Comparator[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Comparator[LabeledEdge[Node, String]]", "member" : "java.util.Comparator.reversed", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#reversed():java.util.Comparator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/graph\/EdgeEquivalenceComparator.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.utils.graph.LabeledEdge", "shortDescription" : "A labeled edge that also keeps trakc of source and target node.", "members_case class" : [{"member" : "net.sansa_stack.inference.utils.graph.LabeledEdge#<init>", "error" : "unsupported entity"}, {"label" : "label", "tail" : ": L", "member" : "net.sansa_stack.inference.utils.graph.LabeledEdge.label", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#label:L", "kind" : "val"}, {"label" : "t", "tail" : ": V", "member" : "net.sansa_stack.inference.utils.graph.LabeledEdge.t", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#t:V", "kind" : "val"}, {"label" : "s", "tail" : ": V", "member" : "net.sansa_stack.inference.utils.graph.LabeledEdge.s", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#s:V", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.jgrapht.graph.DefaultEdge.toString", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#toString():String", "kind" : "def"}, {"label" : "getTarget", "tail" : "(): AnyRef", "member" : "org.jgrapht.graph.DefaultEdge.getTarget", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#getTarget():Object", "kind" : "def"}, {"label" : "getSource", "tail" : "(): AnyRef", "member" : "org.jgrapht.graph.DefaultEdge.getSource", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#getSource():Object", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/utils\/graph\/LabeledEdge.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.utils.graph.NodeEquivalenceComparator", "shortDescription" : "Definition of node equivalence used for graph isomorphism detection.", "members_class" : [{"label" : "compare", "tail" : "(o1: Node, o2: Node): Int", "member" : "net.sansa_stack.inference.utils.graph.NodeEquivalenceComparator.compare", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#compare(o1:org.apache.jena.graph.Node,o2:org.apache.jena.graph.Node):Int", "kind" : "def"}, {"label" : "c", "tail" : ": NodeComparator", "member" : "net.sansa_stack.inference.utils.graph.NodeEquivalenceComparator.c", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#c:org.apache.jena.sparql.util.NodeComparator", "kind" : "val"}, {"member" : "net.sansa_stack.inference.utils.graph.NodeEquivalenceComparator#<init>", "error" : "unsupported entity"}, {"label" : "thenComparingDouble", "tail" : "(arg0: ToDoubleFunction[_ >: Node]): Comparator[Node]", "member" : "java.util.Comparator.thenComparingDouble", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparingDouble(x$1:java.util.function.ToDoubleFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingLong", "tail" : "(arg0: ToLongFunction[_ >: Node]): Comparator[Node]", "member" : "java.util.Comparator.thenComparingLong", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparingLong(x$1:java.util.function.ToLongFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingInt", "tail" : "(arg0: ToIntFunction[_ >: Node]): Comparator[Node]", "member" : "java.util.Comparator.thenComparingInt", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparingInt(x$1:java.util.function.ToIntFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: Node, _ <: U]): Comparator[Node]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparing[U<:Comparable[_>:U]](x$1:java.util.function.Function[_>:T,_<:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: Node, _ <: U], arg1: Comparator[_ >: U]): Comparator[Node]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparing[U](x$1:java.util.function.Function[_>:T,_<:U],x$2:java.util.Comparator[_>:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Comparator[_ >: Node]): Comparator[Node]", "member" : "java.util.Comparator.thenComparing", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#thenComparing(x$1:java.util.Comparator[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Comparator[Node]", "member" : "java.util.Comparator.reversed", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#reversed():java.util.Comparator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/utils\/graph\/NodeEquivalenceComparator.html", "kind" : "class"}]};