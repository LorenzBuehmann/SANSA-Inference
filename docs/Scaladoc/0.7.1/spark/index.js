Index.PACKAGES = {"net.sansa_stack.inference.spark.forwardchaining.triples" : [{"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasoner", "shortDescription" : "A forward chaining based reasoner.", "members_class" : [{"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasoner#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html#apply(graph:G):G", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasoner.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS", "shortDescription" : "A forward chaining implementation of the RDFS entailment regime.", "members_class" : [{"label" : "apply", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#apply(graph:G):G", "kind" : "def"}, {"label" : "level", "tail" : ": RDFSLevel", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.level", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#level:net.sansa_stack.inference.rules.RDFSLevel.RDFSLevel", "kind" : "var"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS#<init>", "error" : "unsupported entity"}, {"label" : "rdfOps", "tail" : ": RDFOps[Rdf]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rdfOps", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rdfOps:net.sansa_stack.inference.data.RDFOps[Rdf]", "kind" : "implicit val"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "postprocess", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.postprocess", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#postprocess(graph:G):G", "kind" : "abstract def"}, {"label" : "preprocess", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.preprocess", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#preprocess(graph:G):G", "kind" : "abstract def"}, {"label" : "rule11", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule11", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule11(graph:G):G", "kind" : "abstract def"}, {"label" : "rule9", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule9", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule9(graph:G):G", "kind" : "abstract def"}, {"label" : "rule7", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule7", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule7(graph:G):G", "kind" : "abstract def"}, {"label" : "rule5", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule5", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule5(graph:G):G", "kind" : "abstract def"}, {"label" : "rule3", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule3", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule3(graph:G):G", "kind" : "abstract def"}, {"label" : "rule2", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.AbstractForwardRuleReasonerRDFS.rule2", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html#rule2(graph:G):G", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/AbstractForwardRuleReasonerRDFS.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.FixpointIteration", "members_trait" : [{"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "f", "tail" : ": (RDD[T]) ⇒ RDD[T]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.FixpointIteration.f", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#f:org.apache.spark.rdd.RDD[T]=>org.apache.spark.rdd.RDD[T]", "kind" : "abstract val"}, {"label" : "rdd", "tail" : ": RDD[T]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.FixpointIteration.rdd", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "abstract val"}], "shortDescription" : "Creates a new RDD by performing bulk iterations using the given step function.", "object" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html", "members_object" : [{"label" : "apply2", "tail" : "(maxIterations: Int)(dataset: Dataset[T], f: (Dataset[T]) ⇒ Dataset[T])(arg0: ClassTag[T]): Dataset[T]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.FixpointIteration.apply2", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#apply2[T](maxIterations:Int)(dataset:org.apache.spark.sql.Dataset[T],f:org.apache.spark.sql.Dataset[T]=>org.apache.spark.sql.Dataset[T])(implicitevidence$2:scala.reflect.ClassTag[T]):org.apache.spark.sql.Dataset[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(maxIterations: Int)(rdd: RDD[T], f: (RDD[T]) ⇒ RDD[T])(arg0: ClassTag[T]): RDD[T]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.FixpointIteration.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#apply[T](maxIterations:Int)(rdd:org.apache.spark.rdd.RDD[T],f:org.apache.spark.rdd.RDD[T]=>org.apache.spark.rdd.RDD[T])(implicitevidence$1:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/FixpointIteration.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner", "members_trait" : [{"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "abstract def"}], "shortDescription" : "A forward chaining based reasoner.", "trait" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasoner.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL", "shortDescription" : "This rule-based forward chaining reasoner implementation is based on thepaper", "members_class" : [{"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "cr11", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr11", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr11:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr10", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr10", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr10:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr5", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr5", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr5:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr4", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr4", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr4:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr3", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr3", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr3:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr2", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr2", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr2:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "cr1", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.cr1", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#cr1:ForwardRuleReasonerEL.this.Rule", "kind" : "val"}, {"label" : "Rule", "tail" : "", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL.Rule", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#RuleextendsProductwithSerializable", "kind" : "case class"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerEL#<init>", "error" : "unsupported entity"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerEL.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive", "shortDescription" : "A naive implementation of the forward chaining based reasoner that does fix-point iteration, i.e.", "members_class" : [{"label" : "applyRule", "tail" : "(rule: Rule, graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive.applyRule", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#applyRule(rule:org.apache.jena.reasoner.rulesys.Rule,graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "applyRules", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive.applyRules", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#applyRules(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "ruleExecutor", "tail" : ": RuleExecutorNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive.ruleExecutor", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#ruleExecutor:net.sansa_stack.inference.spark.rules.RuleExecutorNative", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerNaive#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerNaive.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized", "shortDescription" : "An optimized implementation of the forward chaining based reasoner.", "members_class" : [{"label" : "applyRule", "tail" : "(rule: Rule, graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRule", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#applyRule(rule:org.apache.jena.reasoner.rulesys.Rule,graph:G):G", "kind" : "def"}, {"label" : "applyRulesOnce", "tail" : "(rules: Seq[Rule], graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRulesOnce", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#applyRulesOnce(rules:Seq[org.apache.jena.reasoner.rulesys.Rule],graph:G):G", "kind" : "def"}, {"label" : "applyRules", "tail" : "(rules: Seq[Rule], graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRules", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#applyRules(rules:Seq[org.apache.jena.reasoner.rulesys.Rule],graph:G):G", "kind" : "def"}, {"label" : "applyRules", "tail" : "(rdg: RuleDependencyGraph, graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRules", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#applyRules(rdg:net.sansa_stack.inference.rules.RuleDependencyGraph,graph:G):G", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#apply(graph:G):G", "kind" : "def"}, {"label" : "showExecutionStats", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.showExecutionStats", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#showExecutionStats():Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.reset", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#reset():Unit", "kind" : "def"}, {"label" : "distinctCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.distinctCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#distinctCnt:Int", "kind" : "var"}, {"label" : "unionCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.unionCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#unionCnt:Int", "kind" : "var"}, {"label" : "countCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.countCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#countCnt:Int", "kind" : "var"}, {"label" : "ruleExecutionCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.ruleExecutionCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#ruleExecutionCnt:Int", "kind" : "var"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimized.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimizedNative", "shortDescription" : "An optimized implementation of the forward chaining based reasoner using Spark data structures and operations.", "members_class" : [{"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimizedNative#<init>", "error" : "unsupported entity"}, {"label" : "applyRule", "tail" : "(rule: Rule, graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRule", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#applyRule(rule:org.apache.jena.reasoner.rulesys.Rule,graph:G):G", "kind" : "def"}, {"label" : "applyRulesOnce", "tail" : "(rules: Seq[Rule], graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRulesOnce", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#applyRulesOnce(rules:Seq[org.apache.jena.reasoner.rulesys.Rule],graph:G):G", "kind" : "def"}, {"label" : "applyRules", "tail" : "(rules: Seq[Rule], graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRules", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#applyRules(rules:Seq[org.apache.jena.reasoner.rulesys.Rule],graph:G):G", "kind" : "def"}, {"label" : "applyRules", "tail" : "(rdg: RuleDependencyGraph, graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.applyRules", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#applyRules(rdg:net.sansa_stack.inference.rules.RuleDependencyGraph,graph:G):G", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#apply(graph:G):G", "kind" : "def"}, {"label" : "showExecutionStats", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.showExecutionStats", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#showExecutionStats():Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.reset", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#reset():Unit", "kind" : "def"}, {"label" : "distinctCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.distinctCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#distinctCnt:Int", "kind" : "var"}, {"label" : "unionCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.unionCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#unionCnt:Int", "kind" : "var"}, {"label" : "countCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.countCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#countCnt:Int", "kind" : "var"}, {"label" : "ruleExecutionCnt", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOptimized.ruleExecutionCnt", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#ruleExecutionCnt:Int", "kind" : "var"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOptimizedNative.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOWLHorst", "shortDescription" : "A forward chaining implementation of the OWL Horst entailment regime.", "members_class" : [{"label" : "deduplicate", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOWLHorst.deduplicate", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#deduplicate(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOWLHorst.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOWLHorst#<init>", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerOWLHorst#<init>", "error" : "unsupported entity"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerOWLHorst.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS", "shortDescription" : "A forward chaining implementation of the RDFS entailment regime.", "members_class" : [{"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "extractSchemaTriplesInAdvance", "tail" : ": Boolean", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS.extractSchemaTriplesInAdvance", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#extractSchemaTriplesInAdvance:Boolean", "kind" : "var"}, {"label" : "level", "tail" : ": RDFSLevel", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS.level", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#level:net.sansa_stack.inference.rules.RDFSLevel.RDFSLevel", "kind" : "var"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS#<init>", "error" : "unsupported entity"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFS.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe", "shortDescription" : "A forward chaining implementation of the RDFS entailment regime.", "object" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html", "members_class" : [{"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "computeTransitiveClosureDF", "tail" : "(edges: Dataset[RDFTriple]): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.computeTransitiveClosureDF", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosureDF(edges:org.apache.spark.sql.Dataset[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.sql.Dataset[net.sansa_stack.inference.data.RDFTriple]", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraphDataFrame): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "sqlContext", "tail" : ": SQLContext", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.sqlContext", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#sqlContext:org.apache.spark.sql.SQLContext", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe#<init>", "error" : "unsupported entity"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.main", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(session: SparkSession, parallelism: Int): ForwardRuleReasonerRDFSDataframe", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#apply(session:org.apache.spark.sql.SparkSession,parallelism:Int):net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFSDataframe", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/ForwardRuleReasonerRDFSDataframe.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner", "shortDescription" : "An engine to compute the transitive closure (TC) for a set of triples given in several datastructures.", "members_class" : [{"label" : "computeTransitiveClosure", "tail" : "(edges: Dataset[Triple]): Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosure(edges:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]):org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosureSemiNaive", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosureSemiNaive", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosureSemiNaive[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$2:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(edges: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosure[A](edges:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosure(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(triples: Set[Triple]): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosure(triples:Set[org.apache.jena.graph.Triple]):Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "addTransitivePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.addTransitivePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#addTransitivePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "computeTransitiveClosurePairs", "tail" : "(s: Set[(A, B)]): Set[(A, B)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.computeTransitiveClosurePairs", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#computeTransitiveClosurePairs[A,B](s:Set[(A,B)]):Set[(A,B)]", "kind" : "def"}, {"label" : "apply", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#apply(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner#<init>", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner#<init>", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner#<init>", "error" : "unsupported entity"}, {"label" : "parallelism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#parallelism:Int", "kind" : "val"}, {"label" : "properties", "tail" : ": Seq[Node]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.TransitiveReasoner.properties", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#properties:Seq[org.apache.jena.graph.Node]", "kind" : "val"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], subject: Option[Node], predicate: Option[Node], obj: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],subject:Option[org.apache.jena.graph.Node],predicate:Option[org.apache.jena.graph.Node],obj:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: RDD[Triple], predicate: Node): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#extractTriples(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extractTriples", "tail" : "(triples: Set[Triple], predicate: Node): Set[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.extractTriples", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#extractTriples(triples:scala.collection.mutable.Set[org.apache.jena.graph.Triple],predicate:org.apache.jena.graph.Node):scala.collection.mutable.Set[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "apply", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasoner.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#apply(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "profile", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.utils.Profiler.profile", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#profile[R](block:=>R):R", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/triples\/TransitiveReasoner.html", "kind" : "class"}], "net.sansa_stack.inference.spark.data.writer" : [{"name" : "net.sansa_stack.inference.spark.data.writer.RDFGraphWriter", "shortDescription" : "A class that provides methods to write an RDF graph to disk.", "object" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html", "members_object" : [{"label" : "convertToModel", "tail" : "(graph: RDFGraph): Model", "member" : "net.sansa_stack.inference.spark.data.writer.RDFGraphWriter.convertToModel", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#convertToModel(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):org.apache.jena.rdf.model.Model", "kind" : "def"}, {"label" : "writeDataframeToDisk", "tail" : "(triples: DataFrame, path: String, singleFile: Boolean, sorted: Boolean): Unit", "member" : "net.sansa_stack.inference.spark.data.writer.RDFGraphWriter.writeDataframeToDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#writeDataframeToDisk(triples:org.apache.spark.sql.DataFrame,path:String,singleFile:Boolean,sorted:Boolean):Unit", "kind" : "def"}, {"label" : "writeTriplesToDisk", "tail" : "(triples: RDD[Triple], path: String, singleFile: Boolean, sorted: Boolean): Unit", "member" : "net.sansa_stack.inference.spark.data.writer.RDFGraphWriter.writeTriplesToDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#writeTriplesToDisk(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple],path:String,singleFile:Boolean,sorted:Boolean):Unit", "kind" : "def"}, {"label" : "writeToDisk", "tail" : "(graph: RDFGraph, path: String, singleFile: Boolean, sorted: Boolean): Unit", "member" : "net.sansa_stack.inference.spark.data.writer.RDFGraphWriter.writeToDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#writeToDisk(graph:net.sansa_stack.inference.spark.data.model.RDFGraph,path:String,singleFile:Boolean,sorted:Boolean):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/writer\/RDFGraphWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net.sansa_stack.inference.spark.abstraction" : [{"name" : "net.sansa_stack.inference.spark.abstraction.AbstractAbstractionGenerator", "shortDescription" : "", "members_class" : [{"member" : "net.sansa_stack.inference.spark.abstraction.AbstractAbstractionGenerator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractAbstractionGenerator.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.abstraction.AbstractionGenerator", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "generateAbstractOntology", "tail" : "(triples: RDD[RDFTriple]): RDD[RDFTriple]", "member" : "net.sansa_stack.inference.spark.abstraction.AbstractionGenerator.generateAbstractOntology", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html#generateAbstractOntology(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/spark\/abstraction\/AbstractionGenerator.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.abstraction.IndividualType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getPredecessorRoles", "tail" : "(): Set[String]", "member" : "net.sansa_stack.inference.spark.abstraction.IndividualType.getPredecessorRoles", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#getPredecessorRoles:Set[String]", "kind" : "abstract def"}, {"label" : "getSuccessorRoles", "tail" : "(): Set[String]", "member" : "net.sansa_stack.inference.spark.abstraction.IndividualType.getSuccessorRoles", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#getSuccessorRoles:Set[String]", "kind" : "abstract def"}, {"label" : "getConcepts", "tail" : "(): Set[String]", "member" : "net.sansa_stack.inference.spark.abstraction.IndividualType.getConcepts", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html#getConcepts:Set[String]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/spark\/abstraction\/IndividualType.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.abstraction.TypeComputor", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "computeTypes", "tail" : "(aboxTriples: RDD[Triple]): RDD[((Set[Node], Set[Node], Set[Node]), Iterable[Node])]", "member" : "net.sansa_stack.inference.spark.abstraction.TypeComputor.computeTypes", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html#computeTypes(aboxTriples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[((Set[org.apache.jena.graph.Node],Set[org.apache.jena.graph.Node],Set[org.apache.jena.graph.Node]),Iterable[org.apache.jena.graph.Node])]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputor.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.abstraction.TypeComputorDefault", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html", "members_class" : [{"label" : "computeTypes", "tail" : "(aboxTriples: RDD[Triple]): RDD[((Set[Node], Set[Node], Set[Node]), Iterable[Node])]", "member" : "net.sansa_stack.inference.spark.abstraction.TypeComputorDefault.computeTypes", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#computeTypes(aboxTriples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[((Set[org.apache.jena.graph.Node],Set[org.apache.jena.graph.Node],Set[org.apache.jena.graph.Node]),Iterable[org.apache.jena.graph.Node])]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.abstraction.TypeComputorDefault#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.abstraction.TypeComputorDefault.main", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/abstraction\/TypeComputorDefault.html", "kind" : "class"}], "net.sansa_stack.inference.spark.backwardchaining" : [{"name" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasoner", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "query", "tail" : "(tp: TriplePattern): T", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasoner.query", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html#query(tp:org.apache.jena.reasoner.TriplePattern):T", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasoner.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html", "members_class" : [{"label" : "query", "tail" : "(tp: Triple): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.query", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#query(tp:org.apache.jena.graph.Triple):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "extractWithIndex", "tail" : "(graph: Dataset[RDFTriple]): Map[Node, Dataset[RDFTriple]]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.extractWithIndex", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#extractWithIndex(graph:org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]):Map[org.apache.jena.graph.Node,org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]]", "kind" : "def"}, {"label" : "DUMMY_VAR", "tail" : ": Node", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.DUMMY_VAR", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#DUMMY_VAR:org.apache.jena.graph.Node", "kind" : "val"}, {"label" : "properties", "tail" : ": Set[(Property, Boolean, String)]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.properties", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#properties:scala.collection.immutable.Set[(org.apache.jena.rdf.model.Property,Boolean,String)]", "kind" : "val"}, {"label" : "isEntailed", "tail" : "(tp: TriplePattern): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#isEntailed(tp:org.apache.jena.reasoner.TriplePattern):Boolean", "kind" : "def"}, {"label" : "isEntailed", "tail" : "(triple: Triple): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#isEntailed(triple:org.apache.jena.graph.Triple):Boolean", "kind" : "def"}, {"label" : "schema", "tail" : ": Map[Node, Dataset[RDFTriple]]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.schema", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#schema:Map[org.apache.jena.graph.Node,org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]]", "kind" : "lazy val"}, {"label" : "precomputeSchema", "tail" : ": Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.precomputeSchema", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#precomputeSchema:Boolean", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe#<init>", "error" : "unsupported entity"}, {"label" : "graph", "tail" : ": Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.graph", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#graph:org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "val"}, {"label" : "rules", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.rules", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#rules:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.session", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "time", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.time", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#time[R](block:=>R):R", "kind" : "def"}, {"label" : "compare", "tail" : "(tp: Triple, reasoner: BackwardChainingReasonerDataframe, show: Boolean): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.compare", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#compare(tp:org.apache.jena.graph.Triple,reasoner:net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe,show:Boolean):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.main", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "loadDataFrameFromParquet", "tail" : "(session: SparkSession, path: String): DataFrame", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.loadDataFrameFromParquet", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#loadDataFrameFromParquet(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "loadDataFrame", "tail" : "(session: SparkSession, path: String): DataFrame", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.loadDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#loadDataFrame(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "loadDatasetFromParquet", "tail" : "(session: SparkSession, path: String): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.loadDatasetFromParquet", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#loadDatasetFromParquet(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "loadDataset", "tail" : "(session: SparkSession, path: String): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.loadDataset", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#loadDataset(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "loadRDD", "tail" : "(session: SparkSession, path: String): RDD[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.loadRDD", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#loadRDD(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.rdd.RDD[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "DEFAULT_NUM_THREADS", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.DEFAULT_NUM_THREADS", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#DEFAULT_NUM_THREADS:Int", "kind" : "val"}, {"label" : "DEFAULT_PARALLELISM", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataframe.DEFAULT_PARALLELISM", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#DEFAULT_PARALLELISM:Int", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataframe.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html", "members_class" : [{"label" : "query", "tail" : "(tp: Triple): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.query", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#query(tp:org.apache.jena.graph.Triple):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "extractWithIndex", "tail" : "(graph: Dataset[RDFTriple]): Map[Node, Dataset[RDFTriple]]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.extractWithIndex", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#extractWithIndex(graph:org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]):Map[org.apache.jena.graph.Node,org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]]", "kind" : "def"}, {"label" : "DUMMY_VAR", "tail" : ": Node", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.DUMMY_VAR", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#DUMMY_VAR:org.apache.jena.graph.Node", "kind" : "val"}, {"label" : "properties", "tail" : ": Set[(Property, Boolean, String)]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.properties", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#properties:scala.collection.immutable.Set[(org.apache.jena.rdf.model.Property,Boolean,String)]", "kind" : "val"}, {"label" : "isEntailed", "tail" : "(tp: TriplePattern): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#isEntailed(tp:org.apache.jena.reasoner.TriplePattern):Boolean", "kind" : "def"}, {"label" : "isEntailed", "tail" : "(triple: Triple): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#isEntailed(triple:org.apache.jena.graph.Triple):Boolean", "kind" : "def"}, {"label" : "precomputeSchema", "tail" : ": Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.precomputeSchema", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#precomputeSchema:Boolean", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset#<init>", "error" : "unsupported entity"}, {"label" : "graph", "tail" : ": Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.graph", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#graph:org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "val"}, {"label" : "rules", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.rules", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#rules:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.session", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "time", "tail" : "(block: ⇒ R): R", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.time", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#time[R](block:=>R):R", "kind" : "def"}, {"label" : "compare", "tail" : "(tp: Triple, reasoner: BackwardChainingReasonerDataset, show: Boolean): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.compare", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#compare(tp:org.apache.jena.graph.Triple,reasoner:net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset,show:Boolean):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.main", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "loadDataFrameFromParquet", "tail" : "(session: SparkSession, path: String): DataFrame", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.loadDataFrameFromParquet", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#loadDataFrameFromParquet(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "loadDataFrame", "tail" : "(session: SparkSession, path: String): DataFrame", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.loadDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#loadDataFrame(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "loadDatasetFromParquet", "tail" : "(session: SparkSession, path: String): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.loadDatasetFromParquet", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#loadDatasetFromParquet(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "loadDataset", "tail" : "(session: SparkSession, path: String): Dataset[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.loadDataset", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#loadDataset(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.sql.Dataset[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "loadRDD", "tail" : "(session: SparkSession, path: String): RDD[RDFTriple]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.loadRDD", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#loadRDD(session:org.apache.spark.sql.SparkSession,path:String):org.apache.spark.rdd.RDD[net.sansa_stack.inference.spark.backwardchaining.RDFTriple]", "kind" : "def"}, {"label" : "DEFAULT_NUM_THREADS", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.DEFAULT_NUM_THREADS", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#DEFAULT_NUM_THREADS:Int", "kind" : "val"}, {"label" : "DEFAULT_PARALLELISM", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerDataset.DEFAULT_PARALLELISM", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#DEFAULT_PARALLELISM:Int", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerDataset.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html", "members_class" : [{"label" : "RDDRelVisitor", "tail" : "", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.RDDRelVisitor", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#RDDRelVisitorextendsRelVisitor", "kind" : "class"}, {"label" : "planGenerator", "tail" : ": SimplePlanGenerator", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.planGenerator", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#planGenerator:net.sansa_stack.inference.rules.plan.SimplePlanGenerator", "kind" : "val"}, {"label" : "isEntailed", "tail" : "(tp: TriplePattern): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#isEntailed(tp:org.apache.jena.reasoner.TriplePattern):Boolean", "kind" : "def"}, {"label" : "isEntailed", "tail" : "(triple: Triple): Boolean", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.isEntailed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#isEntailed(triple:org.apache.jena.graph.Triple):Boolean", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD#<init>", "error" : "unsupported entity"}, {"label" : "graph", "tail" : ": RDFGraph", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.graph", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#graph:net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "val"}, {"label" : "rules", "tail" : ": Set[Rule]", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.rules", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#rules:Set[org.apache.jena.reasoner.rulesys.Rule]", "kind" : "val"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.BackwardChainingReasonerRDD.main", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/BackwardChainingReasonerRDD.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.RDFTriple", "shortDescription" : "", "members_case class" : [{"member" : "net.sansa_stack.inference.spark.backwardchaining.RDFTriple#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.backwardchaining.RDFTriple.o", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#o:String", "kind" : "val"}, {"label" : "p", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.backwardchaining.RDFTriple.p", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#p:String", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.backwardchaining.RDFTriple.s", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/RDFTriple.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.TripleSchema", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html", "members_object" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "toDDL", "tail" : "(): String", "member" : "org.apache.spark.sql.types.StructType.toDDL", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toDDL:String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.types.StructType.sql", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sql:String", "kind" : "def"}, {"label" : "catalogString", "tail" : "(): String", "member" : "org.apache.spark.sql.types.StructType.catalogString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#catalogString:String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(): String", "member" : "org.apache.spark.sql.types.StructType.simpleString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#simpleString:String", "kind" : "def"}, {"label" : "defaultSize", "tail" : "(): Int", "member" : "org.apache.spark.sql.types.StructType.defaultSize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#defaultSize:Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[StructField]", "member" : "org.apache.spark.sql.types.StructType.iterator", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#iterator:Iterator[org.apache.spark.sql.types.StructField]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.apache.spark.sql.types.StructType.length", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#length:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(fieldIndex: Int): StructField", "member" : "org.apache.spark.sql.types.StructType.apply", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#apply(fieldIndex:Int):org.apache.spark.sql.types.StructField", "kind" : "def"}, {"label" : "printTreeString", "tail" : "(): Unit", "member" : "org.apache.spark.sql.types.StructType.printTreeString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#printTreeString():Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.types.StructType.treeString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#treeString:String", "kind" : "def"}, {"label" : "toAttributes", "tail" : "(): Seq[AttributeReference]", "member" : "org.apache.spark.sql.types.StructType.toAttributes", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "def"}, {"label" : "fieldIndex", "tail" : "(name: String): Int", "member" : "org.apache.spark.sql.types.StructType.fieldIndex", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#fieldIndex(name:String):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(names: Set[String]): StructType", "member" : "org.apache.spark.sql.types.StructType.apply", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#apply(names:Set[String]):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String): StructField", "member" : "org.apache.spark.sql.types.StructType.apply", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#apply(name:String):org.apache.spark.sql.types.StructField", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: String, nullable: Boolean, comment: String): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:String,nullable:Boolean,comment:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: String, nullable: Boolean, metadata: Metadata): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:String,nullable:Boolean,metadata:org.apache.spark.sql.types.Metadata):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: String, nullable: Boolean): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:String,nullable:Boolean):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: String): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: DataType, nullable: Boolean, comment: String): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:org.apache.spark.sql.types.DataType,nullable:Boolean,comment:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: DataType, nullable: Boolean, metadata: Metadata): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:org.apache.spark.sql.types.DataType,nullable:Boolean,metadata:org.apache.spark.sql.types.Metadata):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: DataType, nullable: Boolean): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:org.apache.spark.sql.types.DataType,nullable:Boolean):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(name: String, dataType: DataType): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(name:String,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "add", "tail" : "(field: StructField): StructType", "member" : "org.apache.spark.sql.types.StructType.add", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#add(field:org.apache.spark.sql.types.StructField):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.types.StructType.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "org.apache.spark.sql.types.StructType.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "names", "tail" : "(): Array[String]", "member" : "org.apache.spark.sql.types.StructType.names", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#names:Array[String]", "kind" : "def"}, {"label" : "fieldNames", "tail" : "(): Array[String]", "member" : "org.apache.spark.sql.types.StructType.fieldNames", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#fieldNames:Array[String]", "kind" : "def"}, {"label" : "fields", "tail" : ": Array[StructField]", "member" : "org.apache.spark.sql.types.StructType.fields", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#fields:Array[org.apache.spark.sql.types.StructField]", "kind" : "val"}, {"label" : "seq", "tail" : "(): Seq[StructField]", "member" : "scala.collection.Seq.seq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#seq:Seq[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Seq]", "member" : "scala.collection.Seq.companion", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#companion:scala.collection.generic.GenericCompanion[Seq]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SeqLike.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toString():String", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): SeqView[StructField, Seq[StructField]]", "member" : "scala.collection.SeqLike.view", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#view(from:Int,until:Int):scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[StructField, Seq[StructField]]", "member" : "scala.collection.SeqLike.view", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#view:scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqLike.indices", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[StructField]", "member" : "scala.collection.SeqLike.toSeq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Seq[StructField]", "member" : "scala.collection.SeqLike.sorted", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sorted[B>:A](implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (StructField) ⇒ B)(ord: Ordering[B]): Seq[StructField]", "member" : "scala.collection.SeqLike.sortBy", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sortBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (StructField, StructField) ⇒ Boolean): Seq[StructField]", "member" : "scala.collection.SeqLike.sortWith", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sortWith(lt:(A,A)=>Boolean):Repr", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenSeq[B])(p: (StructField, B) ⇒ Boolean): Boolean", "member" : "scala.collection.SeqLike.corresponds", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#corresponds[B](that:scala.collection.GenSeq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.padTo", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#padTo[B>:A,That](len:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.:+", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#:+[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.+:", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#+:[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.updated", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#updated[B>:A,That](index:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patch: GenSeq[B], replaced: Int)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.patch", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#patch[B>:A,That](from:Int,patch:scala.collection.GenSeq[B],replaced:Int)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Seq[StructField]", "member" : "scala.collection.SeqLike.distinct", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#distinct:Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSeq[B]): Seq[StructField]", "member" : "scala.collection.SeqLike.intersect", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#intersect[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSeq[B]): Seq[StructField]", "member" : "scala.collection.SeqLike.diff", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#diff[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSeq[B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.union", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#union[B>:A,That](that:scala.collection.GenSeq[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqLike.contains", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.containsSlice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#containsSlice[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B], end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B],end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B], from: Int): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B],from:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.endsWith", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#endsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B], offset: Int): Boolean", "member" : "scala.collection.SeqLike.startsWith", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#startsWith[B](that:scala.collection.GenSeq[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[StructField]", "member" : "scala.collection.SeqLike.reverseIterator", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (StructField) ⇒ B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.SeqLike.reverseMap", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reverseMap[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Seq[StructField]", "member" : "scala.collection.SeqLike.reverse", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reverse:Repr", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Seq[StructField]]", "member" : "scala.collection.SeqLike.combinations", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#combinations(n:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Seq[StructField]]", "member" : "scala.collection.SeqLike.permutations", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#permutations:Iterator[Repr]", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (StructField) ⇒ Boolean, end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexWhere", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (StructField) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.SeqLike.indexWhere", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (StructField) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.SeqLike.segmentLength", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqLike.size", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#size:Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqLike.isEmpty", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.SeqLike.lengthCompare", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[StructField, ParSeq[StructField]]", "member" : "scala.collection.SeqLike.parCombiner", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParSeq[A]]", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Seq[StructField]): Seq[StructField]", "member" : "scala.collection.SeqLike.toCollection", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toCollection(repr:Repr):Seq[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Seq[StructField]", "member" : "scala.collection.SeqLike.thisCollection", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#thisCollection:Seq[A]", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.GenSeqLike.startsWith", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#startsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (StructField) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.lastIndexWhere", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastIndexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (StructField) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.indexWhere", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (StructField) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.prefixLength", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#prefixLength(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.GenSeqLike.isDefinedAt", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[StructField]", "member" : "scala.collection.IterableLike.toStream", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Seq[StructField], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Seq[StructField], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Seq[StructField], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Seq[StructField]", "member" : "scala.collection.IterableLike.dropRight", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Seq[StructField]", "member" : "scala.collection.IterableLike.takeRight", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Seq[StructField]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Seq[StructField]]", "member" : "scala.collection.IterableLike.sliding", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Seq[StructField]]", "member" : "scala.collection.IterableLike.grouped", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (StructField) ⇒ Boolean): Seq[StructField]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Seq[StructField]", "member" : "scala.collection.IterableLike.drop", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Seq[StructField]", "member" : "scala.collection.IterableLike.take", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Seq[StructField]", "member" : "scala.collection.IterableLike.slice", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): StructField", "member" : "scala.collection.IterableLike.head", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[StructField]", "member" : "scala.collection.IterableLike.toIterator", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[StructField]", "member" : "scala.collection.IterableLike.toIterable", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (StructField, B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (StructField, B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (StructField) ⇒ Boolean): Option[StructField]", "member" : "scala.collection.IterableLike.find", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (StructField) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (StructField) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (StructField) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (StructField) ⇒ GenTraversableOnce[B]): Seq[Seq[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (StructField) ⇒ GenTraversableOnce[B]): Seq[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (StructField) ⇒ (A1, A2, A3)): (Seq[A1], Seq[A2], Seq[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (StructField) ⇒ (A1, A2)): (Seq[A1], Seq[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Seq[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[StructField, Seq[StructField]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (StructField) ⇒ Boolean): FilterMonadic[StructField, Seq[StructField]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, StructField, Col[StructField]]): Col[StructField]", "member" : "scala.collection.TraversableLike.to", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[StructField]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Seq[StructField]]", "member" : "scala.collection.TraversableLike.inits", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Seq[StructField]]", "member" : "scala.collection.TraversableLike.tails", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Seq[StructField], Seq[StructField])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (StructField) ⇒ Boolean): (Seq[StructField], Seq[StructField])", "member" : "scala.collection.TraversableLike.span", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (StructField) ⇒ Boolean): Seq[StructField]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Seq[StructField]", "member" : "scala.collection.TraversableLike.init", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[StructField]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): StructField", "member" : "scala.collection.TraversableLike.last", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Seq[StructField]", "member" : "scala.collection.TraversableLike.tail", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[StructField]", "member" : "scala.collection.TraversableLike.headOption", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (StructField, B) ⇒ B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, StructField) ⇒ B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (StructField) ⇒ K): Map[K, Seq[StructField]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (StructField) ⇒ Boolean): (Seq[StructField], Seq[StructField])", "member" : "scala.collection.TraversableLike.partition", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[StructField, B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (StructField) ⇒ Boolean): Seq[StructField]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (StructField) ⇒ Boolean): Seq[StructField]", "member" : "scala.collection.TraversableLike.filter", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (StructField) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (StructField) ⇒ B)(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Seq[StructField], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Seq[StructField]", "member" : "scala.collection.TraversableLike.repr", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSeq[StructField]", "member" : "scala.collection.Parallelizable.par", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[StructField, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[StructField]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[StructField]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[StructField]", "member" : "scala.collection.TraversableOnce.toList", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (StructField) ⇒ B)(cmp: Ordering[B]): StructField", "member" : "scala.collection.TraversableOnce.minBy", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (StructField) ⇒ B)(cmp: Ordering[B]): StructField", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): StructField", "member" : "scala.collection.TraversableOnce.max", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): StructField", "member" : "scala.collection.TraversableOnce.min", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, StructField) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (StructField, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, StructField) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, StructField) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, StructField) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (StructField, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, StructField) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[StructField, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (StructField) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[StructField]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (StructField) ⇒ U): (Int) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) ⇒ B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) ⇒ Option[StructField]", "member" : "scala.PartialFunction.lift", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (StructField) ⇒ C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Int): (A) ⇒ StructField", "member" : "scala.Function1.compose", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.types.DataType.prettyJson", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#prettyJson:String", "kind" : "def"}, {"label" : "json", "tail" : "(): String", "member" : "org.apache.spark.sql.types.DataType.json", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#json:String", "kind" : "def"}, {"label" : "typeName", "tail" : "(): String", "member" : "org.apache.spark.sql.types.DataType.typeName", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#typeName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/TripleSchema$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net.sansa_stack.inference" : [], "net.sansa_stack.inference.spark.forwardchaining.axioms" : [{"name" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst", "shortDescription" : "A forward chaining implementation for the OWL Horst entailment regime that workson OWL axioms.", "object" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html", "members_class" : [{"label" : "extractAxiom", "tail" : "(axiom: RDD[OWLAxiom], T: AxiomType[_]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst.extractAxiom", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#extractAxiom(axiom:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom],T:org.semanticweb.owlapi.model.AxiomType[_]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"label" : "apply", "tail" : "(axioms: RDD[OWLAxiom]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#apply(axioms:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst#<init>", "error" : "unsupported entity"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst#<init>", "error" : "unsupported entity"}, {"label" : "computeTransitiveClosure", "tail" : "(asserstion: RDD[OWLObjectPropertyAssertionAxiom]): RDD[OWLObjectPropertyAssertionAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(asserstion:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(pairs: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure[A](pairs:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(axioms: RDD[OWLAxiom], T: AxiomType[_]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#computeTransitiveClosure(axioms:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom],T:org.semanticweb.owlapi.model.AxiomType[_]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": HashPartitioner", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.partitioner", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#partitioner:org.apache.spark.HashPartitioner", "kind" : "val"}, {"label" : "parallism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.parallism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#parallism:Int", "kind" : "val"}, {"label" : "f", "tail" : ": OWLDataFactory", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.f", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#f:org.semanticweb.owlapi.model.OWLDataFactory", "kind" : "val"}, {"label" : "m", "tail" : ": OWLOntologyManager", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.m", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#m:org.semanticweb.owlapi.model.OWLOntologyManager", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerOWLHorst.main", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerOWLHorst.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS", "shortDescription" : "A forward chaining implementation for the RDFS entailment regime that workson OWL axioms.", "members_class" : [{"label" : "extractAxiom", "tail" : "(axiom: RDD[OWLAxiom], T: AxiomType[_]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS.extractAxiom", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#extractAxiom(axiom:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom],T:org.semanticweb.owlapi.model.AxiomType[_]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"label" : "apply", "tail" : "(axioms: RDD[OWLAxiom]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#apply(axioms:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext, parallelism: Int): ForwardRuleReasonerRDFS", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS.apply", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#apply(sc:org.apache.spark.SparkContext,parallelism:Int):net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.ForwardRuleReasonerRDFS#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/ForwardRuleReasonerRDFS.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner", "shortDescription" : "", "members_class" : [{"label" : "computeTransitiveClosure", "tail" : "(asserstion: RDD[OWLObjectPropertyAssertionAxiom]): RDD[OWLObjectPropertyAssertionAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#computeTransitiveClosure(asserstion:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(pairs: RDD[(A, A)])(arg0: ClassTag[A]): RDD[(A, A)]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#computeTransitiveClosure[A](pairs:org.apache.spark.rdd.RDD[(A,A)])(implicitevidence$1:scala.reflect.ClassTag[A]):org.apache.spark.rdd.RDD[(A,A)]", "kind" : "def"}, {"label" : "computeTransitiveClosure", "tail" : "(axioms: RDD[OWLAxiom], T: AxiomType[_]): RDD[OWLAxiom]", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.computeTransitiveClosure", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#computeTransitiveClosure(axioms:org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom],T:org.semanticweb.owlapi.model.AxiomType[_]):org.apache.spark.rdd.RDD[org.semanticweb.owlapi.model.OWLAxiom]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": HashPartitioner", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.partitioner", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#partitioner:org.apache.spark.HashPartitioner", "kind" : "val"}, {"label" : "parallism", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.parallism", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#parallism:Int", "kind" : "val"}, {"label" : "f", "tail" : ": OWLDataFactory", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.f", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#f:org.semanticweb.owlapi.model.OWLDataFactory", "kind" : "val"}, {"label" : "m", "tail" : ": OWLOntologyManager", "member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner.m", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#m:org.semanticweb.owlapi.model.OWLOntologyManager", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.forwardchaining.axioms.TransitiveReasoner#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/forwardchaining\/axioms\/TransitiveReasoner.html", "kind" : "class"}], "net.sansa_stack.inference.spark.utils" : [{"name" : "net.sansa_stack.inference.spark.utils.CustomSparkListener", "shortDescription" : "", "members_class" : [{"label" : "onApplicationEnd", "tail" : "(applicationEnd: SparkListenerApplicationEnd): Unit", "member" : "net.sansa_stack.inference.spark.utils.CustomSparkListener.onApplicationEnd", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onApplicationEnd(applicationEnd:org.apache.spark.scheduler.SparkListenerApplicationEnd):Unit", "kind" : "def"}, {"label" : "onApplicationStart", "tail" : "(applicationStart: SparkListenerApplicationStart): Unit", "member" : "net.sansa_stack.inference.spark.utils.CustomSparkListener.onApplicationStart", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onApplicationStart(applicationStart:org.apache.spark.scheduler.SparkListenerApplicationStart):Unit", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.CustomSparkListener.name", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#name:String", "kind" : "var"}, {"label" : "startTime", "tail" : ": Long", "member" : "net.sansa_stack.inference.spark.utils.CustomSparkListener.startTime", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#startTime:Long", "kind" : "var"}, {"member" : "net.sansa_stack.inference.spark.utils.CustomSparkListener#<init>", "error" : "unsupported entity"}, {"label" : "onOtherEvent", "tail" : "(event: SparkListenerEvent): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onOtherEvent", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onOtherEvent(event:org.apache.spark.scheduler.SparkListenerEvent):Unit", "kind" : "def"}, {"label" : "onSpeculativeTaskSubmitted", "tail" : "(speculativeTask: SparkListenerSpeculativeTaskSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onSpeculativeTaskSubmitted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onSpeculativeTaskSubmitted(speculativeTask:org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted):Unit", "kind" : "def"}, {"label" : "onBlockUpdated", "tail" : "(blockUpdated: SparkListenerBlockUpdated): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockUpdated", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onBlockUpdated(blockUpdated:org.apache.spark.scheduler.SparkListenerBlockUpdated):Unit", "kind" : "def"}, {"label" : "onNodeUnblacklisted", "tail" : "(nodeUnblacklisted: SparkListenerNodeUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeUnblacklisted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onNodeUnblacklisted(nodeUnblacklisted:org.apache.spark.scheduler.SparkListenerNodeUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeBlacklisted", "tail" : "(nodeBlacklisted: SparkListenerNodeBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklisted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onNodeBlacklisted(nodeBlacklisted:org.apache.spark.scheduler.SparkListenerNodeBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorUnblacklisted", "tail" : "(executorUnblacklisted: SparkListenerExecutorUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorUnblacklisted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorUnblacklisted(executorUnblacklisted:org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeBlacklistedForStage", "tail" : "(nodeBlacklistedForStage: SparkListenerNodeBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklistedForStage", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onNodeBlacklistedForStage(nodeBlacklistedForStage:org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklistedForStage", "tail" : "(executorBlacklistedForStage: SparkListenerExecutorBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklistedForStage", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorBlacklistedForStage(executorBlacklistedForStage:org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklisted", "tail" : "(executorBlacklisted: SparkListenerExecutorBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklisted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorBlacklisted(executorBlacklisted:org.apache.spark.scheduler.SparkListenerExecutorBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorRemoved", "tail" : "(executorRemoved: SparkListenerExecutorRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorRemoved", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorRemoved(executorRemoved:org.apache.spark.scheduler.SparkListenerExecutorRemoved):Unit", "kind" : "def"}, {"label" : "onExecutorAdded", "tail" : "(executorAdded: SparkListenerExecutorAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorAdded", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorAdded(executorAdded:org.apache.spark.scheduler.SparkListenerExecutorAdded):Unit", "kind" : "def"}, {"label" : "onExecutorMetricsUpdate", "tail" : "(executorMetricsUpdate: SparkListenerExecutorMetricsUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorMetricsUpdate", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onExecutorMetricsUpdate(executorMetricsUpdate:org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate):Unit", "kind" : "def"}, {"label" : "onUnpersistRDD", "tail" : "(unpersistRDD: SparkListenerUnpersistRDD): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnpersistRDD", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onUnpersistRDD(unpersistRDD:org.apache.spark.scheduler.SparkListenerUnpersistRDD):Unit", "kind" : "def"}, {"label" : "onBlockManagerRemoved", "tail" : "(blockManagerRemoved: SparkListenerBlockManagerRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerRemoved", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onBlockManagerRemoved(blockManagerRemoved:org.apache.spark.scheduler.SparkListenerBlockManagerRemoved):Unit", "kind" : "def"}, {"label" : "onBlockManagerAdded", "tail" : "(blockManagerAdded: SparkListenerBlockManagerAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerAdded", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onBlockManagerAdded(blockManagerAdded:org.apache.spark.scheduler.SparkListenerBlockManagerAdded):Unit", "kind" : "def"}, {"label" : "onEnvironmentUpdate", "tail" : "(environmentUpdate: SparkListenerEnvironmentUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onEnvironmentUpdate", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onEnvironmentUpdate(environmentUpdate:org.apache.spark.scheduler.SparkListenerEnvironmentUpdate):Unit", "kind" : "def"}, {"label" : "onJobEnd", "tail" : "(jobEnd: SparkListenerJobEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobEnd", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onJobEnd(jobEnd:org.apache.spark.scheduler.SparkListenerJobEnd):Unit", "kind" : "def"}, {"label" : "onJobStart", "tail" : "(jobStart: SparkListenerJobStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobStart", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onJobStart(jobStart:org.apache.spark.scheduler.SparkListenerJobStart):Unit", "kind" : "def"}, {"label" : "onTaskEnd", "tail" : "(taskEnd: SparkListenerTaskEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskEnd", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onTaskEnd(taskEnd:org.apache.spark.scheduler.SparkListenerTaskEnd):Unit", "kind" : "def"}, {"label" : "onTaskGettingResult", "tail" : "(taskGettingResult: SparkListenerTaskGettingResult): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskGettingResult", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onTaskGettingResult(taskGettingResult:org.apache.spark.scheduler.SparkListenerTaskGettingResult):Unit", "kind" : "def"}, {"label" : "onTaskStart", "tail" : "(taskStart: SparkListenerTaskStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskStart", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onTaskStart(taskStart:org.apache.spark.scheduler.SparkListenerTaskStart):Unit", "kind" : "def"}, {"label" : "onStageSubmitted", "tail" : "(stageSubmitted: SparkListenerStageSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageSubmitted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onStageSubmitted(stageSubmitted:org.apache.spark.scheduler.SparkListenerStageSubmitted):Unit", "kind" : "def"}, {"label" : "onStageCompleted", "tail" : "(stageCompleted: SparkListenerStageCompleted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageCompleted", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#onStageCompleted(stageCompleted:org.apache.spark.scheduler.SparkListenerStageCompleted):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/utils\/CustomSparkListener.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter", "shortDescription" : "Convert N-Triples data into the Apache Parquet format.", "object" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html", "members_class" : [{"label" : "saveAsParquet", "tail" : "(inputPaths: Seq[URI], outputPath: URI): Unit", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.saveAsParquet", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#saveAsParquet(inputPaths:Seq[java.net.URI],outputPath:java.net.URI):Unit", "kind" : "def"}, {"label" : "saveAsParquet", "tail" : "(inputPath: URI, outputPath: URI): Unit", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.saveAsParquet", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#saveAsParquet(inputPath:java.net.URI,outputPath:java.net.URI):Unit", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": SparkSession", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.session", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.main", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "DEFAULT_NUM_THREADS", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.DEFAULT_NUM_THREADS", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#DEFAULT_NUM_THREADS:Int", "kind" : "val"}, {"label" : "DEFAULT_PARALLELISM", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.utils.NTriplesToParquetConverter.DEFAULT_PARALLELISM", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#DEFAULT_PARALLELISM:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/utils\/NTriplesToParquetConverter.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.utils.PrettyDuration", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html", "members_object" : [{"label" : "PrettyPrintableDuration", "tail" : "", "member" : "net.sansa_stack.inference.spark.utils.PrettyDuration.PrettyPrintableDuration", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#PrettyPrintableDurationextendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/PrettyDuration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.utils.RDDUtils", "shortDescription" : "Utility class for RDD operations.", "object" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html", "members_object" : [{"label" : "RDDOps", "tail" : "", "member" : "net.sansa_stack.inference.spark.utils.RDDUtils.RDDOps", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#RDDOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDDUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor", "shortDescription" : "An extractor of the schema for RDFS.", "members_class" : [{"label" : "extractWithIndexAndDistribute", "tail" : "(sc: SparkContext, graph: RDFGraphNative): Map[Node, Broadcast[Map[Node, Set[Node]]]]", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.extractWithIndexAndDistribute", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#extractWithIndexAndDistribute(sc:org.apache.spark.SparkContext,graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):Map[org.apache.jena.graph.Node,org.apache.spark.broadcast.Broadcast[Map[org.apache.jena.graph.Node,Set[org.apache.jena.graph.Node]]]]", "kind" : "def"}, {"label" : "extractWithIndex", "tail" : "(graph: RDFGraphDataFrame): Map[Node, DataFrame]", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.extractWithIndex", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#extractWithIndex(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame):Map[org.apache.jena.graph.Node,org.apache.spark.sql.DataFrame]", "kind" : "def"}, {"label" : "extractWithIndex", "tail" : "(graph: RDFGraphNative): Map[Node, RDD[(Node, Node)]]", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.extractWithIndex", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#extractWithIndex(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):Map[org.apache.jena.graph.Node,org.apache.spark.rdd.RDD[(org.apache.jena.graph.Node,org.apache.jena.graph.Node)]]", "kind" : "def"}, {"label" : "extract", "tail" : "(triples: RDD[Triple]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.extract", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#extract(triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "extract", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.extract", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#extract(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "properties", "tail" : ": Set[Node]", "member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor.properties", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#properties:scala.collection.immutable.Set[org.apache.jena.graph.Node]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.utils.RDFSSchemaExtractor#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/utils\/RDFSSchemaExtractor.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.utils.RDFTriple", "shortDescription" : "", "members_case class" : [{"member" : "net.sansa_stack.inference.spark.utils.RDFTriple#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.RDFTriple.o", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#o:String", "kind" : "val"}, {"label" : "p", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.RDFTriple.p", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#p:String", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.RDFTriple.s", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/utils\/RDFTriple.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.utils.SparkManager", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html", "members_object" : [{"label" : "closeContext", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.utils.SparkManager.closeContext", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#closeContext():Unit", "kind" : "def"}, {"label" : "createSparkContext", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.utils.SparkManager.createSparkContext", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#createSparkContext():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkManager$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.utils.SparkSettings", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html", "members_object" : [{"label" : "jobName", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.jobName", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#jobName:String", "kind" : "var"}, {"label" : "locale", "tail" : ": Boolean", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.locale", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#locale:Boolean", "kind" : "var"}, {"label" : "parallelism", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.parallelism", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#parallelism:String", "kind" : "var"}, {"label" : "memoryFraction", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.memoryFraction", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#memoryFraction:String", "kind" : "var"}, {"label" : "outputFilePath", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.outputFilePath", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#outputFilePath:String", "kind" : "var"}, {"label" : "executorMem", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.executorMem", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#executorMem:String", "kind" : "var"}, {"label" : "STORAGE_LEVEL", "tail" : ": StorageLevel", "member" : "net.sansa_stack.inference.spark.utils.SparkSettings.STORAGE_LEVEL", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#STORAGE_LEVEL:org.apache.spark.storage.StorageLevel", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/utils\/SparkSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net" : [], "net.sansa_stack.inference.spark.forwardchaining" : [], "net.sansa_stack.inference.spark.backwardchaining.tree" : [{"name" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndNode", "shortDescription" : "", "members_class" : [{"member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndNode#<init>", "error" : "unsupported entity"}, {"label" : "element", "tail" : ": TriplePattern", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndNode.element", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#element:org.apache.jena.reasoner.TriplePattern", "kind" : "val"}, {"label" : "renderElement", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.renderElement", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#renderElement():String", "kind" : "def"}, {"label" : "indentS", "tail" : "(s: String, i: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.indentS", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#indentS(s:String,i:Int):String", "kind" : "def"}, {"label" : "print", "tail" : "(indent: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.print", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#print(indent:Int):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#toString():String", "kind" : "def"}, {"label" : "children", "tail" : ": Seq[OrNode]", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.children", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#children:Seq[C]", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndNode.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#toString():String", "kind" : "def"}, {"label" : "size", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree.size", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#size:Unit", "kind" : "def"}, {"label" : "depth", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree.depth", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#depth:Unit", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree#<init>", "error" : "unsupported entity"}, {"label" : "root", "tail" : ": AndNode", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree.root", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#root:net.sansa_stack.inference.spark.backwardchaining.tree.AndNode", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(root: AndNode): AndOrTree", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree.apply", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#apply(root:net.sansa_stack.inference.spark.backwardchaining.tree.AndNode):net.sansa_stack.inference.spark.backwardchaining.tree.AndOrTree", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/AndOrTree.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node", "shortDescription" : "", "members_class" : [{"label" : "renderElement", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.renderElement", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#renderElement():String", "kind" : "def"}, {"label" : "indentS", "tail" : "(s: String, i: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.indentS", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#indentS(s:String,i:Int):String", "kind" : "def"}, {"label" : "print", "tail" : "(indent: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.print", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#print(indent:Int):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#toString():String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[C]", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.children", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#children:Seq[C]", "kind" : "var"}, {"label" : "element", "tail" : ": T", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.element", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#element:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/Node.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.backwardchaining.tree.OrNode", "shortDescription" : "", "members_class" : [{"label" : "renderElement", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.OrNode.renderElement", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#renderElement():String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.backwardchaining.tree.OrNode#<init>", "error" : "unsupported entity"}, {"label" : "element", "tail" : ": Rule", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.OrNode.element", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#element:org.apache.jena.reasoner.rulesys.Rule", "kind" : "val"}, {"label" : "indentS", "tail" : "(s: String, i: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.indentS", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#indentS(s:String,i:Int):String", "kind" : "def"}, {"label" : "print", "tail" : "(indent: Int): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.print", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#print(indent:Int):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.toString", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#toString():String", "kind" : "def"}, {"label" : "children", "tail" : ": Seq[AndNode]", "member" : "net.sansa_stack.inference.spark.backwardchaining.tree.Node.children", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#children:Seq[C]", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/backwardchaining\/tree\/OrNode.html", "kind" : "class"}], "net.sansa_stack.inference.spark.rules" : [{"name" : "net.sansa_stack.inference.spark.rules.Planner", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html", "members_object" : [{"label" : "toMultimap", "tail" : "(triples: RDD[RDFTriple]): Unit", "member" : "net.sansa_stack.inference.spark.rules.Planner.toMultimap", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#toMultimap(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):Unit", "kind" : "def"}, {"label" : "findNextTriplePattern", "tail" : "(triplePatterns: Seq[Triple], variable: Node): Option[Triple]", "member" : "net.sansa_stack.inference.spark.rules.Planner.findNextTriplePattern", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#findNextTriplePattern(triplePatterns:scala.collection.mutable.Seq[org.apache.jena.graph.Triple],variable:org.apache.jena.graph.Node):Option[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "process", "tail" : "(tp: Triple, body: ListBuffer[Triple], visited: Set[Triple]): Unit", "member" : "net.sansa_stack.inference.spark.rules.Planner.process", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#process(tp:org.apache.jena.graph.Triple,body:scala.collection.mutable.ListBuffer[org.apache.jena.graph.Triple],visited:scala.collection.mutable.Set[org.apache.jena.graph.Triple]):Unit", "kind" : "def"}, {"label" : "generatePlan", "tail" : "(rule: Rule): Plan", "member" : "net.sansa_stack.inference.spark.rules.Planner.generatePlan", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#generatePlan(rule:org.apache.jena.reasoner.rulesys.Rule):net.sansa_stack.inference.spark.rules.plan.Plan", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/Planner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.rules.RDDOperations", "shortDescription" : "Common operations on RDD of triples.", "object" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html", "members_object" : [{"label" : "swap", "tail" : "(tuples: RDD[(A, B)]): RDD[(B, A)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.swap", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#swap[A,B](tuples:org.apache.spark.rdd.RDD[(A,B)]):org.apache.spark.rdd.RDD[(B,A)]", "kind" : "def"}, {"label" : "objPredKeySubj", "tail" : "(triples: RDD[RDFTriple]): RDD[((String, String), String)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.objPredKeySubj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#objPredKeySubj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[((String,String),String)]", "kind" : "def"}, {"label" : "subjObjKeyPred", "tail" : "(triples: RDD[RDFTriple]): RDD[((String, String), String)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.subjObjKeyPred", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#subjObjKeyPred(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[((String,String),String)]", "kind" : "def"}, {"label" : "subjPredKeyObj", "tail" : "(triples: RDD[RDFTriple]): RDD[((String, String), String)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.subjPredKeyObj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#subjPredKeyObj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[((String,String),String)]", "kind" : "def"}, {"label" : "predKeyObjSubj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.predKeyObjSubj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#predKeyObjSubj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "predKeySubjObj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.predKeySubjObj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#predKeySubjObj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "objKeyPredSubj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.objKeyPredSubj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#objKeyPredSubj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "objKeySubjPred", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.objKeySubjPred", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#objKeySubjPred(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "subjKeyObjPred", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.subjKeyObjPred", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#subjKeyObjPred(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "subjKeyPredObj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, (String, String))]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.subjKeyPredObj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#subjKeyPredObj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,(String,String))]", "kind" : "def"}, {"label" : "objSubj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, String)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.objSubj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#objSubj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,String)]", "kind" : "def"}, {"label" : "subjObj", "tail" : "(triples: RDD[RDFTriple]): RDD[(String, String)]", "member" : "net.sansa_stack.inference.spark.rules.RDDOperations.subjObj", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#subjObj(triples:org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]):org.apache.spark.rdd.RDD[(String,String)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RDDOperations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.rules.RuleEntailmentType", "shortDescription" : "The type of entailment of a rule, i.e.", "object" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "HYBRID", "tail" : ": Value", "member" : "net.sansa_stack.inference.spark.rules.RuleEntailmentType.HYBRID", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#HYBRID:net.sansa_stack.inference.spark.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "TERMINOLOGICAL", "tail" : ": Value", "member" : "net.sansa_stack.inference.spark.rules.RuleEntailmentType.TERMINOLOGICAL", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#TERMINOLOGICAL:net.sansa_stack.inference.spark.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "ASSERTIONAL", "tail" : ": Value", "member" : "net.sansa_stack.inference.spark.rules.RuleEntailmentType.ASSERTIONAL", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#ASSERTIONAL:net.sansa_stack.inference.spark.rules.RuleEntailmentType.Value", "kind" : "val"}, {"label" : "RuleEntailmentType", "tail" : "", "member" : "net.sansa_stack.inference.spark.rules.RuleEntailmentType.RuleEntailmentType", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#RuleEntailmentType=net.sansa_stack.inference.spark.rules.RuleEntailmentType.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleEntailmentType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.rules.RuleExecutor", "shortDescription" : "A rule executor that works on Spark data structures and operations.", "members_class" : [{"label" : "execute", "tail" : "(rule: Rule, graph: G): G", "member" : "net.sansa_stack.inference.spark.rules.RuleExecutor.execute", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#execute(rule:org.apache.jena.reasoner.rulesys.Rule,graph:G):G", "kind" : "def"}, {"label" : "planGenerator", "tail" : ": Planner.type", "member" : "net.sansa_stack.inference.spark.rules.RuleExecutor.planGenerator", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#planGenerator:net.sansa_stack.inference.spark.rules.Planner.type", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.rules.RuleExecutor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutor.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.rules.RuleExecutorNative", "shortDescription" : "A rule executor that works on Spark data structures and operations.", "members_class" : [{"member" : "net.sansa_stack.inference.spark.rules.RuleExecutorNative#<init>", "error" : "unsupported entity"}, {"label" : "execute", "tail" : "(rule: Rule, graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.rules.RuleExecutor.execute", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#execute(rule:org.apache.jena.reasoner.rulesys.Rule,graph:G):G", "kind" : "def"}, {"label" : "planGenerator", "tail" : ": Planner.type", "member" : "net.sansa_stack.inference.spark.rules.RuleExecutor.planGenerator", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#planGenerator:net.sansa_stack.inference.spark.rules.Planner.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/rules\/RuleExecutorNative.html", "kind" : "class"}], "net.sansa_stack.inference.spark.data.model" : [{"name" : "net.sansa_stack.inference.spark.data.model.AbstractRDFGraphSpark", "shortDescription" : "A data structure that comprises a collection of triples.", "members_class" : [{"member" : "net.sansa_stack.inference.spark.data.model.AbstractRDFGraphSpark#<init>", "error" : "unsupported entity"}, {"label" : "triples", "tail" : ": D", "member" : "net.sansa_stack.inference.spark.data.model.AbstractRDFGraphSpark.triples", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#triples:D", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cache", "tail" : "(): G", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#cache():G", "kind" : "abstract def"}, {"label" : "toRDD", "tail" : "(): RDD[Rdf.Triple]", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.toRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#toRDD():org.apache.spark.rdd.RDD[Rdf#Triple]", "kind" : "abstract def"}, {"label" : "toDataFrame", "tail" : "(sparkSession: SparkSession, schema: SQLSchema): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#toDataFrame(sparkSession:org.apache.spark.sql.SparkSession,schema:net.sansa_stack.inference.data.SQLSchema):org.apache.spark.sql.DataFrame", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.size", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#size():Long", "kind" : "abstract def"}, {"label" : "distinct", "tail" : "(): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.distinct", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#distinct():G", "kind" : "abstract def"}, {"label" : "difference", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.difference", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#difference(graph:G):G", "kind" : "abstract def"}, {"label" : "intersection", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.intersection", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#intersection(graph:G):G", "kind" : "abstract def"}, {"label" : "unionAll", "tail" : "(graphs: Seq[G]): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.unionAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#unionAll(graphs:Seq[G]):G", "kind" : "abstract def"}, {"label" : "union", "tail" : "(graph: G): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.union", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#union(graph:G):G", "kind" : "abstract def"}, {"label" : "find", "tail" : "(triple: Rdf.Triple): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#find(triple:Rdf#Triple):G", "kind" : "abstract def"}, {"label" : "find", "tail" : "(s: Option[Rdf.Node], p: Option[Rdf.Node], o: Option[Rdf.Node]): G", "member" : "net.sansa_stack.inference.data.AbstractRDFGraph.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html#find(s:Option[Rdf#Node],p:Option[Rdf#Node],o:Option[Rdf#Node]):G", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/spark\/data\/model\/AbstractRDFGraphSpark.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.data.model.EmptyRDFGraphDataFrame", "shortDescription" : "Represents an empty RDF graph as Dataframe.", "object" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html", "members_object" : [{"label" : "get", "tail" : "(sqlContext: SQLContext): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.EmptyRDFGraphDataFrame.get", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#get(sqlContext:org.apache.spark.sql.SQLContext):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/EmptyRDFGraphDataFrame$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.sansa_stack.inference.spark.data.model.RDFGraph", "shortDescription" : "A data structure that comprises a set of triples.", "members_case class" : [{"label" : "toDataFrame", "tail" : "(sqlContext: SQLContext): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#toDataFrame(sqlContext:org.apache.spark.sql.SQLContext):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.size", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#size():Long", "kind" : "def"}, {"label" : "cache", "tail" : "(): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#cache():net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "difference", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.difference", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#difference(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "intersection", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.intersection", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#intersection(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "union", "tail" : "(graph: RDFGraph): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.union", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#union(graph:net.sansa_stack.inference.spark.data.model.RDFGraph):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "find", "tail" : "(triple: Triple): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#find(triple:org.apache.jena.graph.Triple):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "find", "tail" : "(s: Option[Node], p: Option[Node], o: Option[Node]): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#find(s:Option[org.apache.jena.graph.Node],p:Option[org.apache.jena.graph.Node],o:Option[org.apache.jena.graph.Node]):org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.data.model.RDFGraph#<init>", "error" : "unsupported entity"}, {"label" : "triples", "tail" : ": RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraph.triples", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraph.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "shortDescription" : "A data structure that comprises a set of triples.", "members_class" : [{"label" : "cache", "tail" : "(): RDFGraphDataFrame.this.type", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#cache():RDFGraphDataFrame.this.type", "kind" : "def"}, {"label" : "toRDD", "tail" : "(): RDD[RDFTriple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.toRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#toRDD():org.apache.spark.rdd.RDD[net.sansa_stack.inference.data.RDFTriple]", "kind" : "def"}, {"label" : "toDataFrame", "tail" : "(sparkSession: SparkSession, schema: SQLSchema): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#toDataFrame(sparkSession:org.apache.spark.sql.SparkSession,schema:net.sansa_stack.inference.data.SQLSchema):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.size", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#size():Long", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.distinct", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#distinct():net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "difference", "tail" : "(graph: RDFGraphDataFrame): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.difference", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#difference(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "intersection", "tail" : "(graph: RDFGraphDataFrame): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.intersection", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#intersection(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "unionAll", "tail" : "(graphs: Seq[RDFGraphDataFrame]): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.unionAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#unionAll(graphs:Seq[net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame]):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "union", "tail" : "(graph: RDFGraphDataFrame): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.union", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#union(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "find", "tail" : "(triple: RDFTriple): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#find(triple:net.sansa_stack.inference.data.RDFTriple):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "find", "tail" : "(s: Option[String], p: Option[String], o: Option[String]): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#find(s:Option[String],p:Option[String],o:Option[String]):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame#<init>", "error" : "unsupported entity"}, {"label" : "schema", "tail" : ": SQLSchema", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.schema", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#schema:net.sansa_stack.inference.data.SQLSchema", "kind" : "val"}, {"label" : "triples", "tail" : ": DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame.triples", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#triples:org.apache.spark.sql.DataFrame", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataFrame.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "shortDescription" : "A data structure that comprises a set of triples.", "members_class" : [{"label" : "toRDD", "tail" : "(): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.toRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#toRDD():org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "toDataFrame", "tail" : "(sparkSession: SparkSession, schema: SQLSchema): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#toDataFrame(sparkSession:org.apache.spark.sql.SparkSession,schema:net.sansa_stack.inference.data.SQLSchema):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "cache", "tail" : "(): RDFGraphDataset.this.type", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#cache():RDFGraphDataset.this.type", "kind" : "def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.size", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#size():Long", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.distinct", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#distinct():net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "difference", "tail" : "(graph: RDFGraphDataset): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.difference", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#difference(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataset):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "intersection", "tail" : "(graph: RDFGraphDataset): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.intersection", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#intersection(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataset):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "unionAll", "tail" : "(graphs: Seq[RDFGraphDataset]): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.unionAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#unionAll(graphs:Seq[net.sansa_stack.inference.spark.data.model.RDFGraphDataset]):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "union", "tail" : "(graph: RDFGraphDataset): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.union", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#union(graph:net.sansa_stack.inference.spark.data.model.RDFGraphDataset):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "find", "tail" : "(triple: Triple): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#find(triple:org.apache.jena.graph.Triple):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "find", "tail" : "(s: Option[Node], p: Option[Node], o: Option[Node]): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#find(s:Option[org.apache.jena.graph.Node],p:Option[org.apache.jena.graph.Node],o:Option[org.apache.jena.graph.Node]):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset#<init>", "error" : "unsupported entity"}, {"label" : "triples", "tail" : ": Dataset[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphDataset.triples", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#triples:org.apache.spark.sql.Dataset[org.apache.jena.graph.Triple]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphDataset.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative", "shortDescription" : "A data structure that comprises a set of triples based on an RDD.", "members_class" : [{"label" : "toDataFrame", "tail" : "(sparkSession: SparkSession, schema: SQLSchema): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#toDataFrame(sparkSession:org.apache.spark.sql.SparkSession,schema:net.sansa_stack.inference.data.SQLSchema):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "toRDD", "tail" : "(): RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.toRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#toRDD():org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "def"}, {"label" : "cache", "tail" : "(): RDFGraphNative.this.type", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#cache():RDFGraphNative.this.type", "kind" : "def"}, {"label" : "size", "tail" : "(): Long", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.size", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#size():Long", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.distinct", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#distinct():net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "difference", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.difference", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#difference(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "intersection", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.intersection", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#intersection(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "unionAll", "tail" : "(graphs: Seq[RDFGraphNative]): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.unionAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#unionAll(graphs:Seq[net.sansa_stack.inference.spark.data.model.RDFGraphNative]):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "union", "tail" : "(graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.union", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#union(graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "find", "tail" : "(triple: Triple): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#find(triple:org.apache.jena.graph.Triple):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "find", "tail" : "(s: Option[Node], p: Option[Node], o: Option[Node]): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.find", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#find(s:Option[org.apache.jena.graph.Node],p:Option[org.apache.jena.graph.Node],o:Option[org.apache.jena.graph.Node]):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative#<init>", "error" : "unsupported entity"}, {"label" : "triples", "tail" : ": RDD[Triple]", "member" : "net.sansa_stack.inference.spark.data.model.RDFGraphNative.triples", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#triples:org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFGraphNative.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.data.model.RDFTuple", "shortDescription" : "An RDF tuple (s o), i.e.", "members_case class" : [{"label" : "_2", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.data.model.RDFTuple._2", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#_2:String", "kind" : "def"}, {"label" : "_1", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.data.model.RDFTuple._1", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#_1:String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.data.model.RDFTuple#<init>", "error" : "unsupported entity"}, {"label" : "o", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.data.model.RDFTuple.o", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#o:String", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "net.sansa_stack.inference.spark.data.model.RDFTuple.s", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#s:String", "kind" : "val"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product2.productElement", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#productElement(n:Int):Any", "kind" : "def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product2.productArity", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#productArity:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/data\/model\/RDFTuple.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cache", "tail" : "(): G", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.cache", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#cache():G", "kind" : "abstract def"}, {"label" : "toRDD", "tail" : "(): RDD[Rdf.Triple]", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.toRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#toRDD():org.apache.spark.rdd.RDD[Rdf#Triple]", "kind" : "abstract def"}, {"label" : "toDataFrame", "tail" : "(sparkSession: SparkSession, schema: SQLSchema): DataFrame", "member" : "net.sansa_stack.inference.spark.data.model.SparkGraphExtensions.toDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html#toDataFrame(sparkSession:org.apache.spark.sql.SparkSession,schema:net.sansa_stack.inference.data.SQLSchema):org.apache.spark.sql.DataFrame", "kind" : "abstract def"}], "shortDescription" : "Some Spark based extension for an RDF graph.", "trait" : "net\/sansa_stack\/inference\/spark\/data\/model\/SparkGraphExtensions.html", "kind" : "trait"}, {"name" : "net.sansa_stack.inference.spark.data.model.TripleUtils", "shortDescription" : "", "object" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html", "members_class" : [{"label" : "RichTriple", "tail" : "", "member" : "net.sansa_stack.inference.spark.data.model.TripleUtils.RichTriple", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#RichTripleextendsAnyRef", "kind" : "implicit class"}, {"member" : "net.sansa_stack.inference.spark.data.model.TripleUtils#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "RichTriple", "tail" : "", "member" : "net.sansa_stack.inference.spark.data.model.TripleUtils.RichTriple", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html#RichTripleextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/data\/model\/TripleUtils.html", "kind" : "object"}], "net.sansa_stack.inference.spark.rules.plan" : [{"name" : "net.sansa_stack.inference.spark.rules.plan.Join", "shortDescription" : "A join between two triple patterns.", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Join.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#toString():String", "kind" : "def"}, {"member" : "net.sansa_stack.inference.spark.rules.plan.Join#<init>", "error" : "unsupported entity"}, {"label" : "joinVar", "tail" : ": Node", "member" : "net.sansa_stack.inference.spark.rules.plan.Join.joinVar", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#joinVar:org.apache.jena.graph.Node", "kind" : "val"}, {"label" : "tp2", "tail" : ": Triple", "member" : "net.sansa_stack.inference.spark.rules.plan.Join.tp2", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#tp2:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "tp1", "tail" : ": Triple", "member" : "net.sansa_stack.inference.spark.rules.plan.Join.tp1", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#tp1:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Join.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.rules.plan.Plan", "shortDescription" : "An execution plan to process a single rule.", "members_case class" : [{"label" : "objectColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.objectColumn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#objectColumn():String", "kind" : "def"}, {"label" : "predicateColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.predicateColumn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#predicateColumn():String", "kind" : "def"}, {"label" : "subjectColumn", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.subjectColumn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#subjectColumn():String", "kind" : "def"}, {"label" : "table", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.table", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#table():String", "kind" : "def"}, {"label" : "tableName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.tableName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#tableName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "objectColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.objectColumnName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#objectColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "predicateColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.predicateColumnName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#predicateColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "subjectColumnName", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.subjectColumnName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#subjectColumnName(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "whereParts", "tail" : "(tp: Triple): Set[String]", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.whereParts", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#whereParts(tp:org.apache.jena.graph.Triple):scala.collection.mutable.Set[String]", "kind" : "def"}, {"label" : "isVarWithName", "tail" : "(node: Node): Boolean", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.isVarWithName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#isVarWithName(node:org.apache.jena.graph.Node):Boolean", "kind" : "def"}, {"label" : "expressionFor", "tail" : "(variable: Node, tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.expressionFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#expressionFor(variable:org.apache.jena.graph.Node,tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "fromPart", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.fromPart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#fromPart(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "joinExpressionFor", "tail" : "(join: Join): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.joinExpressionFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#joinExpressionFor(join:net.sansa_stack.inference.spark.rules.plan.Join):String", "kind" : "def"}, {"label" : "joinExpressionFor", "tail" : "(tp1: Triple, tp2: Triple, joinVar: Node): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.joinExpressionFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#joinExpressionFor(tp1:org.apache.jena.graph.Triple,tp2:org.apache.jena.graph.Triple,joinVar:org.apache.jena.graph.Node):String", "kind" : "def"}, {"label" : "uniqueAliasFor", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.uniqueAliasFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#uniqueAliasFor(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(tp: Triple, selectedVars: List[Node]): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#projectionPart(tp:org.apache.jena.graph.Triple,selectedVars:List[org.apache.jena.graph.Node]):String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(tp: Triple): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#projectionPart(tp:org.apache.jena.graph.Triple):String", "kind" : "def"}, {"label" : "toSQL", "tail" : "(tp: Triple, sqlSchema: SQLSchema): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.toSQL", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#toSQL(tp:org.apache.jena.graph.Triple,sqlSchema:net.sansa_stack.inference.data.SQLSchema):String", "kind" : "def"}, {"label" : "wherePart", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.wherePart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#wherePart():String", "kind" : "def"}, {"label" : "joinsFor", "tail" : "(tp1: Triple, tp2: Triple): Join", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.joinsFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#joinsFor(tp1:org.apache.jena.graph.Triple,tp2:org.apache.jena.graph.Triple):net.sansa_stack.inference.spark.rules.plan.Join", "kind" : "def"}, {"label" : "fromPart", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.fromPart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#fromPart():String", "kind" : "def"}, {"label" : "projectionPart", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.projectionPart", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#projectionPart():String", "kind" : "def"}, {"label" : "toSQL", "tail" : "(): String", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.toSQL", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#toSQL:String", "kind" : "def"}, {"label" : "toLogicalPlan", "tail" : "(sqlContext: SQLContext): LogicalPlan", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.toLogicalPlan", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#toLogicalPlan(sqlContext:org.apache.spark.sql.SQLContext):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "addTriplePattern", "tail" : "(tp: TriplePattern): Unit", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.addTriplePattern", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#addTriplePattern(tp:org.apache.jena.reasoner.TriplePattern):Unit", "kind" : "def"}, {"label" : "generateJoins", "tail" : "(): Unit", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.generateJoins", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#generateJoins():Unit", "kind" : "def"}, {"label" : "schema", "tail" : ": SQLSchema", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.schema", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#schema:net.sansa_stack.inference.data.SQLSchema", "kind" : "var"}, {"label" : "idx", "tail" : ": Int", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.idx", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#idx:Int", "kind" : "var"}, {"label" : "aliases", "tail" : ": HashMap[Triple, String]", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.aliases", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#aliases:scala.collection.mutable.HashMap[org.apache.jena.graph.Triple,String]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.rules.plan.Plan#<init>", "error" : "unsupported entity"}, {"label" : "joins", "tail" : ": Set[Join]", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.joins", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#joins:scala.collection.mutable.Set[net.sansa_stack.inference.spark.rules.plan.Join]", "kind" : "val"}, {"label" : "target", "tail" : ": Triple", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.target", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#target:org.apache.jena.graph.Triple", "kind" : "val"}, {"label" : "triplePatterns", "tail" : ": Set[Triple]", "member" : "net.sansa_stack.inference.spark.rules.plan.Plan.triplePatterns", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#triplePatterns:Set[org.apache.jena.graph.Triple]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/Plan.html", "kind" : "case class"}, {"name" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutor", "shortDescription" : "An executor for a rule execution plan.", "members_class" : [{"label" : "logger", "tail" : ": Logger", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutor.logger", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#logger:com.typesafe.scalalogging.Logger", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "execute", "tail" : "(plan: Plan, graph: G): G", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutor.execute", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html#execute(plan:net.sansa_stack.inference.spark.rules.plan.Plan,graph:G):G", "kind" : "abstract def"}], "class" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutor.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative", "shortDescription" : "An executor that works on the the native Scala data structures and uses Spark joins, filters etc.", "members_class" : [{"label" : "EnrichedWithToTuple", "tail" : "", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.EnrichedWithToTuple", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#EnrichedWithToTuple[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "expressionsFor", "tail" : "(expr: Expression, isJoin: Boolean): List[Expression]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.expressionsFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#expressionsFor(expr:org.apache.spark.sql.catalyst.expressions.Expression,isJoin:Boolean):List[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "expressionsFor", "tail" : "(logicalPlan: LogicalPlan): List[Expression]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.expressionsFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#expressionsFor(logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):List[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "applyFilter", "tail" : "(condition: Expression, childExpressions: List[Expression], rdd: RDD[T]): RDD[T]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.applyFilter", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#applyFilter[T<:Product](condition:org.apache.spark.sql.catalyst.expressions.Expression,childExpressions:List[org.apache.spark.sql.catalyst.expressions.Expression],rdd:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "mergedRDD", "tail" : "(tuples: RDD[(Product, (Product, Product))], joinPositions: Seq[Int]): RDD[Product]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.mergedRDD", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#mergedRDD(tuples:org.apache.spark.rdd.RDD[(Product,(Product,Product))],joinPositions:Seq[Int]):org.apache.spark.rdd.RDD[Product]", "kind" : "def"}, {"label" : "mergeKeyValue", "tail" : "(pair: (Product, (Product, Product)), joinPositions: Seq[Int]): Product", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.mergeKeyValue", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#mergeKeyValue(pair:(Product,(Product,Product)),joinPositions:Seq[Int]):Product", "kind" : "def"}, {"label" : "toPairRDD", "tail" : "(tuples: RDD[Product], joinPositions: Seq[Int]): RDD[(Product, Product)]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.toPairRDD", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#toPairRDD[T>:Product](tuples:org.apache.spark.rdd.RDD[Product],joinPositions:Seq[Int]):org.apache.spark.rdd.RDD[(Product,Product)]", "kind" : "def"}, {"label" : "asKeyValue", "tail" : "(tuple: Product, keyPositions: Seq[Int]): (Product, Product)", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.asKeyValue", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#asKeyValue(tuple:Product,keyPositions:Seq[Int]):(Product,Product)", "kind" : "def"}, {"label" : "genMapper", "tail" : "(f: (A) ⇒ B): (A) ⇒ B", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.genMapper", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#genMapper[A,B](f:A=>B):A=>B", "kind" : "def"}, {"label" : "extract", "tail" : "(tuple: T, positions: Seq[Int], aliases: Seq[(Int, Expression)]): Product", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.extract", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#extract[T<:Product](tuple:T,positions:Seq[Int],aliases:scala.collection.mutable.Seq[(Int,org.apache.spark.sql.catalyst.expressions.Expression)]):Product", "kind" : "def"}, {"label" : "joinConditionsFor", "tail" : "(expr: Expression): List[EqualTo]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.joinConditionsFor", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#joinConditionsFor(expr:org.apache.spark.sql.catalyst.expressions.Expression):List[org.apache.spark.sql.catalyst.expressions.EqualTo]", "kind" : "def"}, {"label" : "executePlan", "tail" : "(logicalPlan: LogicalPlan, triples: RDD[Product]): RDD[Product]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.executePlan", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#executePlan[T>:Product,U<:Product](logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,triples:org.apache.spark.rdd.RDD[Product]):org.apache.spark.rdd.RDD[Product]", "kind" : "def"}, {"label" : "performProjection", "tail" : "(rdd: RDD[Product], projectList: Seq[NamedExpression], child: LogicalPlan): RDD[Product]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.performProjection", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#performProjection(rdd:org.apache.spark.rdd.RDD[Product],projectList:Seq[org.apache.spark.sql.catalyst.expressions.NamedExpression],child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.rdd.RDD[Product]", "kind" : "def"}, {"label" : "performProjection", "tail" : "(rdd: RDD[Product], projectList: Seq[Expression], childExpressions: Seq[Expression], joinConditions: Seq[EqualTo]): RDD[Product]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.performProjection", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#performProjection(rdd:org.apache.spark.rdd.RDD[Product],projectList:Seq[org.apache.spark.sql.catalyst.expressions.Expression],childExpressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression],joinConditions:Seq[org.apache.spark.sql.catalyst.expressions.EqualTo]):org.apache.spark.rdd.RDD[Product]", "kind" : "def"}, {"label" : "performJoin", "tail" : "(leftRDD: RDD[Product], rightRDD: RDD[Product], leftExpressions: List[Expression], rightExpressions: List[Expression], joinCondition: Expression): RDD[Product]", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.performJoin", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#performJoin(leftRDD:org.apache.spark.rdd.RDD[Product],rightRDD:org.apache.spark.rdd.RDD[Product],leftExpressions:List[org.apache.spark.sql.catalyst.expressions.Expression],rightExpressions:List[org.apache.spark.sql.catalyst.expressions.Expression],joinCondition:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.rdd.RDD[Product]", "kind" : "def"}, {"label" : "execute", "tail" : "(plan: Plan, graph: RDFGraphNative): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.execute", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#execute(plan:net.sansa_stack.inference.spark.rules.plan.Plan,graph:net.sansa_stack.inference.spark.data.model.RDFGraphNative):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "emptyGraph", "tail" : ": DataFrame", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.emptyGraph", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#emptyGraph:org.apache.spark.sql.DataFrame", "kind" : "val"}, {"label" : "sqlContext", "tail" : ": SQLContext", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative.sqlContext", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#sqlContext:org.apache.spark.sql.SQLContext", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutorNative#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#error(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#error(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.error", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#error(msg:=>String):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#warn(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#warn(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.warn", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#warn(msg:=>String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#info(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#info(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.info", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#info(msg:=>String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#debug(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#debug(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.debug", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#debug(msg:=>String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, o: Any, os: Any*): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#trace(msg:=>String,o:Any,os:Any*):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String, e: Throwable): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#trace(msg:=>String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(msg: ⇒ String): Unit", "member" : "net.sansa_stack.inference.utils.Logging.trace", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#trace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "net.sansa_stack.inference.utils.Logging.logName", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#logName:String", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "net.sansa_stack.inference.utils.Logging.log", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "net.sansa_stack.inference.spark.rules.plan.PlanExecutor.logger", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#logger:com.typesafe.scalalogging.Logger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/PlanExecutorNative.html", "kind" : "class"}, {"name" : "net.sansa_stack.inference.spark.rules.plan.SQLQuery", "shortDescription" : "", "members_class" : [{"label" : "select", "tail" : "(variable: Node): Unit", "member" : "net.sansa_stack.inference.spark.rules.plan.SQLQuery.select", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#select(variable:org.apache.jena.graph.Node):Unit", "kind" : "def"}, {"label" : "selectableVariables", "tail" : "(): List[Node]", "member" : "net.sansa_stack.inference.spark.rules.plan.SQLQuery.selectableVariables", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#selectableVariables:List[org.apache.jena.graph.Node]", "kind" : "def"}, {"label" : "selectedVars", "tail" : ": Set[Node]", "member" : "net.sansa_stack.inference.spark.rules.plan.SQLQuery.selectedVars", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#selectedVars:scala.collection.mutable.Set[org.apache.jena.graph.Node]", "kind" : "val"}, {"member" : "net.sansa_stack.inference.spark.rules.plan.SQLQuery#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/sansa_stack\/inference\/spark\/rules\/plan\/SQLQuery.html", "kind" : "class"}], "net.sansa_stack" : [], "net.sansa_stack.inference.spark.data" : [], "net.sansa_stack.inference.spark" : [{"name" : "net.sansa_stack.inference.spark.RDFGraphMaterializer", "shortDescription" : "The main entry class to compute the materialization on an RDF graph.", "object" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html", "members_object" : [{"label" : "parser", "tail" : ": OptionParser[Config]", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.parser", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#parser:scopt.OptionParser[net.sansa_stack.inference.spark.RDFGraphMaterializer.Config]", "kind" : "val"}, {"label" : "nodeRead", "tail" : ": Read[Node]", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.nodeRead", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#nodeRead:scopt.Read[org.apache.jena.graph.Node]", "kind" : "implicit val"}, {"label" : "profilesRead", "tail" : ": Read[rules.ReasoningProfile.Value]", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.profilesRead", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#profilesRead:scopt.Read[net.sansa_stack.inference.rules.ReasoningProfile.Value]", "kind" : "implicit val"}, {"label" : "Config", "tail" : "", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.Config", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#ConfigextendsProductwithSerializable", "kind" : "case class"}, {"label" : "run", "tail" : "(input: Seq[URI], output: URI, profile: ReasoningProfile, properties: Seq[Node], writeToSingleFile: Boolean, sortedOutput: Boolean, parallelism: Int): Unit", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.run", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#run(input:Seq[java.net.URI],output:java.net.URI,profile:net.sansa_stack.inference.rules.ReasoningProfile.ReasoningProfile,properties:Seq[org.apache.jena.graph.Node],writeToSingleFile:Boolean,sortedOutput:Boolean,parallelism:Int):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.RDFGraphMaterializer.main", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/RDFGraphMaterializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net.sansa_stack.inference.spark.data.loader" : [{"name" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader", "shortDescription" : "A class that provides methods to load an RDF graph from disk.", "object" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.main", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "loadFromDiskAsDataFrame", "tail" : "(session: SparkSession, path: String, minPartitions: Int, sqlSchema: SQLSchema): RDFGraphDataFrame", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDiskAsDataFrame", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDiskAsDataFrame(session:org.apache.spark.sql.SparkSession,path:String,minPartitions:Int,sqlSchema:net.sansa_stack.inference.data.SQLSchema):net.sansa_stack.inference.spark.data.model.RDFGraphDataFrame", "kind" : "def"}, {"label" : "loadFromDiskAsDataset", "tail" : "(session: SparkSession, paths: Seq[URI]): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDiskAsDataset", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDiskAsDataset(session:org.apache.spark.sql.SparkSession,paths:Seq[java.net.URI]):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "loadFromDiskAsDataset", "tail" : "(session: SparkSession, path: String): RDFGraphDataset", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDiskAsDataset", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDiskAsDataset(session:org.apache.spark.sql.SparkSession,path:String):net.sansa_stack.inference.spark.data.model.RDFGraphDataset", "kind" : "def"}, {"label" : "loadFromDiskAsRDD", "tail" : "(session: SparkSession, path: String, minPartitions: Int): RDFGraphNative", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDiskAsRDD", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDiskAsRDD(session:org.apache.spark.sql.SparkSession,path:String,minPartitions:Int):net.sansa_stack.inference.spark.data.model.RDFGraphNative", "kind" : "def"}, {"label" : "loadFromDisk", "tail" : "(session: SparkSession, path: URI, minPartitions: Int): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDisk(session:org.apache.spark.sql.SparkSession,path:java.net.URI,minPartitions:Int):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "loadFromDisk", "tail" : "(session: SparkSession, paths: Seq[URI], minPartitions: Int): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDisk(session:org.apache.spark.sql.SparkSession,paths:Seq[java.net.URI],minPartitions:Int):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "loadFromDisk", "tail" : "(session: SparkSession, path: String, minPartitions: Int): RDFGraph", "member" : "net.sansa_stack.inference.spark.data.loader.RDFGraphLoader.loadFromDisk", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#loadFromDisk(session:org.apache.spark.sql.SparkSession,path:String,minPartitions:Int):net.sansa_stack.inference.spark.data.model.RDFGraph", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/sansa_stack\/inference\/spark\/data\/loader\/RDFGraphLoader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};